
Aplicacion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000372  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800114  00800114  0000041a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001447  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098e  00000000  00000000  000019f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000096a  00000000  00000000  00002381  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00002cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c6  00000000  00000000  00002fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f35  00000000  00000000  0000357a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000044af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e2 e7       	ldi	r30, 0x72	; 114
  bc:	f3 e0       	ldi	r31, 0x03	; 3
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a4 31       	cpi	r26, 0x14	; 20
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	a4 e1       	ldi	r26, 0x14	; 20
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a8 31       	cpi	r26, 0x18	; 24
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 aa 01 	call	0x354	; 0x354 <main>
  de:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <actualizarVarInferior>:
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;i<size;i++){
		LCDsendChar(dato[i]);
	}
}
  e6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <datoInferior+0x1>
  ea:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <datoInferior>
  ee:	08 95       	ret

000000f0 <actualizarVarSuperior>:
  f0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
  f4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
  f8:	08 95       	ret

000000fa <mostrarArriba>:
void mostrarArriba()
{ //recibe el string, la posición a ser mostrado y la longitud del string
  fa:	cf 93       	push	r28
	uint8_t i;
	LCDGotoXY(0,0);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDGotoXY>
	for(i=0;i<x;i++){
 104:	c0 e0       	ldi	r28, 0x00	; 0
 106:	0a c0       	rjmp	.+20     	; 0x11c <mostrarArriba+0x22>
		LCDsendChar(datoSuperior[i]);
 108:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 10c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x1>
 110:	ec 0f       	add	r30, r28
 112:	f1 1d       	adc	r31, r1
 114:	80 81       	ld	r24, Z
 116:	0e 94 b0 00 	call	0x160	; 0x160 <LCDsendChar>
}
void mostrarArriba()
{ //recibe el string, la posición a ser mostrado y la longitud del string
	uint8_t i;
	LCDGotoXY(0,0);
	for(i=0;i<x;i++){
 11a:	cf 5f       	subi	r28, 0xFF	; 255
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 120:	c8 17       	cp	r28, r24
 122:	90 f3       	brcs	.-28     	; 0x108 <mostrarArriba+0xe>
		LCDsendChar(datoSuperior[i]);
	}
}
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <mostrarAbajo>:
void mostrarAbajo()
{ //recibe el string, la posición a ser mostrado y la longitud del string
 128:	cf 93       	push	r28
	uint8_t i;
	LCDGotoXY(0,1);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDGotoXY>
	for(i=0;i<x;i++){
 132:	c0 e0       	ldi	r28, 0x00	; 0
 134:	0a c0       	rjmp	.+20     	; 0x14a <mostrarAbajo+0x22>
		LCDsendChar(datoInferior[i]);
 136:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <datoInferior>
 13a:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <datoInferior+0x1>
 13e:	ec 0f       	add	r30, r28
 140:	f1 1d       	adc	r31, r1
 142:	80 81       	ld	r24, Z
 144:	0e 94 b0 00 	call	0x160	; 0x160 <LCDsendChar>
}
void mostrarAbajo()
{ //recibe el string, la posición a ser mostrado y la longitud del string
	uint8_t i;
	LCDGotoXY(0,1);
	for(i=0;i<x;i++){
 148:	cf 5f       	subi	r28, 0xFF	; 255
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 14e:	c8 17       	cp	r28, r24
 150:	90 f3       	brcs	.-28     	; 0x136 <mostrarAbajo+0xe>
		LCDsendChar(datoInferior[i]);
	}
}
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <mostrar>:
void mostrar() //método que llamaría en la interrupción
{
	mostrarArriba();
 156:	0e 94 7d 00 	call	0xfa	; 0xfa <mostrarArriba>
	mostrarAbajo();
 15a:	0e 94 94 00 	call	0x128	; 0x128 <mostrarAbajo>
 15e:	08 95       	ret

00000160 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;i<(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 160:	98 2f       	mov	r25, r24
 162:	90 7f       	andi	r25, 0xF0	; 240
 164:	95 b9       	out	0x05, r25	; 5
 166:	95 b1       	in	r25, 0x05	; 5
 168:	91 60       	ori	r25, 0x01	; 1
 16a:	95 b9       	out	0x05, r25	; 5
 16c:	95 b1       	in	r25, 0x05	; 5
 16e:	94 60       	ori	r25, 0x04	; 4
 170:	95 b9       	out	0x05, r25	; 5
 172:	2a e6       	ldi	r18, 0x6A	; 106
 174:	2a 95       	dec	r18
 176:	f1 f7       	brne	.-4      	; 0x174 <LCDsendChar+0x14>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCDsendChar+0x1a>
 17a:	95 b1       	in	r25, 0x05	; 5
 17c:	9b 7f       	andi	r25, 0xFB	; 251
 17e:	95 b9       	out	0x05, r25	; 5
 180:	95 b1       	in	r25, 0x05	; 5
 182:	9e 7f       	andi	r25, 0xFE	; 254
 184:	95 b9       	out	0x05, r25	; 5
 186:	9a e6       	ldi	r25, 0x6A	; 106
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCDsendChar+0x28>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCDsendChar+0x2e>
 18e:	20 e1       	ldi	r18, 0x10	; 16
 190:	82 9f       	mul	r24, r18
 192:	c0 01       	movw	r24, r0
 194:	11 24       	eor	r1, r1
 196:	85 b9       	out	0x05, r24	; 5
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	85 b9       	out	0x05, r24	; 5
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	84 60       	ori	r24, 0x04	; 4
 1a2:	85 b9       	out	0x05, r24	; 5
 1a4:	8a e6       	ldi	r24, 0x6A	; 106
 1a6:	8a 95       	dec	r24
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCDsendChar+0x46>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCDsendChar+0x4c>
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	8b 7f       	andi	r24, 0xFB	; 251
 1b0:	85 b9       	out	0x05, r24	; 5
 1b2:	85 b1       	in	r24, 0x05	; 5
 1b4:	8e 7f       	andi	r24, 0xFE	; 254
 1b6:	85 b9       	out	0x05, r24	; 5
 1b8:	9a e6       	ldi	r25, 0x6A	; 106
 1ba:	9a 95       	dec	r25
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCDsendChar+0x5a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCDsendChar+0x60>
 1c0:	08 95       	ret

000001c2 <LCDsendCommand>:
 1c2:	98 2f       	mov	r25, r24
 1c4:	90 7f       	andi	r25, 0xF0	; 240
 1c6:	95 b9       	out	0x05, r25	; 5
 1c8:	95 b1       	in	r25, 0x05	; 5
 1ca:	94 60       	ori	r25, 0x04	; 4
 1cc:	95 b9       	out	0x05, r25	; 5
 1ce:	ef ec       	ldi	r30, 0xCF	; 207
 1d0:	f7 e0       	ldi	r31, 0x07	; 7
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCDsendCommand+0x10>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCDsendCommand+0x16>
 1d8:	00 00       	nop
 1da:	95 b1       	in	r25, 0x05	; 5
 1dc:	9b 7f       	andi	r25, 0xFB	; 251
 1de:	95 b9       	out	0x05, r25	; 5
 1e0:	ef ec       	ldi	r30, 0xCF	; 207
 1e2:	f7 e0       	ldi	r31, 0x07	; 7
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDsendCommand+0x22>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCDsendCommand+0x28>
 1ea:	00 00       	nop
 1ec:	f0 e1       	ldi	r31, 0x10	; 16
 1ee:	8f 9f       	mul	r24, r31
 1f0:	c0 01       	movw	r24, r0
 1f2:	11 24       	eor	r1, r1
 1f4:	85 b9       	out	0x05, r24	; 5
 1f6:	85 b1       	in	r24, 0x05	; 5
 1f8:	84 60       	ori	r24, 0x04	; 4
 1fa:	85 b9       	out	0x05, r24	; 5
 1fc:	8f ec       	ldi	r24, 0xCF	; 207
 1fe:	97 e0       	ldi	r25, 0x07	; 7
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <LCDsendCommand+0x3e>
 204:	00 c0       	rjmp	.+0      	; 0x206 <LCDsendCommand+0x44>
 206:	00 00       	nop
 208:	85 b1       	in	r24, 0x05	; 5
 20a:	8b 7f       	andi	r24, 0xFB	; 251
 20c:	85 b9       	out	0x05, r24	; 5
 20e:	ef ec       	ldi	r30, 0xCF	; 207
 210:	f7 e0       	ldi	r31, 0x07	; 7
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <LCDsendCommand+0x50>
 216:	00 c0       	rjmp	.+0      	; 0x218 <LCDsendCommand+0x56>
 218:	00 00       	nop
 21a:	08 95       	ret

0000021c <LCDGotoXY>:
 21c:	62 30       	cpi	r22, 0x02	; 2
 21e:	31 f0       	breq	.+12     	; 0x22c <LCDGotoXY+0x10>
 220:	63 30       	cpi	r22, 0x03	; 3
 222:	31 f0       	breq	.+12     	; 0x230 <LCDGotoXY+0x14>
 224:	61 30       	cpi	r22, 0x01	; 1
 226:	29 f4       	brne	.+10     	; 0x232 <LCDGotoXY+0x16>
 228:	80 5c       	subi	r24, 0xC0	; 192
 22a:	03 c0       	rjmp	.+6      	; 0x232 <LCDGotoXY+0x16>
 22c:	8c 5e       	subi	r24, 0xEC	; 236
 22e:	01 c0       	rjmp	.+2      	; 0x232 <LCDGotoXY+0x16>
 230:	8c 5a       	subi	r24, 0xAC	; 172
 232:	80 68       	ori	r24, 0x80	; 128
 234:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendCommand>
 238:	08 95       	ret

0000023a <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 248:	86 2f       	mov	r24, r22
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	80 64       	ori	r24, 0x40	; 64
	for (i=0; i<8; i++){
 25a:	c0 e0       	ldi	r28, 0x00	; 0
 25c:	d0 e0       	ldi	r29, 0x00	; 0
 25e:	0d c0       	rjmp	.+26     	; 0x27a <LCDdefinechar+0x40>
		pcc=pgm_read_byte(&pc[i]);
 260:	f7 01       	movw	r30, r14
 262:	ec 0f       	add	r30, r28
 264:	fd 1f       	adc	r31, r29
 266:	14 91       	lpm	r17, Z
		LCDsendCommand(a++);
 268:	01 e0       	ldi	r16, 0x01	; 1
 26a:	08 0f       	add	r16, r24
 26c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendCommand>
		LCDsendChar(pcc);
 270:	81 2f       	mov	r24, r17
 272:	0e 94 b0 00 	call	0x160	; 0x160 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 276:	21 96       	adiw	r28, 0x01	; 1
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 278:	80 2f       	mov	r24, r16
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 27a:	c8 30       	cpi	r28, 0x08	; 8
 27c:	d1 05       	cpc	r29, r1
 27e:	80 f3       	brcs	.-32     	; 0x260 <LCDdefinechar+0x26>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	08 95       	ret

0000028e <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 292:	8f e2       	ldi	r24, 0x2F	; 47
 294:	95 e7       	ldi	r25, 0x75	; 117
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCDinit+0x8>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCDinit+0xe>
 29c:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 29e:	15 b8       	out	0x05, r1	; 5
	LCP=0x00;
 2a0:	15 b8       	out	0x05, r1	; 5
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 2a2:	84 b1       	in	r24, 0x04	; 4
 2a4:	80 6f       	ori	r24, 0xF0	; 240
 2a6:	84 b9       	out	0x04, r24	; 4
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 2a8:	84 b1       	in	r24, 0x04	; 4
 2aa:	87 60       	ori	r24, 0x07	; 7
 2ac:	84 b9       	out	0x04, r24	; 4
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2ae:	90 e3       	ldi	r25, 0x30	; 48
 2b0:	95 b9       	out	0x05, r25	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2b2:	85 b1       	in	r24, 0x05	; 5
 2b4:	84 60       	ori	r24, 0x04	; 4
 2b6:	85 b9       	out	0x05, r24	; 5
 2b8:	ef ec       	ldi	r30, 0xCF	; 207
 2ba:	f7 e0       	ldi	r31, 0x07	; 7
 2bc:	31 97       	sbiw	r30, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCDinit+0x2e>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCDinit+0x34>
 2c2:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2c4:	85 b1       	in	r24, 0x05	; 5
 2c6:	8b 7f       	andi	r24, 0xFB	; 251
 2c8:	85 b9       	out	0x05, r24	; 5
 2ca:	ef ec       	ldi	r30, 0xCF	; 207
 2cc:	f7 e0       	ldi	r31, 0x07	; 7
 2ce:	31 97       	sbiw	r30, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCDinit+0x40>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LCDinit+0x46>
 2d4:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2d6:	95 b9       	out	0x05, r25	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2d8:	85 b1       	in	r24, 0x05	; 5
 2da:	84 60       	ori	r24, 0x04	; 4
 2dc:	85 b9       	out	0x05, r24	; 5
 2de:	8f ec       	ldi	r24, 0xCF	; 207
 2e0:	97 e0       	ldi	r25, 0x07	; 7
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCDinit+0x54>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <LCDinit+0x5a>
 2e8:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2ea:	85 b1       	in	r24, 0x05	; 5
 2ec:	8b 7f       	andi	r24, 0xFB	; 251
 2ee:	85 b9       	out	0x05, r24	; 5
 2f0:	ef ec       	ldi	r30, 0xCF	; 207
 2f2:	f7 e0       	ldi	r31, 0x07	; 7
 2f4:	31 97       	sbiw	r30, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCDinit+0x66>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <LCDinit+0x6c>
 2fa:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 2fc:	80 e2       	ldi	r24, 0x20	; 32
 2fe:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 300:	85 b1       	in	r24, 0x05	; 5
 302:	84 60       	ori	r24, 0x04	; 4
 304:	85 b9       	out	0x05, r24	; 5
 306:	8f ec       	ldi	r24, 0xCF	; 207
 308:	97 e0       	ldi	r25, 0x07	; 7
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCDinit+0x7c>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <LCDinit+0x82>
 310:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 312:	85 b1       	in	r24, 0x05	; 5
 314:	8b 7f       	andi	r24, 0xFB	; 251
 316:	85 b9       	out	0x05, r24	; 5
 318:	ef ec       	ldi	r30, 0xCF	; 207
 31a:	f7 e0       	ldi	r31, 0x07	; 7
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCDinit+0x8e>
 320:	00 c0       	rjmp	.+0      	; 0x322 <LCDinit+0x94>
 322:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 324:	88 e2       	ldi	r24, 0x28	; 40
 326:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 32a:	8c e0       	ldi	r24, 0x0C	; 12
 32c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	c0 e0       	ldi	r28, 0x00	; 0
	while(ch<64)
 334:	0a c0       	rjmp	.+20     	; 0x34a <LCDinit+0xbc>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 336:	d1 e0       	ldi	r29, 0x01	; 1
 338:	d6 0f       	add	r29, r22
 33a:	8c 2f       	mov	r24, r28
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	88 59       	subi	r24, 0x98	; 152
 340:	9f 4f       	sbci	r25, 0xFF	; 255
 342:	0e 94 1d 01 	call	0x23a	; 0x23a <LCDdefinechar>
		ch=ch+8;
 346:	c8 5f       	subi	r28, 0xF8	; 248
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 348:	6d 2f       	mov	r22, r29
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 34a:	c0 34       	cpi	r28, 0x40	; 64
 34c:	a0 f3       	brcs	.-24     	; 0x336 <LCDinit+0xa8>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <main>:
#include "controlador_lcd.h"
#define F_CPU 8000000L
int main(void)
{
	
    LCDinit();
 354:	0e 94 47 01 	call	0x28e	; 0x28e <LCDinit>
	actualizarVarInferior("HOLA COMO ESTÁS?");
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	0e 94 73 00 	call	0xe6	; 0xe6 <actualizarVarInferior>
	actualizarVarSuperior("HOLA COMO ESTÁS?");
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	0e 94 78 00 	call	0xf0	; 0xf0 <actualizarVarSuperior>
    while (1) 
    {
		mostrar();
 368:	0e 94 ab 00 	call	0x156	; 0x156 <mostrar>
 36c:	fd cf       	rjmp	.-6      	; 0x368 <main+0x14>

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
