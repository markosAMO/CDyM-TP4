
Aplicacion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000248  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800102  00800102  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001439  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b2  00000000  00000000  000018b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009eb  00000000  00000000  00002263  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00002c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e0  00000000  00000000  00002f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f7e  00000000  00000000  0000351c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000449a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  9e:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <mostrarArriba>:
	for(i=0;i<size;i++){
		LCDsendChar(dato[i]);
	}
}
void mostrarArriba()
{ //recibe el string, la posición a ser mostrado y la longitud del string
  a6:	cf 93       	push	r28
	uint8_t i;
	LCDGotoXY(0,0);
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCDGotoXY>
	for(i=0;i<x;i++){
  b0:	c0 e0       	ldi	r28, 0x00	; 0
  b2:	0a c0       	rjmp	.+20     	; 0xc8 <mostrarArriba+0x22>
		LCDsendChar(datoSuperior[i]);
  b4:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <datoSuperior>
  b8:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <datoSuperior+0x1>
  bc:	ec 0f       	add	r30, r28
  be:	f1 1d       	adc	r31, r1
  c0:	80 81       	ld	r24, Z
  c2:	0e 94 86 00 	call	0x10c	; 0x10c <LCDsendChar>
}
void mostrarArriba()
{ //recibe el string, la posición a ser mostrado y la longitud del string
	uint8_t i;
	LCDGotoXY(0,0);
	for(i=0;i<x;i++){
  c6:	cf 5f       	subi	r28, 0xFF	; 255
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	c8 17       	cp	r28, r24
  ce:	90 f3       	brcs	.-28     	; 0xb4 <mostrarArriba+0xe>
		LCDsendChar(datoSuperior[i]);
	}
}
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <mostrarAbajo>:
void mostrarAbajo()
{ //recibe el string, la posición a ser mostrado y la longitud del string
  d4:	cf 93       	push	r28
	uint8_t i;
	LCDGotoXY(0,1);
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCDGotoXY>
	for(i=0;i<x;i++){
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	0a c0       	rjmp	.+20     	; 0xf6 <mostrarAbajo+0x22>
		LCDsendChar(datoInferior[i]);
  e2:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <datoInferior>
  e6:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <datoInferior+0x1>
  ea:	ec 0f       	add	r30, r28
  ec:	f1 1d       	adc	r31, r1
  ee:	80 81       	ld	r24, Z
  f0:	0e 94 86 00 	call	0x10c	; 0x10c <LCDsendChar>
}
void mostrarAbajo()
{ //recibe el string, la posición a ser mostrado y la longitud del string
	uint8_t i;
	LCDGotoXY(0,1);
	for(i=0;i<x;i++){
  f4:	cf 5f       	subi	r28, 0xFF	; 255
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	c8 17       	cp	r28, r24
  fc:	90 f3       	brcs	.-28     	; 0xe2 <mostrarAbajo+0xe>
		LCDsendChar(datoInferior[i]);
	}
}
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <mostrar>:
void mostrar() //método que llamaría en la interrupción
{
	mostrarArriba();
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <mostrarArriba>
	mostrarAbajo();
 106:	0e 94 6a 00 	call	0xd4	; 0xd4 <mostrarAbajo>
 10a:	08 95       	ret

0000010c <LCDsendChar>:
	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
	}
}
 10c:	98 2f       	mov	r25, r24
 10e:	90 7f       	andi	r25, 0xF0	; 240
 110:	95 b9       	out	0x05, r25	; 5
 112:	95 b1       	in	r25, 0x05	; 5
 114:	91 60       	ori	r25, 0x01	; 1
 116:	95 b9       	out	0x05, r25	; 5
 118:	95 b1       	in	r25, 0x05	; 5
 11a:	94 60       	ori	r25, 0x04	; 4
 11c:	95 b9       	out	0x05, r25	; 5
 11e:	2a e6       	ldi	r18, 0x6A	; 106
 120:	2a 95       	dec	r18
 122:	f1 f7       	brne	.-4      	; 0x120 <LCDsendChar+0x14>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCDsendChar+0x1a>
 126:	95 b1       	in	r25, 0x05	; 5
 128:	9b 7f       	andi	r25, 0xFB	; 251
 12a:	95 b9       	out	0x05, r25	; 5
 12c:	95 b1       	in	r25, 0x05	; 5
 12e:	9e 7f       	andi	r25, 0xFE	; 254
 130:	95 b9       	out	0x05, r25	; 5
 132:	9a e6       	ldi	r25, 0x6A	; 106
 134:	9a 95       	dec	r25
 136:	f1 f7       	brne	.-4      	; 0x134 <LCDsendChar+0x28>
 138:	00 c0       	rjmp	.+0      	; 0x13a <LCDsendChar+0x2e>
 13a:	20 e1       	ldi	r18, 0x10	; 16
 13c:	82 9f       	mul	r24, r18
 13e:	c0 01       	movw	r24, r0
 140:	11 24       	eor	r1, r1
 142:	85 b9       	out	0x05, r24	; 5
 144:	85 b1       	in	r24, 0x05	; 5
 146:	81 60       	ori	r24, 0x01	; 1
 148:	85 b9       	out	0x05, r24	; 5
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	85 b9       	out	0x05, r24	; 5
 150:	8a e6       	ldi	r24, 0x6A	; 106
 152:	8a 95       	dec	r24
 154:	f1 f7       	brne	.-4      	; 0x152 <LCDsendChar+0x46>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCDsendChar+0x4c>
 158:	85 b1       	in	r24, 0x05	; 5
 15a:	8b 7f       	andi	r24, 0xFB	; 251
 15c:	85 b9       	out	0x05, r24	; 5
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	8e 7f       	andi	r24, 0xFE	; 254
 162:	85 b9       	out	0x05, r24	; 5
 164:	9a e6       	ldi	r25, 0x6A	; 106
 166:	9a 95       	dec	r25
 168:	f1 f7       	brne	.-4      	; 0x166 <LCDsendChar+0x5a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCDsendChar+0x60>
 16c:	08 95       	ret

0000016e <LCDsendCommand>:
 16e:	98 2f       	mov	r25, r24
 170:	90 7f       	andi	r25, 0xF0	; 240
 172:	95 b9       	out	0x05, r25	; 5
 174:	95 b1       	in	r25, 0x05	; 5
 176:	94 60       	ori	r25, 0x04	; 4
 178:	95 b9       	out	0x05, r25	; 5
 17a:	ef ec       	ldi	r30, 0xCF	; 207
 17c:	f7 e0       	ldi	r31, 0x07	; 7
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCDsendCommand+0x10>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCDsendCommand+0x16>
 184:	00 00       	nop
 186:	95 b1       	in	r25, 0x05	; 5
 188:	9b 7f       	andi	r25, 0xFB	; 251
 18a:	95 b9       	out	0x05, r25	; 5
 18c:	ef ec       	ldi	r30, 0xCF	; 207
 18e:	f7 e0       	ldi	r31, 0x07	; 7
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCDsendCommand+0x22>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCDsendCommand+0x28>
 196:	00 00       	nop
 198:	f0 e1       	ldi	r31, 0x10	; 16
 19a:	8f 9f       	mul	r24, r31
 19c:	c0 01       	movw	r24, r0
 19e:	11 24       	eor	r1, r1
 1a0:	85 b9       	out	0x05, r24	; 5
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	84 60       	ori	r24, 0x04	; 4
 1a6:	85 b9       	out	0x05, r24	; 5
 1a8:	8f ec       	ldi	r24, 0xCF	; 207
 1aa:	97 e0       	ldi	r25, 0x07	; 7
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCDsendCommand+0x3e>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCDsendCommand+0x44>
 1b2:	00 00       	nop
 1b4:	85 b1       	in	r24, 0x05	; 5
 1b6:	8b 7f       	andi	r24, 0xFB	; 251
 1b8:	85 b9       	out	0x05, r24	; 5
 1ba:	ef ec       	ldi	r30, 0xCF	; 207
 1bc:	f7 e0       	ldi	r31, 0x07	; 7
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCDsendCommand+0x50>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCDsendCommand+0x56>
 1c4:	00 00       	nop
 1c6:	08 95       	ret

000001c8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 1c8:	62 30       	cpi	r22, 0x02	; 2
 1ca:	31 f0       	breq	.+12     	; 0x1d8 <LCDGotoXY+0x10>
 1cc:	63 30       	cpi	r22, 0x03	; 3
 1ce:	31 f0       	breq	.+12     	; 0x1dc <LCDGotoXY+0x14>
 1d0:	61 30       	cpi	r22, 0x01	; 1
 1d2:	29 f4       	brne	.+10     	; 0x1de <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 1d4:	80 5c       	subi	r24, 0xC0	; 192
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 1d8:	8c 5e       	subi	r24, 0xEC	; 236
 1da:	01 c0       	rjmp	.+2      	; 0x1de <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 1dc:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 1de:	80 68       	ori	r24, 0x80	; 128
 1e0:	0e 94 b7 00 	call	0x16e	; 0x16e <LCDsendCommand>
 1e4:	08 95       	ret

000001e6 <main>:
volatile uint8_t flag = 0;
volatile uint16_t contador = 0;
int main(void)
{
	
    OCR0A = 250;
 1e6:	8a ef       	ldi	r24, 0xFA	; 250
 1e8:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0x02; //se activa modo CTC
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x02;
 1ee:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A);
 1f0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei();
 1f4:	78 94       	sei
	while(1)
    {
		mostrar();
 1f6:	0e 94 81 00 	call	0x102	; 0x102 <mostrar>
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <main+0x10>

000001fc <__vector_14>:
	}
}
ISR(TIMER0_COMPA_vect){
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
	contador++;
 20a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 20e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 218:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if(contador == 50)
 21c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 220:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 224:	c2 97       	sbiw	r24, 0x32	; 50
 226:	39 f4       	brne	.+14     	; 0x236 <__vector_14+0x3a>
	{
		flag = 1;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <flag>
		contador = 0;
 22e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 232:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
}
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
