
Control_Temperatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003e8  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000248  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000352  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000025e  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016a  00000000  00000000  00001096  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  78:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_preInit>:
	ADCSRA |= (1<<ADIF); //borrar flag
}

int ADC_get_resultado_alto(void){
	return  ADCH;//give the low byte
}
  80:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  84:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  88:	08 95       	ret

0000008a <ADC_enabled>:
  8a:	ea e7       	ldi	r30, 0x7A	; 122
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	80 68       	ori	r24, 0x80	; 128
  92:	80 83       	st	Z, r24
  94:	08 95       	ret

00000096 <ADC_preescaler>:
  96:	80 31       	cpi	r24, 0x10	; 16
  98:	91 05       	cpc	r25, r1
  9a:	29 f1       	breq	.+74     	; 0xe6 <ADC_preescaler+0x50>
  9c:	4c f4       	brge	.+18     	; 0xb0 <ADC_preescaler+0x1a>
  9e:	84 30       	cpi	r24, 0x04	; 4
  a0:	91 05       	cpc	r25, r1
  a2:	a9 f0       	breq	.+42     	; 0xce <ADC_preescaler+0x38>
  a4:	88 30       	cpi	r24, 0x08	; 8
  a6:	91 05       	cpc	r25, r1
  a8:	c1 f0       	breq	.+48     	; 0xda <ADC_preescaler+0x44>
  aa:	02 97       	sbiw	r24, 0x02	; 2
  ac:	a1 f5       	brne	.+104    	; 0x116 <ADC_preescaler+0x80>
  ae:	09 c0       	rjmp	.+18     	; 0xc2 <ADC_preescaler+0x2c>
  b0:	80 34       	cpi	r24, 0x40	; 64
  b2:	91 05       	cpc	r25, r1
  b4:	21 f1       	breq	.+72     	; 0xfe <ADC_preescaler+0x68>
  b6:	80 38       	cpi	r24, 0x80	; 128
  b8:	91 05       	cpc	r25, r1
  ba:	39 f1       	breq	.+78     	; 0x10a <ADC_preescaler+0x74>
  bc:	80 97       	sbiw	r24, 0x20	; 32
  be:	59 f5       	brne	.+86     	; 0x116 <ADC_preescaler+0x80>
  c0:	18 c0       	rjmp	.+48     	; 0xf2 <ADC_preescaler+0x5c>
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	83 60       	ori	r24, 0x03	; 3
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret
  e6:	ea e7       	ldi	r30, 0x7A	; 122
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	85 60       	ori	r24, 0x05	; 5
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret
  fe:	ea e7       	ldi	r30, 0x7A	; 122
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	86 60       	ori	r24, 0x06	; 6
 106:	80 83       	st	Z, r24
 108:	08 95       	ret
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	87 60       	ori	r24, 0x07	; 7
 112:	80 83       	st	Z, r24
 114:	08 95       	ret
 116:	ea e7       	ldi	r30, 0x7A	; 122
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <ADC_select_pin>:
 120:	ec e7       	ldi	r30, 0x7C	; 124
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	89 2b       	or	r24, r25
 128:	80 83       	st	Z, r24
 12a:	08 95       	ret

0000012c <ADC_init>:
 12c:	0e 94 40 00 	call	0x80	; 0x80 <ADC_preInit>
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 136:	0e 94 45 00 	call	0x8a	; 0x8a <ADC_enabled>
 13a:	80 e8       	ldi	r24, 0x80	; 128
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 4b 00 	call	0x96	; 0x96 <ADC_preescaler>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 90 00 	call	0x120	; 0x120 <ADC_select_pin>
 14a:	08 95       	ret

0000014c <ADC_Start>:
 14c:	ea e7       	ldi	r30, 0x7A	; 122
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 64       	ori	r24, 0x40	; 64
 154:	80 83       	st	Z, r24
 156:	08 95       	ret

00000158 <ADC_conversion_completed>:
 158:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 15c:	82 95       	swap	r24
 15e:	8f 70       	andi	r24, 0x0F	; 15
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	89 27       	eor	r24, r25
 164:	81 70       	andi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	08 95       	ret

0000016a <ADC_flag_reset>:
 16a:	ea e7       	ldi	r30, 0x7A	; 122
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 61       	ori	r24, 0x10	; 16
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <ADC_get_resultado_bajo>:
int ADC_get_resultado_bajo(void){
	return  ADCL;//give the high byte
 176:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
}
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	08 95       	ret

0000017e <main>:
//#include <util/delay.h>
//#include "ADC.h"
#include "termometro.h"
int main (void)
{
	DDRB=0xff;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	84 b9       	out	0x04, r24	; 4
	TERMOMETRO_init();
 182:	0e 94 cc 00 	call	0x198	; 0x198 <TERMOMETRO_init>
	while(1)
	{
		if (TERMOMETRO_get_temperatura()==25){
			PORTB^=1;
 186:	c1 e0       	ldi	r28, 0x01	; 1
{
	DDRB=0xff;
	TERMOMETRO_init();
	while(1)
	{
		if (TERMOMETRO_get_temperatura()==25){
 188:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <TERMOMETRO_get_temperatura>
 18c:	49 97       	sbiw	r24, 0x19	; 25
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0xa>
			PORTB^=1;
 190:	85 b1       	in	r24, 0x05	; 5
 192:	8c 27       	eor	r24, r28
 194:	85 b9       	out	0x05, r24	; 5
 196:	f8 cf       	rjmp	.-16     	; 0x188 <main+0xa>

00000198 <TERMOMETRO_init>:
#include "ADC.h"
#include "termometro.h"


void TERMOMETRO_init(void){
	ADC_init(128,0);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 96 00 	call	0x12c	; 0x12c <ADC_init>
 1a4:	08 95       	ret

000001a6 <TERMOMETRO_get_temperatura>:
}

int TERMOMETRO_get_temperatura(void){
	ADC_Start();
 1a6:	0e 94 a6 00 	call	0x14c	; 0x14c <ADC_Start>
	while(ADC_conversion_completed()); //wait for conversion to finish
 1aa:	0e 94 ac 00 	call	0x158	; 0x158 <ADC_conversion_completed>
 1ae:	89 2b       	or	r24, r25
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <TERMOMETRO_get_temperatura+0x4>
	ADC_flag_reset();
 1b2:	0e 94 b5 00 	call	0x16a	; 0x16a <ADC_flag_reset>
	return ADC_get_resultado_bajo()/10;
 1b6:	0e 94 bb 00 	call	0x176	; 0x176 <ADC_get_resultado_bajo>
 1ba:	6a e0       	ldi	r22, 0x0A	; 10
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <__divmodhi4>
 1c2:	cb 01       	movw	r24, r22
}
 1c4:	08 95       	ret

000001c6 <__divmodhi4>:
 1c6:	97 fb       	bst	r25, 7
 1c8:	07 2e       	mov	r0, r23
 1ca:	16 f4       	brtc	.+4      	; 0x1d0 <__divmodhi4+0xa>
 1cc:	00 94       	com	r0
 1ce:	07 d0       	rcall	.+14     	; 0x1de <__divmodhi4_neg1>
 1d0:	77 fd       	sbrc	r23, 7
 1d2:	09 d0       	rcall	.+18     	; 0x1e6 <__divmodhi4_neg2>
 1d4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <__udivmodhi4>
 1d8:	07 fc       	sbrc	r0, 7
 1da:	05 d0       	rcall	.+10     	; 0x1e6 <__divmodhi4_neg2>
 1dc:	3e f4       	brtc	.+14     	; 0x1ec <__divmodhi4_exit>

000001de <__divmodhi4_neg1>:
 1de:	90 95       	com	r25
 1e0:	81 95       	neg	r24
 1e2:	9f 4f       	sbci	r25, 0xFF	; 255
 1e4:	08 95       	ret

000001e6 <__divmodhi4_neg2>:
 1e6:	70 95       	com	r23
 1e8:	61 95       	neg	r22
 1ea:	7f 4f       	sbci	r23, 0xFF	; 255

000001ec <__divmodhi4_exit>:
 1ec:	08 95       	ret

000001ee <__udivmodhi4>:
 1ee:	aa 1b       	sub	r26, r26
 1f0:	bb 1b       	sub	r27, r27
 1f2:	51 e1       	ldi	r21, 0x11	; 17
 1f4:	07 c0       	rjmp	.+14     	; 0x204 <__udivmodhi4_ep>

000001f6 <__udivmodhi4_loop>:
 1f6:	aa 1f       	adc	r26, r26
 1f8:	bb 1f       	adc	r27, r27
 1fa:	a6 17       	cp	r26, r22
 1fc:	b7 07       	cpc	r27, r23
 1fe:	10 f0       	brcs	.+4      	; 0x204 <__udivmodhi4_ep>
 200:	a6 1b       	sub	r26, r22
 202:	b7 0b       	sbc	r27, r23

00000204 <__udivmodhi4_ep>:
 204:	88 1f       	adc	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	5a 95       	dec	r21
 20a:	a9 f7       	brne	.-22     	; 0x1f6 <__udivmodhi4_loop>
 20c:	80 95       	com	r24
 20e:	90 95       	com	r25
 210:	bc 01       	movw	r22, r24
 212:	cd 01       	movw	r24, r26
 214:	08 95       	ret

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
