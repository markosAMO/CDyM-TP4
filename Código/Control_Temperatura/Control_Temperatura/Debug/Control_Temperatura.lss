
Control_Temperatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000ade  00000b52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ade  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000164c  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000801  00000000  00000000  000023dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ce6  00000000  00000000  00002bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004a4  00000000  00000000  000038c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000054d  00000000  00000000  00003d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000134b  00000000  00000000  000042b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000190  00000000  00000000  00005600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	ee ed       	ldi	r30, 0xDE	; 222
  bc:	fa e0       	ldi	r31, 0x0A	; 10
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a6 30       	cpi	r26, 0x06	; 6
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>
  ca:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <main>
  ce:	0c 94 6d 05 	jmp	0xada	; 0xada <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <ADC_preInit>:
void ADC_preInit(void){
	ADCSRA=0;
	ADMUX= 0x00;
}
void ADC_set_ADC0_input_analog(void){
	DIDR0= 0x01;
  d6:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  da:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  de:	08 95       	ret

000000e0 <ADC_enabled>:
}
void ADC_enabled(void){
	ADCSRA|=(1<<ADEN);
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret

000000ec <ADC_preescaler>:
	
}

void ADC_preescaler(int prescaler){
	switch (prescaler)
  ec:	80 31       	cpi	r24, 0x10	; 16
  ee:	91 05       	cpc	r25, r1
  f0:	29 f1       	breq	.+74     	; 0x13c <ADC_preescaler+0x50>
  f2:	4c f4       	brge	.+18     	; 0x106 <ADC_preescaler+0x1a>
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	91 05       	cpc	r25, r1
  f8:	a9 f0       	breq	.+42     	; 0x124 <ADC_preescaler+0x38>
  fa:	88 30       	cpi	r24, 0x08	; 8
  fc:	91 05       	cpc	r25, r1
  fe:	c1 f0       	breq	.+48     	; 0x130 <ADC_preescaler+0x44>
 100:	02 97       	sbiw	r24, 0x02	; 2
 102:	a1 f5       	brne	.+104    	; 0x16c <ADC_preescaler+0x80>
 104:	09 c0       	rjmp	.+18     	; 0x118 <ADC_preescaler+0x2c>
 106:	80 34       	cpi	r24, 0x40	; 64
 108:	91 05       	cpc	r25, r1
 10a:	21 f1       	breq	.+72     	; 0x154 <ADC_preescaler+0x68>
 10c:	80 38       	cpi	r24, 0x80	; 128
 10e:	91 05       	cpc	r25, r1
 110:	39 f1       	breq	.+78     	; 0x160 <ADC_preescaler+0x74>
 112:	80 97       	sbiw	r24, 0x20	; 32
 114:	59 f5       	brne	.+86     	; 0x16c <ADC_preescaler+0x80>
 116:	18 c0       	rjmp	.+48     	; 0x148 <ADC_preescaler+0x5c>
	{
		case 2:ADCSRA|=0b00000001;
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	80 83       	st	Z, r24
		break;
 122:	08 95       	ret
		case 4:ADCSRA|=0b00000010;
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
		break;
 12e:	08 95       	ret
		case 8:ADCSRA|=0b00000011;
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	83 60       	ori	r24, 0x03	; 3
 138:	80 83       	st	Z, r24
		break;
 13a:	08 95       	ret
		case 16:ADCSRA|=0b00000100;
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 83       	st	Z, r24
		break;
 146:	08 95       	ret
		case 32:ADCSRA|=0b00000101;
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	85 60       	ori	r24, 0x05	; 5
 150:	80 83       	st	Z, r24
		break;
 152:	08 95       	ret
		case 64:ADCSRA|=0b00000110;
 154:	ea e7       	ldi	r30, 0x7A	; 122
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	86 60       	ori	r24, 0x06	; 6
 15c:	80 83       	st	Z, r24
		break;
 15e:	08 95       	ret
		case 128:ADCSRA|=0b00000111;
 160:	ea e7       	ldi	r30, 0x7A	; 122
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	87 60       	ori	r24, 0x07	; 7
 168:	80 83       	st	Z, r24
		break;
 16a:	08 95       	ret
		default:ADCSRA|=0b00000000;
 16c:	ea e7       	ldi	r30, 0x7A	; 122
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <ADC_select_pin>:
		break;
	}
}

void ADC_select_pin(int pin){
	ADMUX|= pin;
 176:	ec e7       	ldi	r30, 0x7C	; 124
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	90 81       	ld	r25, Z
 17c:	89 2b       	or	r24, r25
 17e:	80 83       	st	Z, r24
 180:	08 95       	ret

00000182 <ADC_init>:
	
}
//fin de funciones para el init
void ADC_init(int prescaler, int pin){
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	8c 01       	movw	r16, r24
 18c:	eb 01       	movw	r28, r22
	ADC_preInit();
 18e:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_preInit>
void ADC_preInit(void){
	ADCSRA=0;
	ADMUX= 0x00;
}
void ADC_set_ADC0_input_analog(void){
	DIDR0= 0x01;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
}
//fin de funciones para el init
void ADC_init(int prescaler, int pin){
	ADC_preInit();
	ADC_set_ADC0_input_analog();
	ADC_enabled();
 198:	0e 94 70 00 	call	0xe0	; 0xe0 <ADC_enabled>
	ADC_preescaler(prescaler);
 19c:	c8 01       	movw	r24, r16
 19e:	0e 94 76 00 	call	0xec	; 0xec <ADC_preescaler>
	ADC_select_pin(pin);
 1a2:	ce 01       	movw	r24, r28
 1a4:	0e 94 bb 00 	call	0x176	; 0x176 <ADC_select_pin>
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <ADC_Start>:
//funciones para operar el ADC
void ADC_Start(void){
	  ADCSRA |= (1<<ADSC);//start conversion
 1b2:	ea e7       	ldi	r30, 0x7A	; 122
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <ADC_conversion_completed>:
}

int ADC_conversion_completed(void){	
	return (ADCSRA&(1<<ADIF))==0; //devuelve 1 si la conversion esta completada
 1be:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1c2:	82 95       	swap	r24
 1c4:	8f 70       	andi	r24, 0x0F	; 15
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	89 27       	eor	r24, r25
}
 1ca:	81 70       	andi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	08 95       	ret

000001d0 <ADC_flag_reset>:

void ADC_flag_reset(void){
	ADCSRA |= (1<<ADIF); //borrar flag
 1d0:	ea e7       	ldi	r30, 0x7A	; 122
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	80 83       	st	Z, r24
 1da:	08 95       	ret

000001dc <ADC_get_temperatura_entero>:
	/**
	int resultado=ADCL;
	int basura=ADCH;  // esta linea no sirve para nada pero si lo quito se rompe todo el programa, ya que se tiene que leer la parte alta si o si, sino no funciona
	return  resultado;//give the high byte
	**/
	int voltaje =ADC*5*100/1024;
 1dc:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1e0:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1e4:	24 ef       	ldi	r18, 0xF4	; 244
 1e6:	31 e0       	ldi	r19, 0x01	; 1
 1e8:	42 9f       	mul	r20, r18
 1ea:	c0 01       	movw	r24, r0
 1ec:	43 9f       	mul	r20, r19
 1ee:	90 0d       	add	r25, r0
 1f0:	52 9f       	mul	r21, r18
 1f2:	90 0d       	add	r25, r0
 1f4:	11 24       	eor	r1, r1
	/**
	voltaje=voltaje*5;
	voltaje=voltaje/1024;
	**/
	return voltaje;
}
 1f6:	89 2f       	mov	r24, r25
 1f8:	86 95       	lsr	r24
 1fa:	86 95       	lsr	r24
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	08 95       	ret

00000200 <ADC_get_voltaje_real>:
	/**
	float resultado=ADCL; //give the high byte
	float basura=ADCH;    // esta linea no sirve para nada pero si lo quito se rompe todo el programa, ya que se tiene que leer la parte alta si o si, sino no funciona
	return  resultado;
	**/
	float voltaje =ADC;
 200:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 204:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__floatunsisf>
	voltaje=voltaje*5;
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	40 ea       	ldi	r20, 0xA0	; 160
 216:	50 e4       	ldi	r21, 0x40	; 64
 218:	0e 94 36 04 	call	0x86c	; 0x86c <__mulsf3>
	voltaje=voltaje/1024;
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	40 e8       	ldi	r20, 0x80	; 128
 222:	5a e3       	ldi	r21, 0x3A	; 58
 224:	0e 94 36 04 	call	0x86c	; 0x86c <__mulsf3>
	return voltaje;
	
	
}
 228:	08 95       	ret

0000022a <mostrarString>:
#include <avr/io.h>
#include "lcd.h"
uint8_t x = 16;

void mostrarString(const char *dato, uint8_t x, uint8_t y, uint8_t size )
{ //recibe el string, la posición a ser mostrado y la longitud del string
 22a:	ef 92       	push	r14
 22c:	ff 92       	push	r15
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	7c 01       	movw	r14, r24
 238:	86 2f       	mov	r24, r22
 23a:	12 2f       	mov	r17, r18
	uint8_t i;
	LCDGotoXY(x,y);
 23c:	64 2f       	mov	r22, r20
 23e:	0e 94 82 01 	call	0x304	; 0x304 <LCDGotoXY>
	for(i=0;i<size;i++){ //no se porque -2 pero así si
 242:	11 23       	and	r17, r17
 244:	71 f0       	breq	.+28     	; 0x262 <mostrarString+0x38>
 246:	e7 01       	movw	r28, r14
 248:	11 50       	subi	r17, 0x01	; 1
 24a:	01 2f       	mov	r16, r17
 24c:	10 e0       	ldi	r17, 0x00	; 0
 24e:	0f 5f       	subi	r16, 0xFF	; 255
 250:	1f 4f       	sbci	r17, 0xFF	; 255
 252:	0e 0d       	add	r16, r14
 254:	1f 1d       	adc	r17, r15
		LCDsendChar(dato[i]);
 256:	89 91       	ld	r24, Y+
 258:	0e 94 38 01 	call	0x270	; 0x270 <LCDsendChar>

void mostrarString(const char *dato, uint8_t x, uint8_t y, uint8_t size )
{ //recibe el string, la posición a ser mostrado y la longitud del string
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;i<size;i++){ //no se porque -2 pero así si
 25c:	c0 17       	cp	r28, r16
 25e:	d1 07       	cpc	r29, r17
 260:	d1 f7       	brne	.-12     	; 0x256 <mostrarString+0x2c>
		LCDsendChar(dato[i]);
	}
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	08 95       	ret

00000270 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;i<(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 270:	98 2f       	mov	r25, r24
 272:	90 7f       	andi	r25, 0xF0	; 240
 274:	95 b9       	out	0x05, r25	; 5
 276:	28 9a       	sbi	0x05, 0	; 5
 278:	2a 9a       	sbi	0x05, 2	; 5
 27a:	2a e6       	ldi	r18, 0x6A	; 106
 27c:	2a 95       	dec	r18
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCDsendChar+0xc>
 280:	00 c0       	rjmp	.+0      	; 0x282 <LCDsendChar+0x12>
 282:	2a 98       	cbi	0x05, 2	; 5
 284:	28 98       	cbi	0x05, 0	; 5
 286:	9a e6       	ldi	r25, 0x6A	; 106
 288:	9a 95       	dec	r25
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCDsendChar+0x18>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <LCDsendChar+0x1e>
 28e:	20 e1       	ldi	r18, 0x10	; 16
 290:	82 9f       	mul	r24, r18
 292:	c0 01       	movw	r24, r0
 294:	11 24       	eor	r1, r1
 296:	85 b9       	out	0x05, r24	; 5
 298:	28 9a       	sbi	0x05, 0	; 5
 29a:	2a 9a       	sbi	0x05, 2	; 5
 29c:	8a e6       	ldi	r24, 0x6A	; 106
 29e:	8a 95       	dec	r24
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCDsendChar+0x2e>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCDsendChar+0x34>
 2a4:	2a 98       	cbi	0x05, 2	; 5
 2a6:	28 98       	cbi	0x05, 0	; 5
 2a8:	9a e6       	ldi	r25, 0x6A	; 106
 2aa:	9a 95       	dec	r25
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCDsendChar+0x3a>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCDsendChar+0x40>
 2b0:	08 95       	ret

000002b2 <LCDsendCommand>:
 2b2:	98 2f       	mov	r25, r24
 2b4:	90 7f       	andi	r25, 0xF0	; 240
 2b6:	95 b9       	out	0x05, r25	; 5
 2b8:	2a 9a       	sbi	0x05, 2	; 5
 2ba:	ef ec       	ldi	r30, 0xCF	; 207
 2bc:	f7 e0       	ldi	r31, 0x07	; 7
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCDsendCommand+0xc>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCDsendCommand+0x12>
 2c4:	00 00       	nop
 2c6:	2a 98       	cbi	0x05, 2	; 5
 2c8:	ef ec       	ldi	r30, 0xCF	; 207
 2ca:	f7 e0       	ldi	r31, 0x07	; 7
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCDsendCommand+0x1a>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCDsendCommand+0x20>
 2d2:	00 00       	nop
 2d4:	f0 e1       	ldi	r31, 0x10	; 16
 2d6:	8f 9f       	mul	r24, r31
 2d8:	c0 01       	movw	r24, r0
 2da:	11 24       	eor	r1, r1
 2dc:	85 b9       	out	0x05, r24	; 5
 2de:	2a 9a       	sbi	0x05, 2	; 5
 2e0:	8f ec       	ldi	r24, 0xCF	; 207
 2e2:	97 e0       	ldi	r25, 0x07	; 7
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <LCDsendCommand+0x32>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <LCDsendCommand+0x38>
 2ea:	00 00       	nop
 2ec:	2a 98       	cbi	0x05, 2	; 5
 2ee:	ef ec       	ldi	r30, 0xCF	; 207
 2f0:	f7 e0       	ldi	r31, 0x07	; 7
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCDsendCommand+0x40>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <LCDsendCommand+0x46>
 2f8:	00 00       	nop
 2fa:	08 95       	ret

000002fc <LCDclr>:
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCDsendCommand>
 302:	08 95       	ret

00000304 <LCDGotoXY>:
 304:	62 30       	cpi	r22, 0x02	; 2
 306:	31 f0       	breq	.+12     	; 0x314 <LCDGotoXY+0x10>
 308:	63 30       	cpi	r22, 0x03	; 3
 30a:	31 f0       	breq	.+12     	; 0x318 <LCDGotoXY+0x14>
 30c:	61 30       	cpi	r22, 0x01	; 1
 30e:	29 f4       	brne	.+10     	; 0x31a <LCDGotoXY+0x16>
 310:	80 5c       	subi	r24, 0xC0	; 192
 312:	03 c0       	rjmp	.+6      	; 0x31a <LCDGotoXY+0x16>
 314:	8c 5e       	subi	r24, 0xEC	; 236
 316:	01 c0       	rjmp	.+2      	; 0x31a <LCDGotoXY+0x16>
 318:	8c 5a       	subi	r24, 0xAC	; 172
 31a:	80 68       	ori	r24, 0x80	; 128
 31c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCDsendCommand>
 320:	08 95       	ret

00000322 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 322:	ff 92       	push	r15
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 32c:	66 0f       	add	r22, r22
 32e:	66 0f       	add	r22, r22
 330:	66 0f       	add	r22, r22
 332:	60 64       	ori	r22, 0x40	; 64
 334:	ec 01       	movw	r28, r24
 336:	68 94       	set
 338:	ff 24       	eor	r15, r15
 33a:	f3 f8       	bld	r15, 3
 33c:	f6 0e       	add	r15, r22
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 33e:	fe 01       	movw	r30, r28
 340:	04 91       	lpm	r16, Z
		LCDsendCommand(a++);
 342:	11 e0       	ldi	r17, 0x01	; 1
 344:	16 0f       	add	r17, r22
 346:	86 2f       	mov	r24, r22
 348:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCDsendCommand>
		LCDsendChar(pcc);
 34c:	80 2f       	mov	r24, r16
 34e:	0e 94 38 01 	call	0x270	; 0x270 <LCDsendChar>
 352:	21 96       	adiw	r28, 0x01	; 1
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 354:	61 2f       	mov	r22, r17
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 356:	1f 11       	cpse	r17, r15
 358:	f2 cf       	rjmp	.-28     	; 0x33e <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	08 95       	ret

00000366 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36c:	8f e2       	ldi	r24, 0x2F	; 47
 36e:	95 e7       	ldi	r25, 0x75	; 117
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCDinit+0xa>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCDinit+0x10>
 376:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 378:	15 b8       	out	0x05, r1	; 5
	LCP=0x00;
 37a:	15 b8       	out	0x05, r1	; 5
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 37c:	84 b1       	in	r24, 0x04	; 4
 37e:	80 6f       	ori	r24, 0xF0	; 240
 380:	84 b9       	out	0x04, r24	; 4
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 382:	84 b1       	in	r24, 0x04	; 4
 384:	87 60       	ori	r24, 0x07	; 7
 386:	84 b9       	out	0x04, r24	; 4
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 388:	80 e3       	ldi	r24, 0x30	; 48
 38a:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 38c:	2a 9a       	sbi	0x05, 2	; 5
 38e:	ef ec       	ldi	r30, 0xCF	; 207
 390:	f7 e0       	ldi	r31, 0x07	; 7
 392:	31 97       	sbiw	r30, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <LCDinit+0x2c>
 396:	00 c0       	rjmp	.+0      	; 0x398 <LCDinit+0x32>
 398:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 39a:	2a 98       	cbi	0x05, 2	; 5
 39c:	ef ec       	ldi	r30, 0xCF	; 207
 39e:	f7 e0       	ldi	r31, 0x07	; 7
 3a0:	31 97       	sbiw	r30, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <LCDinit+0x3a>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <LCDinit+0x40>
 3a6:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 3a8:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 3aa:	2a 9a       	sbi	0x05, 2	; 5
 3ac:	8f ec       	ldi	r24, 0xCF	; 207
 3ae:	97 e0       	ldi	r25, 0x07	; 7
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LCDinit+0x4a>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <LCDinit+0x50>
 3b6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 3b8:	2a 98       	cbi	0x05, 2	; 5
 3ba:	ef ec       	ldi	r30, 0xCF	; 207
 3bc:	f7 e0       	ldi	r31, 0x07	; 7
 3be:	31 97       	sbiw	r30, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <LCDinit+0x58>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <LCDinit+0x5e>
 3c4:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 3c6:	80 e2       	ldi	r24, 0x20	; 32
 3c8:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 3ca:	2a 9a       	sbi	0x05, 2	; 5
 3cc:	8f ec       	ldi	r24, 0xCF	; 207
 3ce:	97 e0       	ldi	r25, 0x07	; 7
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <LCDinit+0x6a>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCDinit+0x70>
 3d6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 3d8:	2a 98       	cbi	0x05, 2	; 5
 3da:	ef ec       	ldi	r30, 0xCF	; 207
 3dc:	f7 e0       	ldi	r31, 0x07	; 7
 3de:	31 97       	sbiw	r30, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <LCDinit+0x78>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <LCDinit+0x7e>
 3e4:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 3e6:	88 e2       	ldi	r24, 0x28	; 40
 3e8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 3ec:	8c e0       	ldi	r24, 0x0C	; 12
 3ee:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCDsendCommand>
 3f2:	c8 e6       	ldi	r28, 0x68	; 104
 3f4:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 3f6:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 3f8:	11 e0       	ldi	r17, 0x01	; 1
 3fa:	16 0f       	add	r17, r22
 3fc:	ce 01       	movw	r24, r28
 3fe:	0e 94 91 01 	call	0x322	; 0x322 <LCDdefinechar>
 402:	28 96       	adiw	r28, 0x08	; 8
 404:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 406:	18 30       	cpi	r17, 0x08	; 8
 408:	b9 f7       	brne	.-18     	; 0x3f8 <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	08 95       	ret

00000412 <intTostring>:
#include <math.h>
#include <stdlib.h>
#include <string.h>


void intTostring(int temperatura, char* string){
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	8c 01       	movw	r16, r24
 41c:	eb 01       	movw	r28, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 41e:	4a e0       	ldi	r20, 0x0A	; 10
 420:	0e 94 38 05 	call	0xa70	; 0xa70 <__itoa_ncheck>
	itoa(temperatura,string,10);
	if (temperatura<10){
 424:	0a 30       	cpi	r16, 0x0A	; 10
 426:	11 05       	cpc	r17, r1
 428:	24 f4       	brge	.+8      	; 0x432 <intTostring+0x20>
		string[1]=string[0];
 42a:	88 81       	ld	r24, Y
 42c:	89 83       	std	Y+1, r24	; 0x01
		string[0]='0';
 42e:	80 e3       	ldi	r24, 0x30	; 48
 430:	88 83       	st	Y, r24
	}
}
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	1f 91       	pop	r17
 438:	0f 91       	pop	r16
 43a:	08 95       	ret

0000043c <floatToString>:



void floatToString(float temperatura, char* stringFinal){
 43c:	cf 92       	push	r12
 43e:	df 92       	push	r13
 440:	ef 92       	push	r14
 442:	ff 92       	push	r15
 444:	0f 93       	push	r16
 446:	1f 93       	push	r17
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	00 d0       	rcall	.+0      	; 0x44e <floatToString+0x12>
 44e:	00 d0       	rcall	.+0      	; 0x450 <floatToString+0x14>
 450:	00 d0       	rcall	.+0      	; 0x452 <floatToString+0x16>
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
 456:	8a 01       	movw	r16, r20
	char string[2]="00";
 458:	20 e3       	ldi	r18, 0x30	; 48
 45a:	30 e3       	ldi	r19, 0x30	; 48
 45c:	3a 83       	std	Y+2, r19	; 0x02
 45e:	29 83       	std	Y+1, r18	; 0x01
	//descompongo el numero
	double ParteEntera;
	double parteFraccional = modf(temperatura, &ParteEntera);
 460:	ae 01       	movw	r20, r28
 462:	4d 5f       	subi	r20, 0xFD	; 253
 464:	5f 4f       	sbci	r21, 0xFF	; 255
 466:	0e 94 02 04 	call	0x804	; 0x804 <modf>
 46a:	6b 01       	movw	r12, r22
 46c:	7c 01       	movw	r14, r24
	
	//parte entera
	intTostring(ParteEntera,string);
 46e:	6b 81       	ldd	r22, Y+3	; 0x03
 470:	7c 81       	ldd	r23, Y+4	; 0x04
 472:	8d 81       	ldd	r24, Y+5	; 0x05
 474:	9e 81       	ldd	r25, Y+6	; 0x06
 476:	0e 94 3d 03 	call	0x67a	; 0x67a <__fixsfsi>
 47a:	dc 01       	movw	r26, r24
 47c:	cb 01       	movw	r24, r22
 47e:	be 01       	movw	r22, r28
 480:	6f 5f       	subi	r22, 0xFF	; 255
 482:	7f 4f       	sbci	r23, 0xFF	; 255
 484:	0e 94 09 02 	call	0x412	; 0x412 <intTostring>
	stringFinal[0]=string[0];
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	f8 01       	movw	r30, r16
 48c:	80 83       	st	Z, r24
	stringFinal[1]=string[1];
 48e:	8a 81       	ldd	r24, Y+2	; 0x02
 490:	81 83       	std	Z+1, r24	; 0x01

	//parte fraccional
	if (parteFraccional*100<10){
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	48 ec       	ldi	r20, 0xC8	; 200
 498:	52 e4       	ldi	r21, 0x42	; 66
 49a:	c7 01       	movw	r24, r14
 49c:	b6 01       	movw	r22, r12
 49e:	0e 94 36 04 	call	0x86c	; 0x86c <__mulsf3>
 4a2:	6b 01       	movw	r12, r22
 4a4:	7c 01       	movw	r14, r24
 4a6:	20 e0       	ldi	r18, 0x00	; 0
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	40 e2       	ldi	r20, 0x20	; 32
 4ac:	51 e4       	ldi	r21, 0x41	; 65
 4ae:	0e 94 38 03 	call	0x670	; 0x670 <__cmpsf2>
 4b2:	88 23       	and	r24, r24
 4b4:	9c f4       	brge	.+38     	; 0x4dc <floatToString+0xa0>
		// primera parte fraccional
		stringFinal[3]='0';
 4b6:	80 e3       	ldi	r24, 0x30	; 48
 4b8:	f8 01       	movw	r30, r16
 4ba:	83 83       	std	Z+3, r24	; 0x03
		// segunda parte fraccional
		itoa(parteFraccional*100, string, 10);
 4bc:	c7 01       	movw	r24, r14
 4be:	b6 01       	movw	r22, r12
 4c0:	0e 94 3d 03 	call	0x67a	; 0x67a <__fixsfsi>
 4c4:	dc 01       	movw	r26, r24
 4c6:	cb 01       	movw	r24, r22
 4c8:	4a e0       	ldi	r20, 0x0A	; 10
 4ca:	be 01       	movw	r22, r28
 4cc:	6f 5f       	subi	r22, 0xFF	; 255
 4ce:	7f 4f       	sbci	r23, 0xFF	; 255
 4d0:	0e 94 38 05 	call	0xa70	; 0xa70 <__itoa_ncheck>
		stringFinal[4]=string[0];
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	f8 01       	movw	r30, r16
 4d8:	84 83       	std	Z+4, r24	; 0x04
 4da:	11 c0       	rjmp	.+34     	; 0x4fe <floatToString+0xc2>
		}else{
		// parte fraccional
		itoa(parteFraccional*100, string, 10);
 4dc:	c7 01       	movw	r24, r14
 4de:	b6 01       	movw	r22, r12
 4e0:	0e 94 3d 03 	call	0x67a	; 0x67a <__fixsfsi>
 4e4:	dc 01       	movw	r26, r24
 4e6:	cb 01       	movw	r24, r22
 4e8:	4a e0       	ldi	r20, 0x0A	; 10
 4ea:	be 01       	movw	r22, r28
 4ec:	6f 5f       	subi	r22, 0xFF	; 255
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	0e 94 38 05 	call	0xa70	; 0xa70 <__itoa_ncheck>
			stringFinal[3]=string[0];
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	f8 01       	movw	r30, r16
 4f8:	83 83       	std	Z+3, r24	; 0x03
			stringFinal[4]=string[1];
 4fa:	8a 81       	ldd	r24, Y+2	; 0x02
 4fc:	84 83       	std	Z+4, r24	; 0x04
	}
}
 4fe:	26 96       	adiw	r28, 0x06	; 6
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	ff 90       	pop	r15
 514:	ef 90       	pop	r14
 516:	df 90       	pop	r13
 518:	cf 90       	pop	r12
 51a:	08 95       	ret

0000051c <imprimir_entero>:
void imprimir_entero( uint8_t temperatura ){
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	00 d0       	rcall	.+0      	; 0x522 <imprimir_entero+0x6>
 522:	1f 92       	push	r1
 524:	cd b7       	in	r28, 0x3d	; 61
 526:	de b7       	in	r29, 0x3e	; 62
	char string[3]="00";
 528:	20 e3       	ldi	r18, 0x30	; 48
 52a:	30 e3       	ldi	r19, 0x30	; 48
 52c:	40 e0       	ldi	r20, 0x00	; 0
 52e:	29 83       	std	Y+1, r18	; 0x01
 530:	3a 83       	std	Y+2, r19	; 0x02
 532:	4b 83       	std	Y+3, r20	; 0x03
	intTostring(temperatura,string);
 534:	be 01       	movw	r22, r28
 536:	6f 5f       	subi	r22, 0xFF	; 255
 538:	7f 4f       	sbci	r23, 0xFF	; 255
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 09 02 	call	0x412	; 0x412 <intTostring>
	mostrarString(string,0,0,2);
 540:	22 e0       	ldi	r18, 0x02	; 2
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	ce 01       	movw	r24, r28
 548:	01 96       	adiw	r24, 0x01	; 1
 54a:	0e 94 15 01 	call	0x22a	; 0x22a <mostrarString>
	
}
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <imprimir_float>:
void imprimir_float( float temperatura ){
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	00 d0       	rcall	.+0      	; 0x560 <imprimir_float+0x6>
 560:	00 d0       	rcall	.+0      	; 0x562 <imprimir_float+0x8>
 562:	1f 92       	push	r1
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
	char string[5]="00.00";
 568:	25 e0       	ldi	r18, 0x05	; 5
 56a:	e0 e0       	ldi	r30, 0x00	; 0
 56c:	f1 e0       	ldi	r31, 0x01	; 1
 56e:	de 01       	movw	r26, r28
 570:	11 96       	adiw	r26, 0x01	; 1
 572:	01 90       	ld	r0, Z+
 574:	0d 92       	st	X+, r0
 576:	2a 95       	dec	r18
 578:	e1 f7       	brne	.-8      	; 0x572 <imprimir_float+0x18>
	floatToString(temperatura,string);
 57a:	ae 01       	movw	r20, r28
 57c:	4f 5f       	subi	r20, 0xFF	; 255
 57e:	5f 4f       	sbci	r21, 0xFF	; 255
 580:	0e 94 1e 02 	call	0x43c	; 0x43c <floatToString>
	mostrarString(string,0,1,5);
 584:	25 e0       	ldi	r18, 0x05	; 5
 586:	41 e0       	ldi	r20, 0x01	; 1
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	ce 01       	movw	r24, r28
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	0e 94 15 01 	call	0x22a	; 0x22a <mostrarString>
}
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	0f 90       	pop	r0
 59a:	0f 90       	pop	r0
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <main>:
int main (void)
{
	LCDinit();
 5a2:	0e 94 b3 01 	call	0x366	; 0x366 <LCDinit>
	TERMOMETRO_init();
 5a6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <TERMOMETRO_init>
	while(1)
	{
		imprimir_float( TERMOMETRO_get_temperatura_real() );
 5aa:	0e 94 fe 02 	call	0x5fc	; 0x5fc <TERMOMETRO_get_temperatura_real>
 5ae:	0e 94 ad 02 	call	0x55a	; 0x55a <imprimir_float>
		imprimir_entero( TERMOMETRO_get_temperatura_entero() );
 5b2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <TERMOMETRO_get_temperatura_entero>
 5b6:	0e 94 8e 02 	call	0x51c	; 0x51c <imprimir_entero>
 5ba:	2f ef       	ldi	r18, 0xFF	; 255
 5bc:	80 e7       	ldi	r24, 0x70	; 112
 5be:	92 e0       	ldi	r25, 0x02	; 2
 5c0:	21 50       	subi	r18, 0x01	; 1
 5c2:	80 40       	sbci	r24, 0x00	; 0
 5c4:	90 40       	sbci	r25, 0x00	; 0
 5c6:	e1 f7       	brne	.-8      	; 0x5c0 <main+0x1e>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <main+0x28>
 5ca:	00 00       	nop
		_delay_ms(100);
		LCDclr();			
 5cc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCDclr>
	}
 5d0:	ec cf       	rjmp	.-40     	; 0x5aa <main+0x8>

000005d2 <TERMOMETRO_init>:
#include "termometro.h"
#include <avr/io.h>


void TERMOMETRO_init(void){
	ADC_init(64,0);
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	80 e4       	ldi	r24, 0x40	; 64
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 c1 00 	call	0x182	; 0x182 <ADC_init>
 5de:	08 95       	ret

000005e0 <TERMOMETRO_get_temperatura_entero>:
}

uint8_t TERMOMETRO_get_temperatura_entero(void){
	
	ADC_Start();
 5e0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ADC_Start>
	while(ADC_conversion_completed()); //wait for conversion to finish
 5e4:	0e 94 df 00 	call	0x1be	; 0x1be <ADC_conversion_completed>
 5e8:	89 2b       	or	r24, r25
 5ea:	e1 f7       	brne	.-8      	; 0x5e4 <TERMOMETRO_get_temperatura_entero+0x4>
	ADC_flag_reset();	
 5ec:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <ADC_flag_reset>
	uint8_t temperatura=ADC_get_temperatura_entero();
 5f0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <ADC_get_temperatura_entero>
 5f4:	83 33       	cpi	r24, 0x33	; 51
 5f6:	08 f0       	brcs	.+2      	; 0x5fa <TERMOMETRO_get_temperatura_entero+0x1a>
 5f8:	82 e3       	ldi	r24, 0x32	; 50
	if (temperatura>50){temperatura=50;}
	if (temperatura<0){temperatura=0;}	
	return temperatura;
}
 5fa:	08 95       	ret

000005fc <TERMOMETRO_get_temperatura_real>:


float TERMOMETRO_get_temperatura_real(void){
 5fc:	cf 92       	push	r12
 5fe:	df 92       	push	r13
 600:	ef 92       	push	r14
 602:	ff 92       	push	r15
	ADC_Start();
 604:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ADC_Start>
	while(ADC_conversion_completed()); //wait for conversion to finish
 608:	0e 94 df 00 	call	0x1be	; 0x1be <ADC_conversion_completed>
 60c:	89 2b       	or	r24, r25
 60e:	e1 f7       	brne	.-8      	; 0x608 <TERMOMETRO_get_temperatura_real+0xc>
	ADC_flag_reset();
 610:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <ADC_flag_reset>
	
	float temperatura=ADC_get_voltaje_real()*100;
 614:	0e 94 00 01 	call	0x200	; 0x200 <ADC_get_voltaje_real>
 618:	20 e0       	ldi	r18, 0x00	; 0
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	48 ec       	ldi	r20, 0xC8	; 200
 61e:	52 e4       	ldi	r21, 0x42	; 66
 620:	0e 94 36 04 	call	0x86c	; 0x86c <__mulsf3>
 624:	6b 01       	movw	r12, r22
 626:	7c 01       	movw	r14, r24
	
	if (temperatura>50){temperatura=50;}
 628:	20 e0       	ldi	r18, 0x00	; 0
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	48 e4       	ldi	r20, 0x48	; 72
 62e:	52 e4       	ldi	r21, 0x42	; 66
 630:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__gesf2>
 634:	18 16       	cp	r1, r24
 636:	6c f0       	brlt	.+26     	; 0x652 <TERMOMETRO_get_temperatura_real+0x56>
	if (temperatura<0){temperatura=0;}
 638:	20 e0       	ldi	r18, 0x00	; 0
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	a9 01       	movw	r20, r18
 63e:	c7 01       	movw	r24, r14
 640:	b6 01       	movw	r22, r12
 642:	0e 94 38 03 	call	0x670	; 0x670 <__cmpsf2>
 646:	88 23       	and	r24, r24
 648:	64 f4       	brge	.+24     	; 0x662 <TERMOMETRO_get_temperatura_real+0x66>
 64a:	c1 2c       	mov	r12, r1
 64c:	d1 2c       	mov	r13, r1
 64e:	76 01       	movw	r14, r12
 650:	08 c0       	rjmp	.+16     	; 0x662 <TERMOMETRO_get_temperatura_real+0x66>
	while(ADC_conversion_completed()); //wait for conversion to finish
	ADC_flag_reset();
	
	float temperatura=ADC_get_voltaje_real()*100;
	
	if (temperatura>50){temperatura=50;}
 652:	0f 2e       	mov	r0, r31
 654:	c1 2c       	mov	r12, r1
 656:	d1 2c       	mov	r13, r1
 658:	f8 e4       	ldi	r31, 0x48	; 72
 65a:	ef 2e       	mov	r14, r31
 65c:	f2 e4       	ldi	r31, 0x42	; 66
 65e:	ff 2e       	mov	r15, r31
 660:	f0 2d       	mov	r31, r0
	if (temperatura<0){temperatura=0;}
	
	return temperatura;  //el 100 viene de 1/(10*10^-3)
 662:	c7 01       	movw	r24, r14
 664:	b6 01       	movw	r22, r12
 666:	ff 90       	pop	r15
 668:	ef 90       	pop	r14
 66a:	df 90       	pop	r13
 66c:	cf 90       	pop	r12
 66e:	08 95       	ret

00000670 <__cmpsf2>:
 670:	0e 94 b0 03 	call	0x760	; 0x760 <__fp_cmp>
 674:	08 f4       	brcc	.+2      	; 0x678 <__cmpsf2+0x8>
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	08 95       	ret

0000067a <__fixsfsi>:
 67a:	0e 94 44 03 	call	0x688	; 0x688 <__fixunssfsi>
 67e:	68 94       	set
 680:	b1 11       	cpse	r27, r1
 682:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_szero>
 686:	08 95       	ret

00000688 <__fixunssfsi>:
 688:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__fp_splitA>
 68c:	88 f0       	brcs	.+34     	; 0x6b0 <__fixunssfsi+0x28>
 68e:	9f 57       	subi	r25, 0x7F	; 127
 690:	98 f0       	brcs	.+38     	; 0x6b8 <__fixunssfsi+0x30>
 692:	b9 2f       	mov	r27, r25
 694:	99 27       	eor	r25, r25
 696:	b7 51       	subi	r27, 0x17	; 23
 698:	b0 f0       	brcs	.+44     	; 0x6c6 <__fixunssfsi+0x3e>
 69a:	e1 f0       	breq	.+56     	; 0x6d4 <__fixunssfsi+0x4c>
 69c:	66 0f       	add	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	88 1f       	adc	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	1a f0       	brmi	.+6      	; 0x6ac <__fixunssfsi+0x24>
 6a6:	ba 95       	dec	r27
 6a8:	c9 f7       	brne	.-14     	; 0x69c <__fixunssfsi+0x14>
 6aa:	14 c0       	rjmp	.+40     	; 0x6d4 <__fixunssfsi+0x4c>
 6ac:	b1 30       	cpi	r27, 0x01	; 1
 6ae:	91 f0       	breq	.+36     	; 0x6d4 <__fixunssfsi+0x4c>
 6b0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__fp_zero>
 6b4:	b1 e0       	ldi	r27, 0x01	; 1
 6b6:	08 95       	ret
 6b8:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__fp_zero>
 6bc:	67 2f       	mov	r22, r23
 6be:	78 2f       	mov	r23, r24
 6c0:	88 27       	eor	r24, r24
 6c2:	b8 5f       	subi	r27, 0xF8	; 248
 6c4:	39 f0       	breq	.+14     	; 0x6d4 <__fixunssfsi+0x4c>
 6c6:	b9 3f       	cpi	r27, 0xF9	; 249
 6c8:	cc f3       	brlt	.-14     	; 0x6bc <__fixunssfsi+0x34>
 6ca:	86 95       	lsr	r24
 6cc:	77 95       	ror	r23
 6ce:	67 95       	ror	r22
 6d0:	b3 95       	inc	r27
 6d2:	d9 f7       	brne	.-10     	; 0x6ca <__fixunssfsi+0x42>
 6d4:	3e f4       	brtc	.+14     	; 0x6e4 <__fixunssfsi+0x5c>
 6d6:	90 95       	com	r25
 6d8:	80 95       	com	r24
 6da:	70 95       	com	r23
 6dc:	61 95       	neg	r22
 6de:	7f 4f       	sbci	r23, 0xFF	; 255
 6e0:	8f 4f       	sbci	r24, 0xFF	; 255
 6e2:	9f 4f       	sbci	r25, 0xFF	; 255
 6e4:	08 95       	ret

000006e6 <__floatunsisf>:
 6e6:	e8 94       	clt
 6e8:	09 c0       	rjmp	.+18     	; 0x6fc <__floatsisf+0x12>

000006ea <__floatsisf>:
 6ea:	97 fb       	bst	r25, 7
 6ec:	3e f4       	brtc	.+14     	; 0x6fc <__floatsisf+0x12>
 6ee:	90 95       	com	r25
 6f0:	80 95       	com	r24
 6f2:	70 95       	com	r23
 6f4:	61 95       	neg	r22
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255
 6f8:	8f 4f       	sbci	r24, 0xFF	; 255
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	99 23       	and	r25, r25
 6fe:	a9 f0       	breq	.+42     	; 0x72a <__floatsisf+0x40>
 700:	f9 2f       	mov	r31, r25
 702:	96 e9       	ldi	r25, 0x96	; 150
 704:	bb 27       	eor	r27, r27
 706:	93 95       	inc	r25
 708:	f6 95       	lsr	r31
 70a:	87 95       	ror	r24
 70c:	77 95       	ror	r23
 70e:	67 95       	ror	r22
 710:	b7 95       	ror	r27
 712:	f1 11       	cpse	r31, r1
 714:	f8 cf       	rjmp	.-16     	; 0x706 <__floatsisf+0x1c>
 716:	fa f4       	brpl	.+62     	; 0x756 <__floatsisf+0x6c>
 718:	bb 0f       	add	r27, r27
 71a:	11 f4       	brne	.+4      	; 0x720 <__floatsisf+0x36>
 71c:	60 ff       	sbrs	r22, 0
 71e:	1b c0       	rjmp	.+54     	; 0x756 <__floatsisf+0x6c>
 720:	6f 5f       	subi	r22, 0xFF	; 255
 722:	7f 4f       	sbci	r23, 0xFF	; 255
 724:	8f 4f       	sbci	r24, 0xFF	; 255
 726:	9f 4f       	sbci	r25, 0xFF	; 255
 728:	16 c0       	rjmp	.+44     	; 0x756 <__floatsisf+0x6c>
 72a:	88 23       	and	r24, r24
 72c:	11 f0       	breq	.+4      	; 0x732 <__floatsisf+0x48>
 72e:	96 e9       	ldi	r25, 0x96	; 150
 730:	11 c0       	rjmp	.+34     	; 0x754 <__floatsisf+0x6a>
 732:	77 23       	and	r23, r23
 734:	21 f0       	breq	.+8      	; 0x73e <__floatsisf+0x54>
 736:	9e e8       	ldi	r25, 0x8E	; 142
 738:	87 2f       	mov	r24, r23
 73a:	76 2f       	mov	r23, r22
 73c:	05 c0       	rjmp	.+10     	; 0x748 <__floatsisf+0x5e>
 73e:	66 23       	and	r22, r22
 740:	71 f0       	breq	.+28     	; 0x75e <__floatsisf+0x74>
 742:	96 e8       	ldi	r25, 0x86	; 134
 744:	86 2f       	mov	r24, r22
 746:	70 e0       	ldi	r23, 0x00	; 0
 748:	60 e0       	ldi	r22, 0x00	; 0
 74a:	2a f0       	brmi	.+10     	; 0x756 <__floatsisf+0x6c>
 74c:	9a 95       	dec	r25
 74e:	66 0f       	add	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	88 1f       	adc	r24, r24
 754:	da f7       	brpl	.-10     	; 0x74c <__floatsisf+0x62>
 756:	88 0f       	add	r24, r24
 758:	96 95       	lsr	r25
 75a:	87 95       	ror	r24
 75c:	97 f9       	bld	r25, 7
 75e:	08 95       	ret

00000760 <__fp_cmp>:
 760:	99 0f       	add	r25, r25
 762:	00 08       	sbc	r0, r0
 764:	55 0f       	add	r21, r21
 766:	aa 0b       	sbc	r26, r26
 768:	e0 e8       	ldi	r30, 0x80	; 128
 76a:	fe ef       	ldi	r31, 0xFE	; 254
 76c:	16 16       	cp	r1, r22
 76e:	17 06       	cpc	r1, r23
 770:	e8 07       	cpc	r30, r24
 772:	f9 07       	cpc	r31, r25
 774:	c0 f0       	brcs	.+48     	; 0x7a6 <__fp_cmp+0x46>
 776:	12 16       	cp	r1, r18
 778:	13 06       	cpc	r1, r19
 77a:	e4 07       	cpc	r30, r20
 77c:	f5 07       	cpc	r31, r21
 77e:	98 f0       	brcs	.+38     	; 0x7a6 <__fp_cmp+0x46>
 780:	62 1b       	sub	r22, r18
 782:	73 0b       	sbc	r23, r19
 784:	84 0b       	sbc	r24, r20
 786:	95 0b       	sbc	r25, r21
 788:	39 f4       	brne	.+14     	; 0x798 <__fp_cmp+0x38>
 78a:	0a 26       	eor	r0, r26
 78c:	61 f0       	breq	.+24     	; 0x7a6 <__fp_cmp+0x46>
 78e:	23 2b       	or	r18, r19
 790:	24 2b       	or	r18, r20
 792:	25 2b       	or	r18, r21
 794:	21 f4       	brne	.+8      	; 0x79e <__fp_cmp+0x3e>
 796:	08 95       	ret
 798:	0a 26       	eor	r0, r26
 79a:	09 f4       	brne	.+2      	; 0x79e <__fp_cmp+0x3e>
 79c:	a1 40       	sbci	r26, 0x01	; 1
 79e:	a6 95       	lsr	r26
 7a0:	8f ef       	ldi	r24, 0xFF	; 255
 7a2:	81 1d       	adc	r24, r1
 7a4:	81 1d       	adc	r24, r1
 7a6:	08 95       	ret

000007a8 <__fp_split3>:
 7a8:	57 fd       	sbrc	r21, 7
 7aa:	90 58       	subi	r25, 0x80	; 128
 7ac:	44 0f       	add	r20, r20
 7ae:	55 1f       	adc	r21, r21
 7b0:	59 f0       	breq	.+22     	; 0x7c8 <__fp_splitA+0x10>
 7b2:	5f 3f       	cpi	r21, 0xFF	; 255
 7b4:	71 f0       	breq	.+28     	; 0x7d2 <__fp_splitA+0x1a>
 7b6:	47 95       	ror	r20

000007b8 <__fp_splitA>:
 7b8:	88 0f       	add	r24, r24
 7ba:	97 fb       	bst	r25, 7
 7bc:	99 1f       	adc	r25, r25
 7be:	61 f0       	breq	.+24     	; 0x7d8 <__fp_splitA+0x20>
 7c0:	9f 3f       	cpi	r25, 0xFF	; 255
 7c2:	79 f0       	breq	.+30     	; 0x7e2 <__fp_splitA+0x2a>
 7c4:	87 95       	ror	r24
 7c6:	08 95       	ret
 7c8:	12 16       	cp	r1, r18
 7ca:	13 06       	cpc	r1, r19
 7cc:	14 06       	cpc	r1, r20
 7ce:	55 1f       	adc	r21, r21
 7d0:	f2 cf       	rjmp	.-28     	; 0x7b6 <__fp_split3+0xe>
 7d2:	46 95       	lsr	r20
 7d4:	f1 df       	rcall	.-30     	; 0x7b8 <__fp_splitA>
 7d6:	08 c0       	rjmp	.+16     	; 0x7e8 <__fp_splitA+0x30>
 7d8:	16 16       	cp	r1, r22
 7da:	17 06       	cpc	r1, r23
 7dc:	18 06       	cpc	r1, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	f1 cf       	rjmp	.-30     	; 0x7c4 <__fp_splitA+0xc>
 7e2:	86 95       	lsr	r24
 7e4:	71 05       	cpc	r23, r1
 7e6:	61 05       	cpc	r22, r1
 7e8:	08 94       	sec
 7ea:	08 95       	ret

000007ec <__fp_zero>:
 7ec:	e8 94       	clt

000007ee <__fp_szero>:
 7ee:	bb 27       	eor	r27, r27
 7f0:	66 27       	eor	r22, r22
 7f2:	77 27       	eor	r23, r23
 7f4:	cb 01       	movw	r24, r22
 7f6:	97 f9       	bld	r25, 7
 7f8:	08 95       	ret

000007fa <__gesf2>:
 7fa:	0e 94 b0 03 	call	0x760	; 0x760 <__fp_cmp>
 7fe:	08 f4       	brcc	.+2      	; 0x802 <__gesf2+0x8>
 800:	8f ef       	ldi	r24, 0xFF	; 255
 802:	08 95       	ret

00000804 <modf>:
 804:	fa 01       	movw	r30, r20
 806:	dc 01       	movw	r26, r24
 808:	aa 0f       	add	r26, r26
 80a:	bb 1f       	adc	r27, r27
 80c:	9b 01       	movw	r18, r22
 80e:	ac 01       	movw	r20, r24
 810:	bf 57       	subi	r27, 0x7F	; 127
 812:	28 f4       	brcc	.+10     	; 0x81e <modf+0x1a>
 814:	22 27       	eor	r18, r18
 816:	33 27       	eor	r19, r19
 818:	44 27       	eor	r20, r20
 81a:	50 78       	andi	r21, 0x80	; 128
 81c:	20 c0       	rjmp	.+64     	; 0x85e <modf+0x5a>
 81e:	b7 51       	subi	r27, 0x17	; 23
 820:	90 f4       	brcc	.+36     	; 0x846 <modf+0x42>
 822:	ab 2f       	mov	r26, r27
 824:	00 24       	eor	r0, r0
 826:	46 95       	lsr	r20
 828:	37 95       	ror	r19
 82a:	27 95       	ror	r18
 82c:	01 1c       	adc	r0, r1
 82e:	a3 95       	inc	r26
 830:	d2 f3       	brmi	.-12     	; 0x826 <modf+0x22>
 832:	00 20       	and	r0, r0
 834:	71 f0       	breq	.+28     	; 0x852 <modf+0x4e>
 836:	22 0f       	add	r18, r18
 838:	33 1f       	adc	r19, r19
 83a:	44 1f       	adc	r20, r20
 83c:	b3 95       	inc	r27
 83e:	da f3       	brmi	.-10     	; 0x836 <modf+0x32>
 840:	0e d0       	rcall	.+28     	; 0x85e <modf+0x5a>
 842:	0c 94 a3 04 	jmp	0x946	; 0x946 <__subsf3>
 846:	61 30       	cpi	r22, 0x01	; 1
 848:	71 05       	cpc	r23, r1
 84a:	a0 e8       	ldi	r26, 0x80	; 128
 84c:	8a 07       	cpc	r24, r26
 84e:	b9 46       	sbci	r27, 0x69	; 105
 850:	30 f4       	brcc	.+12     	; 0x85e <modf+0x5a>
 852:	9b 01       	movw	r18, r22
 854:	ac 01       	movw	r20, r24
 856:	66 27       	eor	r22, r22
 858:	77 27       	eor	r23, r23
 85a:	88 27       	eor	r24, r24
 85c:	90 78       	andi	r25, 0x80	; 128
 85e:	30 96       	adiw	r30, 0x00	; 0
 860:	21 f0       	breq	.+8      	; 0x86a <modf+0x66>
 862:	20 83       	st	Z, r18
 864:	31 83       	std	Z+1, r19	; 0x01
 866:	42 83       	std	Z+2, r20	; 0x02
 868:	53 83       	std	Z+3, r21	; 0x03
 86a:	08 95       	ret

0000086c <__mulsf3>:
 86c:	0e 94 49 04 	call	0x892	; 0x892 <__mulsf3x>
 870:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__fp_round>
 874:	0e 94 19 05 	call	0xa32	; 0xa32 <__fp_pscA>
 878:	38 f0       	brcs	.+14     	; 0x888 <__mulsf3+0x1c>
 87a:	0e 94 20 05 	call	0xa40	; 0xa40 <__fp_pscB>
 87e:	20 f0       	brcs	.+8      	; 0x888 <__mulsf3+0x1c>
 880:	95 23       	and	r25, r21
 882:	11 f0       	breq	.+4      	; 0x888 <__mulsf3+0x1c>
 884:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__fp_inf>
 888:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__fp_nan>
 88c:	11 24       	eor	r1, r1
 88e:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_szero>

00000892 <__mulsf3x>:
 892:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fp_split3>
 896:	70 f3       	brcs	.-36     	; 0x874 <__mulsf3+0x8>

00000898 <__mulsf3_pse>:
 898:	95 9f       	mul	r25, r21
 89a:	c1 f3       	breq	.-16     	; 0x88c <__mulsf3+0x20>
 89c:	95 0f       	add	r25, r21
 89e:	50 e0       	ldi	r21, 0x00	; 0
 8a0:	55 1f       	adc	r21, r21
 8a2:	62 9f       	mul	r22, r18
 8a4:	f0 01       	movw	r30, r0
 8a6:	72 9f       	mul	r23, r18
 8a8:	bb 27       	eor	r27, r27
 8aa:	f0 0d       	add	r31, r0
 8ac:	b1 1d       	adc	r27, r1
 8ae:	63 9f       	mul	r22, r19
 8b0:	aa 27       	eor	r26, r26
 8b2:	f0 0d       	add	r31, r0
 8b4:	b1 1d       	adc	r27, r1
 8b6:	aa 1f       	adc	r26, r26
 8b8:	64 9f       	mul	r22, r20
 8ba:	66 27       	eor	r22, r22
 8bc:	b0 0d       	add	r27, r0
 8be:	a1 1d       	adc	r26, r1
 8c0:	66 1f       	adc	r22, r22
 8c2:	82 9f       	mul	r24, r18
 8c4:	22 27       	eor	r18, r18
 8c6:	b0 0d       	add	r27, r0
 8c8:	a1 1d       	adc	r26, r1
 8ca:	62 1f       	adc	r22, r18
 8cc:	73 9f       	mul	r23, r19
 8ce:	b0 0d       	add	r27, r0
 8d0:	a1 1d       	adc	r26, r1
 8d2:	62 1f       	adc	r22, r18
 8d4:	83 9f       	mul	r24, r19
 8d6:	a0 0d       	add	r26, r0
 8d8:	61 1d       	adc	r22, r1
 8da:	22 1f       	adc	r18, r18
 8dc:	74 9f       	mul	r23, r20
 8de:	33 27       	eor	r19, r19
 8e0:	a0 0d       	add	r26, r0
 8e2:	61 1d       	adc	r22, r1
 8e4:	23 1f       	adc	r18, r19
 8e6:	84 9f       	mul	r24, r20
 8e8:	60 0d       	add	r22, r0
 8ea:	21 1d       	adc	r18, r1
 8ec:	82 2f       	mov	r24, r18
 8ee:	76 2f       	mov	r23, r22
 8f0:	6a 2f       	mov	r22, r26
 8f2:	11 24       	eor	r1, r1
 8f4:	9f 57       	subi	r25, 0x7F	; 127
 8f6:	50 40       	sbci	r21, 0x00	; 0
 8f8:	9a f0       	brmi	.+38     	; 0x920 <__stack+0x21>
 8fa:	f1 f0       	breq	.+60     	; 0x938 <__stack+0x39>
 8fc:	88 23       	and	r24, r24
 8fe:	4a f0       	brmi	.+18     	; 0x912 <__stack+0x13>
 900:	ee 0f       	add	r30, r30
 902:	ff 1f       	adc	r31, r31
 904:	bb 1f       	adc	r27, r27
 906:	66 1f       	adc	r22, r22
 908:	77 1f       	adc	r23, r23
 90a:	88 1f       	adc	r24, r24
 90c:	91 50       	subi	r25, 0x01	; 1
 90e:	50 40       	sbci	r21, 0x00	; 0
 910:	a9 f7       	brne	.-22     	; 0x8fc <__mulsf3_pse+0x64>
 912:	9e 3f       	cpi	r25, 0xFE	; 254
 914:	51 05       	cpc	r21, r1
 916:	80 f0       	brcs	.+32     	; 0x938 <__stack+0x39>
 918:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__fp_inf>
 91c:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_szero>
 920:	5f 3f       	cpi	r21, 0xFF	; 255
 922:	e4 f3       	brlt	.-8      	; 0x91c <__stack+0x1d>
 924:	98 3e       	cpi	r25, 0xE8	; 232
 926:	d4 f3       	brlt	.-12     	; 0x91c <__stack+0x1d>
 928:	86 95       	lsr	r24
 92a:	77 95       	ror	r23
 92c:	67 95       	ror	r22
 92e:	b7 95       	ror	r27
 930:	f7 95       	ror	r31
 932:	e7 95       	ror	r30
 934:	9f 5f       	subi	r25, 0xFF	; 255
 936:	c1 f7       	brne	.-16     	; 0x928 <__stack+0x29>
 938:	fe 2b       	or	r31, r30
 93a:	88 0f       	add	r24, r24
 93c:	91 1d       	adc	r25, r1
 93e:	96 95       	lsr	r25
 940:	87 95       	ror	r24
 942:	97 f9       	bld	r25, 7
 944:	08 95       	ret

00000946 <__subsf3>:
 946:	50 58       	subi	r21, 0x80	; 128

00000948 <__addsf3>:
 948:	bb 27       	eor	r27, r27
 94a:	aa 27       	eor	r26, r26
 94c:	0e 94 bb 04 	call	0x976	; 0x976 <__addsf3x>
 950:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__fp_round>
 954:	0e 94 19 05 	call	0xa32	; 0xa32 <__fp_pscA>
 958:	38 f0       	brcs	.+14     	; 0x968 <__addsf3+0x20>
 95a:	0e 94 20 05 	call	0xa40	; 0xa40 <__fp_pscB>
 95e:	20 f0       	brcs	.+8      	; 0x968 <__addsf3+0x20>
 960:	39 f4       	brne	.+14     	; 0x970 <__addsf3+0x28>
 962:	9f 3f       	cpi	r25, 0xFF	; 255
 964:	19 f4       	brne	.+6      	; 0x96c <__addsf3+0x24>
 966:	26 f4       	brtc	.+8      	; 0x970 <__addsf3+0x28>
 968:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__fp_nan>
 96c:	0e f4       	brtc	.+2      	; 0x970 <__addsf3+0x28>
 96e:	e0 95       	com	r30
 970:	e7 fb       	bst	r30, 7
 972:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__fp_inf>

00000976 <__addsf3x>:
 976:	e9 2f       	mov	r30, r25
 978:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fp_split3>
 97c:	58 f3       	brcs	.-42     	; 0x954 <__addsf3+0xc>
 97e:	ba 17       	cp	r27, r26
 980:	62 07       	cpc	r22, r18
 982:	73 07       	cpc	r23, r19
 984:	84 07       	cpc	r24, r20
 986:	95 07       	cpc	r25, r21
 988:	20 f0       	brcs	.+8      	; 0x992 <__addsf3x+0x1c>
 98a:	79 f4       	brne	.+30     	; 0x9aa <__addsf3x+0x34>
 98c:	a6 f5       	brtc	.+104    	; 0x9f6 <__addsf3x+0x80>
 98e:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__fp_zero>
 992:	0e f4       	brtc	.+2      	; 0x996 <__addsf3x+0x20>
 994:	e0 95       	com	r30
 996:	0b 2e       	mov	r0, r27
 998:	ba 2f       	mov	r27, r26
 99a:	a0 2d       	mov	r26, r0
 99c:	0b 01       	movw	r0, r22
 99e:	b9 01       	movw	r22, r18
 9a0:	90 01       	movw	r18, r0
 9a2:	0c 01       	movw	r0, r24
 9a4:	ca 01       	movw	r24, r20
 9a6:	a0 01       	movw	r20, r0
 9a8:	11 24       	eor	r1, r1
 9aa:	ff 27       	eor	r31, r31
 9ac:	59 1b       	sub	r21, r25
 9ae:	99 f0       	breq	.+38     	; 0x9d6 <__addsf3x+0x60>
 9b0:	59 3f       	cpi	r21, 0xF9	; 249
 9b2:	50 f4       	brcc	.+20     	; 0x9c8 <__addsf3x+0x52>
 9b4:	50 3e       	cpi	r21, 0xE0	; 224
 9b6:	68 f1       	brcs	.+90     	; 0xa12 <__addsf3x+0x9c>
 9b8:	1a 16       	cp	r1, r26
 9ba:	f0 40       	sbci	r31, 0x00	; 0
 9bc:	a2 2f       	mov	r26, r18
 9be:	23 2f       	mov	r18, r19
 9c0:	34 2f       	mov	r19, r20
 9c2:	44 27       	eor	r20, r20
 9c4:	58 5f       	subi	r21, 0xF8	; 248
 9c6:	f3 cf       	rjmp	.-26     	; 0x9ae <__addsf3x+0x38>
 9c8:	46 95       	lsr	r20
 9ca:	37 95       	ror	r19
 9cc:	27 95       	ror	r18
 9ce:	a7 95       	ror	r26
 9d0:	f0 40       	sbci	r31, 0x00	; 0
 9d2:	53 95       	inc	r21
 9d4:	c9 f7       	brne	.-14     	; 0x9c8 <__addsf3x+0x52>
 9d6:	7e f4       	brtc	.+30     	; 0x9f6 <__addsf3x+0x80>
 9d8:	1f 16       	cp	r1, r31
 9da:	ba 0b       	sbc	r27, r26
 9dc:	62 0b       	sbc	r22, r18
 9de:	73 0b       	sbc	r23, r19
 9e0:	84 0b       	sbc	r24, r20
 9e2:	ba f0       	brmi	.+46     	; 0xa12 <__addsf3x+0x9c>
 9e4:	91 50       	subi	r25, 0x01	; 1
 9e6:	a1 f0       	breq	.+40     	; 0xa10 <__addsf3x+0x9a>
 9e8:	ff 0f       	add	r31, r31
 9ea:	bb 1f       	adc	r27, r27
 9ec:	66 1f       	adc	r22, r22
 9ee:	77 1f       	adc	r23, r23
 9f0:	88 1f       	adc	r24, r24
 9f2:	c2 f7       	brpl	.-16     	; 0x9e4 <__addsf3x+0x6e>
 9f4:	0e c0       	rjmp	.+28     	; 0xa12 <__addsf3x+0x9c>
 9f6:	ba 0f       	add	r27, r26
 9f8:	62 1f       	adc	r22, r18
 9fa:	73 1f       	adc	r23, r19
 9fc:	84 1f       	adc	r24, r20
 9fe:	48 f4       	brcc	.+18     	; 0xa12 <__addsf3x+0x9c>
 a00:	87 95       	ror	r24
 a02:	77 95       	ror	r23
 a04:	67 95       	ror	r22
 a06:	b7 95       	ror	r27
 a08:	f7 95       	ror	r31
 a0a:	9e 3f       	cpi	r25, 0xFE	; 254
 a0c:	08 f0       	brcs	.+2      	; 0xa10 <__addsf3x+0x9a>
 a0e:	b0 cf       	rjmp	.-160    	; 0x970 <__addsf3+0x28>
 a10:	93 95       	inc	r25
 a12:	88 0f       	add	r24, r24
 a14:	08 f0       	brcs	.+2      	; 0xa18 <__addsf3x+0xa2>
 a16:	99 27       	eor	r25, r25
 a18:	ee 0f       	add	r30, r30
 a1a:	97 95       	ror	r25
 a1c:	87 95       	ror	r24
 a1e:	08 95       	ret

00000a20 <__fp_inf>:
 a20:	97 f9       	bld	r25, 7
 a22:	9f 67       	ori	r25, 0x7F	; 127
 a24:	80 e8       	ldi	r24, 0x80	; 128
 a26:	70 e0       	ldi	r23, 0x00	; 0
 a28:	60 e0       	ldi	r22, 0x00	; 0
 a2a:	08 95       	ret

00000a2c <__fp_nan>:
 a2c:	9f ef       	ldi	r25, 0xFF	; 255
 a2e:	80 ec       	ldi	r24, 0xC0	; 192
 a30:	08 95       	ret

00000a32 <__fp_pscA>:
 a32:	00 24       	eor	r0, r0
 a34:	0a 94       	dec	r0
 a36:	16 16       	cp	r1, r22
 a38:	17 06       	cpc	r1, r23
 a3a:	18 06       	cpc	r1, r24
 a3c:	09 06       	cpc	r0, r25
 a3e:	08 95       	ret

00000a40 <__fp_pscB>:
 a40:	00 24       	eor	r0, r0
 a42:	0a 94       	dec	r0
 a44:	12 16       	cp	r1, r18
 a46:	13 06       	cpc	r1, r19
 a48:	14 06       	cpc	r1, r20
 a4a:	05 06       	cpc	r0, r21
 a4c:	08 95       	ret

00000a4e <__fp_round>:
 a4e:	09 2e       	mov	r0, r25
 a50:	03 94       	inc	r0
 a52:	00 0c       	add	r0, r0
 a54:	11 f4       	brne	.+4      	; 0xa5a <__fp_round+0xc>
 a56:	88 23       	and	r24, r24
 a58:	52 f0       	brmi	.+20     	; 0xa6e <__fp_round+0x20>
 a5a:	bb 0f       	add	r27, r27
 a5c:	40 f4       	brcc	.+16     	; 0xa6e <__fp_round+0x20>
 a5e:	bf 2b       	or	r27, r31
 a60:	11 f4       	brne	.+4      	; 0xa66 <__fp_round+0x18>
 a62:	60 ff       	sbrs	r22, 0
 a64:	04 c0       	rjmp	.+8      	; 0xa6e <__fp_round+0x20>
 a66:	6f 5f       	subi	r22, 0xFF	; 255
 a68:	7f 4f       	sbci	r23, 0xFF	; 255
 a6a:	8f 4f       	sbci	r24, 0xFF	; 255
 a6c:	9f 4f       	sbci	r25, 0xFF	; 255
 a6e:	08 95       	ret

00000a70 <__itoa_ncheck>:
 a70:	bb 27       	eor	r27, r27
 a72:	4a 30       	cpi	r20, 0x0A	; 10
 a74:	31 f4       	brne	.+12     	; 0xa82 <__itoa_ncheck+0x12>
 a76:	99 23       	and	r25, r25
 a78:	22 f4       	brpl	.+8      	; 0xa82 <__itoa_ncheck+0x12>
 a7a:	bd e2       	ldi	r27, 0x2D	; 45
 a7c:	90 95       	com	r25
 a7e:	81 95       	neg	r24
 a80:	9f 4f       	sbci	r25, 0xFF	; 255
 a82:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__utoa_common>

00000a86 <__utoa_ncheck>:
 a86:	bb 27       	eor	r27, r27

00000a88 <__utoa_common>:
 a88:	fb 01       	movw	r30, r22
 a8a:	55 27       	eor	r21, r21
 a8c:	aa 27       	eor	r26, r26
 a8e:	88 0f       	add	r24, r24
 a90:	99 1f       	adc	r25, r25
 a92:	aa 1f       	adc	r26, r26
 a94:	a4 17       	cp	r26, r20
 a96:	10 f0       	brcs	.+4      	; 0xa9c <__utoa_common+0x14>
 a98:	a4 1b       	sub	r26, r20
 a9a:	83 95       	inc	r24
 a9c:	50 51       	subi	r21, 0x10	; 16
 a9e:	b9 f7       	brne	.-18     	; 0xa8e <__utoa_common+0x6>
 aa0:	a0 5d       	subi	r26, 0xD0	; 208
 aa2:	aa 33       	cpi	r26, 0x3A	; 58
 aa4:	08 f0       	brcs	.+2      	; 0xaa8 <__utoa_common+0x20>
 aa6:	a9 5d       	subi	r26, 0xD9	; 217
 aa8:	a1 93       	st	Z+, r26
 aaa:	00 97       	sbiw	r24, 0x00	; 0
 aac:	79 f7       	brne	.-34     	; 0xa8c <__utoa_common+0x4>
 aae:	b1 11       	cpse	r27, r1
 ab0:	b1 93       	st	Z+, r27
 ab2:	11 92       	st	Z+, r1
 ab4:	cb 01       	movw	r24, r22
 ab6:	0c 94 5d 05 	jmp	0xaba	; 0xaba <strrev>

00000aba <strrev>:
 aba:	dc 01       	movw	r26, r24
 abc:	fc 01       	movw	r30, r24
 abe:	67 2f       	mov	r22, r23
 ac0:	71 91       	ld	r23, Z+
 ac2:	77 23       	and	r23, r23
 ac4:	e1 f7       	brne	.-8      	; 0xabe <strrev+0x4>
 ac6:	32 97       	sbiw	r30, 0x02	; 2
 ac8:	04 c0       	rjmp	.+8      	; 0xad2 <strrev+0x18>
 aca:	7c 91       	ld	r23, X
 acc:	6d 93       	st	X+, r22
 ace:	70 83       	st	Z, r23
 ad0:	62 91       	ld	r22, -Z
 ad2:	ae 17       	cp	r26, r30
 ad4:	bf 07       	cpc	r27, r31
 ad6:	c8 f3       	brcs	.-14     	; 0xaca <strrev+0x10>
 ad8:	08 95       	ret

00000ada <_exit>:
 ada:	f8 94       	cli

00000adc <__stop_program>:
 adc:	ff cf       	rjmp	.-2      	; 0xadc <__stop_program>
