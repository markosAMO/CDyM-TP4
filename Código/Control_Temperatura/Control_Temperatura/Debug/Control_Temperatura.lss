
Control_Temperatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001a8  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001348  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076b  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bc7  00000000  00000000  0000220f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000404  00000000  00000000  00002dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004da  00000000  00000000  000031dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f99  00000000  00000000  000036b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000170  00000000  00000000  0000464f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e0 ef       	ldi	r30, 0xF0	; 240
  bc:	f4 e0       	ldi	r31, 0x04	; 4
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a0 30       	cpi	r26, 0x00	; 0
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>
  ca:	0e 94 16 02 	call	0x42c	; 0x42c <main>
  ce:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <ADC_preInit>:
	ADCSRA |= (1<<ADIF); //borrar flag
}

int ADC_get_resultado_alto(void){
	return  ADCH;//give the low byte
}
  d6:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  da:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  de:	08 95       	ret

000000e0 <ADC_enabled>:
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret

000000ec <ADC_preescaler>:
  ec:	80 31       	cpi	r24, 0x10	; 16
  ee:	91 05       	cpc	r25, r1
  f0:	29 f1       	breq	.+74     	; 0x13c <ADC_preescaler+0x50>
  f2:	4c f4       	brge	.+18     	; 0x106 <ADC_preescaler+0x1a>
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	91 05       	cpc	r25, r1
  f8:	a9 f0       	breq	.+42     	; 0x124 <ADC_preescaler+0x38>
  fa:	88 30       	cpi	r24, 0x08	; 8
  fc:	91 05       	cpc	r25, r1
  fe:	c1 f0       	breq	.+48     	; 0x130 <ADC_preescaler+0x44>
 100:	02 97       	sbiw	r24, 0x02	; 2
 102:	a1 f5       	brne	.+104    	; 0x16c <ADC_preescaler+0x80>
 104:	09 c0       	rjmp	.+18     	; 0x118 <ADC_preescaler+0x2c>
 106:	80 34       	cpi	r24, 0x40	; 64
 108:	91 05       	cpc	r25, r1
 10a:	21 f1       	breq	.+72     	; 0x154 <ADC_preescaler+0x68>
 10c:	80 38       	cpi	r24, 0x80	; 128
 10e:	91 05       	cpc	r25, r1
 110:	39 f1       	breq	.+78     	; 0x160 <ADC_preescaler+0x74>
 112:	80 97       	sbiw	r24, 0x20	; 32
 114:	59 f5       	brne	.+86     	; 0x16c <ADC_preescaler+0x80>
 116:	18 c0       	rjmp	.+48     	; 0x148 <ADC_preescaler+0x5c>
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	80 83       	st	Z, r24
 122:	08 95       	ret
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	83 60       	ori	r24, 0x03	; 3
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 83       	st	Z, r24
 146:	08 95       	ret
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	85 60       	ori	r24, 0x05	; 5
 150:	80 83       	st	Z, r24
 152:	08 95       	ret
 154:	ea e7       	ldi	r30, 0x7A	; 122
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	86 60       	ori	r24, 0x06	; 6
 15c:	80 83       	st	Z, r24
 15e:	08 95       	ret
 160:	ea e7       	ldi	r30, 0x7A	; 122
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	87 60       	ori	r24, 0x07	; 7
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret
 16c:	ea e7       	ldi	r30, 0x7A	; 122
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <ADC_select_pin>:
 176:	ec e7       	ldi	r30, 0x7C	; 124
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	90 81       	ld	r25, Z
 17c:	89 2b       	or	r24, r25
 17e:	80 83       	st	Z, r24
 180:	08 95       	ret

00000182 <ADC_init>:
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	8c 01       	movw	r16, r24
 18c:	eb 01       	movw	r28, r22
 18e:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_preInit>
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 198:	0e 94 70 00 	call	0xe0	; 0xe0 <ADC_enabled>
 19c:	c8 01       	movw	r24, r16
 19e:	0e 94 76 00 	call	0xec	; 0xec <ADC_preescaler>
 1a2:	ce 01       	movw	r24, r28
 1a4:	0e 94 bb 00 	call	0x176	; 0x176 <ADC_select_pin>
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <ADC_Start>:
 1b2:	ea e7       	ldi	r30, 0x7A	; 122
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <ADC_conversion_completed>:
 1be:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1c2:	82 95       	swap	r24
 1c4:	8f 70       	andi	r24, 0x0F	; 15
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	89 27       	eor	r24, r25
 1ca:	81 70       	andi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	08 95       	ret

000001d0 <ADC_flag_reset>:
 1d0:	ea e7       	ldi	r30, 0x7A	; 122
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	80 83       	st	Z, r24
 1da:	08 95       	ret

000001dc <ADC_get_resultado_bajo>:
int ADC_get_resultado_bajo(void){
	int resultado=ADCL;
 1dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	int basura=ADCH;  // esta linea no sirve para nada pero si lo quito se rompe todo el programa
 1e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return  resultado;//give the high byte
}
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	08 95       	ret

000001e8 <mostrarString>:
#include <avr/io.h>
#include "lcd.h"
uint8_t x = 16;

void mostrarString(const char *dato, uint8_t x, uint8_t y, uint8_t size )
{ //recibe el string, la posici√≥n a ser mostrado y la longitud del string
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	7c 01       	movw	r14, r24
 1f6:	86 2f       	mov	r24, r22
 1f8:	12 2f       	mov	r17, r18
	uint8_t i;
	LCDGotoXY(x,y);
 1fa:	64 2f       	mov	r22, r20
 1fc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCDGotoXY>
	for(i=0;i<size;i++){ //no se porque -2 pero as√≠ si
 200:	11 23       	and	r17, r17
 202:	71 f0       	breq	.+28     	; 0x220 <mostrarString+0x38>
 204:	e7 01       	movw	r28, r14
 206:	11 50       	subi	r17, 0x01	; 1
 208:	01 2f       	mov	r16, r17
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	0f 5f       	subi	r16, 0xFF	; 255
 20e:	1f 4f       	sbci	r17, 0xFF	; 255
 210:	0e 0d       	add	r16, r14
 212:	1f 1d       	adc	r17, r15
		LCDsendChar(dato[i]);
 214:	89 91       	ld	r24, Y+
 216:	0e 94 17 01 	call	0x22e	; 0x22e <LCDsendChar>

void mostrarString(const char *dato, uint8_t x, uint8_t y, uint8_t size )
{ //recibe el string, la posici√≥n a ser mostrado y la longitud del string
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;i<size;i++){ //no se porque -2 pero as√≠ si
 21a:	c0 17       	cp	r28, r16
 21c:	d1 07       	cpc	r29, r17
 21e:	d1 f7       	brne	.-12     	; 0x214 <mostrarString+0x2c>
		LCDsendChar(dato[i]);
	}
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	08 95       	ret

0000022e <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;i<(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 22e:	98 2f       	mov	r25, r24
 230:	90 7f       	andi	r25, 0xF0	; 240
 232:	95 b9       	out	0x05, r25	; 5
 234:	28 9a       	sbi	0x05, 0	; 5
 236:	2a 9a       	sbi	0x05, 2	; 5
 238:	2a e6       	ldi	r18, 0x6A	; 106
 23a:	2a 95       	dec	r18
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCDsendChar+0xc>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCDsendChar+0x12>
 240:	2a 98       	cbi	0x05, 2	; 5
 242:	28 98       	cbi	0x05, 0	; 5
 244:	9a e6       	ldi	r25, 0x6A	; 106
 246:	9a 95       	dec	r25
 248:	f1 f7       	brne	.-4      	; 0x246 <LCDsendChar+0x18>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCDsendChar+0x1e>
 24c:	20 e1       	ldi	r18, 0x10	; 16
 24e:	82 9f       	mul	r24, r18
 250:	c0 01       	movw	r24, r0
 252:	11 24       	eor	r1, r1
 254:	85 b9       	out	0x05, r24	; 5
 256:	28 9a       	sbi	0x05, 0	; 5
 258:	2a 9a       	sbi	0x05, 2	; 5
 25a:	8a e6       	ldi	r24, 0x6A	; 106
 25c:	8a 95       	dec	r24
 25e:	f1 f7       	brne	.-4      	; 0x25c <LCDsendChar+0x2e>
 260:	00 c0       	rjmp	.+0      	; 0x262 <LCDsendChar+0x34>
 262:	2a 98       	cbi	0x05, 2	; 5
 264:	28 98       	cbi	0x05, 0	; 5
 266:	9a e6       	ldi	r25, 0x6A	; 106
 268:	9a 95       	dec	r25
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCDsendChar+0x3a>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <LCDsendChar+0x40>
 26e:	08 95       	ret

00000270 <LCDsendCommand>:
 270:	98 2f       	mov	r25, r24
 272:	90 7f       	andi	r25, 0xF0	; 240
 274:	95 b9       	out	0x05, r25	; 5
 276:	2a 9a       	sbi	0x05, 2	; 5
 278:	ef ec       	ldi	r30, 0xCF	; 207
 27a:	f7 e0       	ldi	r31, 0x07	; 7
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCDsendCommand+0xc>
 280:	00 c0       	rjmp	.+0      	; 0x282 <LCDsendCommand+0x12>
 282:	00 00       	nop
 284:	2a 98       	cbi	0x05, 2	; 5
 286:	ef ec       	ldi	r30, 0xCF	; 207
 288:	f7 e0       	ldi	r31, 0x07	; 7
 28a:	31 97       	sbiw	r30, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <LCDsendCommand+0x1a>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <LCDsendCommand+0x20>
 290:	00 00       	nop
 292:	f0 e1       	ldi	r31, 0x10	; 16
 294:	8f 9f       	mul	r24, r31
 296:	c0 01       	movw	r24, r0
 298:	11 24       	eor	r1, r1
 29a:	85 b9       	out	0x05, r24	; 5
 29c:	2a 9a       	sbi	0x05, 2	; 5
 29e:	8f ec       	ldi	r24, 0xCF	; 207
 2a0:	97 e0       	ldi	r25, 0x07	; 7
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCDsendCommand+0x32>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCDsendCommand+0x38>
 2a8:	00 00       	nop
 2aa:	2a 98       	cbi	0x05, 2	; 5
 2ac:	ef ec       	ldi	r30, 0xCF	; 207
 2ae:	f7 e0       	ldi	r31, 0x07	; 7
 2b0:	31 97       	sbiw	r30, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCDsendCommand+0x40>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCDsendCommand+0x46>
 2b6:	00 00       	nop
 2b8:	08 95       	ret

000002ba <LCDclr>:
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 38 01 	call	0x270	; 0x270 <LCDsendCommand>
 2c0:	08 95       	ret

000002c2 <LCDGotoXY>:
 2c2:	62 30       	cpi	r22, 0x02	; 2
 2c4:	31 f0       	breq	.+12     	; 0x2d2 <LCDGotoXY+0x10>
 2c6:	63 30       	cpi	r22, 0x03	; 3
 2c8:	31 f0       	breq	.+12     	; 0x2d6 <LCDGotoXY+0x14>
 2ca:	61 30       	cpi	r22, 0x01	; 1
 2cc:	29 f4       	brne	.+10     	; 0x2d8 <LCDGotoXY+0x16>
 2ce:	80 5c       	subi	r24, 0xC0	; 192
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <LCDGotoXY+0x16>
 2d2:	8c 5e       	subi	r24, 0xEC	; 236
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <LCDGotoXY+0x16>
 2d6:	8c 5a       	subi	r24, 0xAC	; 172
 2d8:	80 68       	ori	r24, 0x80	; 128
 2da:	0e 94 38 01 	call	0x270	; 0x270 <LCDsendCommand>
 2de:	08 95       	ret

000002e0 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 2ea:	66 0f       	add	r22, r22
 2ec:	66 0f       	add	r22, r22
 2ee:	66 0f       	add	r22, r22
 2f0:	60 64       	ori	r22, 0x40	; 64
 2f2:	ec 01       	movw	r28, r24
 2f4:	68 94       	set
 2f6:	ff 24       	eor	r15, r15
 2f8:	f3 f8       	bld	r15, 3
 2fa:	f6 0e       	add	r15, r22
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 2fc:	fe 01       	movw	r30, r28
 2fe:	04 91       	lpm	r16, Z
		LCDsendCommand(a++);
 300:	11 e0       	ldi	r17, 0x01	; 1
 302:	16 0f       	add	r17, r22
 304:	86 2f       	mov	r24, r22
 306:	0e 94 38 01 	call	0x270	; 0x270 <LCDsendCommand>
		LCDsendChar(pcc);
 30a:	80 2f       	mov	r24, r16
 30c:	0e 94 17 01 	call	0x22e	; 0x22e <LCDsendChar>
 310:	21 96       	adiw	r28, 0x01	; 1
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 312:	61 2f       	mov	r22, r17
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 314:	1f 11       	cpse	r17, r15
 316:	f2 cf       	rjmp	.-28     	; 0x2fc <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	ff 90       	pop	r15
 322:	08 95       	ret

00000324 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32a:	8f e2       	ldi	r24, 0x2F	; 47
 32c:	95 e7       	ldi	r25, 0x75	; 117
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCDinit+0xa>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LCDinit+0x10>
 334:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 336:	15 b8       	out	0x05, r1	; 5
	LCP=0x00;
 338:	15 b8       	out	0x05, r1	; 5
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 33a:	84 b1       	in	r24, 0x04	; 4
 33c:	80 6f       	ori	r24, 0xF0	; 240
 33e:	84 b9       	out	0x04, r24	; 4
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 340:	84 b1       	in	r24, 0x04	; 4
 342:	87 60       	ori	r24, 0x07	; 7
 344:	84 b9       	out	0x04, r24	; 4
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 346:	80 e3       	ldi	r24, 0x30	; 48
 348:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 34a:	2a 9a       	sbi	0x05, 2	; 5
 34c:	ef ec       	ldi	r30, 0xCF	; 207
 34e:	f7 e0       	ldi	r31, 0x07	; 7
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <LCDinit+0x2c>
 354:	00 c0       	rjmp	.+0      	; 0x356 <LCDinit+0x32>
 356:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 358:	2a 98       	cbi	0x05, 2	; 5
 35a:	ef ec       	ldi	r30, 0xCF	; 207
 35c:	f7 e0       	ldi	r31, 0x07	; 7
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <LCDinit+0x3a>
 362:	00 c0       	rjmp	.+0      	; 0x364 <LCDinit+0x40>
 364:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 366:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 368:	2a 9a       	sbi	0x05, 2	; 5
 36a:	8f ec       	ldi	r24, 0xCF	; 207
 36c:	97 e0       	ldi	r25, 0x07	; 7
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCDinit+0x4a>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LCDinit+0x50>
 374:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 376:	2a 98       	cbi	0x05, 2	; 5
 378:	ef ec       	ldi	r30, 0xCF	; 207
 37a:	f7 e0       	ldi	r31, 0x07	; 7
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <LCDinit+0x58>
 380:	00 c0       	rjmp	.+0      	; 0x382 <LCDinit+0x5e>
 382:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 384:	80 e2       	ldi	r24, 0x20	; 32
 386:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 388:	2a 9a       	sbi	0x05, 2	; 5
 38a:	8f ec       	ldi	r24, 0xCF	; 207
 38c:	97 e0       	ldi	r25, 0x07	; 7
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <LCDinit+0x6a>
 392:	00 c0       	rjmp	.+0      	; 0x394 <LCDinit+0x70>
 394:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 396:	2a 98       	cbi	0x05, 2	; 5
 398:	ef ec       	ldi	r30, 0xCF	; 207
 39a:	f7 e0       	ldi	r31, 0x07	; 7
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <LCDinit+0x78>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <LCDinit+0x7e>
 3a2:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 3a4:	88 e2       	ldi	r24, 0x28	; 40
 3a6:	0e 94 38 01 	call	0x270	; 0x270 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 3aa:	8c e0       	ldi	r24, 0x0C	; 12
 3ac:	0e 94 38 01 	call	0x270	; 0x270 <LCDsendCommand>
 3b0:	c8 e6       	ldi	r28, 0x68	; 104
 3b2:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 3b4:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 3b6:	11 e0       	ldi	r17, 0x01	; 1
 3b8:	16 0f       	add	r17, r22
 3ba:	ce 01       	movw	r24, r28
 3bc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCDdefinechar>
 3c0:	28 96       	adiw	r28, 0x08	; 8
 3c2:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 3c4:	18 30       	cpi	r17, 0x08	; 8
 3c6:	b9 f7       	brne	.-18     	; 0x3b6 <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	08 95       	ret

000003d0 <imprimir>:
#include "controlador_lcd.h"
#include "lcd.h"

#include <stdlib.h>
#include <string.h>
void imprimir( uint8_t temperatura ){
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	00 d0       	rcall	.+0      	; 0x3d8 <imprimir+0x8>
 3d8:	1f 92       	push	r1
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	18 2f       	mov	r17, r24
		char temperatura_en_string[3]="00";
 3e0:	80 e3       	ldi	r24, 0x30	; 48
 3e2:	90 e3       	ldi	r25, 0x30	; 48
 3e4:	a0 e0       	ldi	r26, 0x00	; 0
 3e6:	89 83       	std	Y+1, r24	; 0x01
 3e8:	9a 83       	std	Y+2, r25	; 0x02
 3ea:	ab 83       	std	Y+3, r26	; 0x03
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3ec:	4a e0       	ldi	r20, 0x0A	; 10
 3ee:	be 01       	movw	r22, r28
 3f0:	6f 5f       	subi	r22, 0xFF	; 255
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255
 3f4:	81 2f       	mov	r24, r17
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 41 02 	call	0x482	; 0x482 <__itoa_ncheck>
		itoa(temperatura,temperatura_en_string,10);
		if (temperatura<10){
 3fc:	1a 30       	cpi	r17, 0x0A	; 10
 3fe:	40 f4       	brcc	.+16     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
			mostrarString(temperatura_en_string,0,0,1);	
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	ce 01       	movw	r24, r28
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mostrarString>
 40e:	07 c0       	rjmp	.+14     	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
		}else{
			mostrarString(temperatura_en_string,0,0,2);
 410:	22 e0       	ldi	r18, 0x02	; 2
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	ce 01       	movw	r24, r28
 418:	01 96       	adiw	r24, 0x01	; 1
 41a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mostrarString>
		}
				
}
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	1f 91       	pop	r17
 42a:	08 95       	ret

0000042c <main>:

int main (void)
{
	LCDinit();
 42c:	0e 94 92 01 	call	0x324	; 0x324 <LCDinit>
	TERMOMETRO_init();
 430:	0e 94 2a 02 	call	0x454	; 0x454 <TERMOMETRO_init>
	while(1)
	{
		imprimir(TERMOMETRO_get_temperatura());
 434:	0e 94 31 02 	call	0x462	; 0x462 <TERMOMETRO_get_temperatura>
 438:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <imprimir>
 43c:	2f ef       	ldi	r18, 0xFF	; 255
 43e:	80 e7       	ldi	r24, 0x70	; 112
 440:	92 e0       	ldi	r25, 0x02	; 2
 442:	21 50       	subi	r18, 0x01	; 1
 444:	80 40       	sbci	r24, 0x00	; 0
 446:	90 40       	sbci	r25, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <main+0x16>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <main+0x20>
 44c:	00 00       	nop
		_delay_ms(100);
		LCDclr();			
 44e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDclr>
	}
 452:	f0 cf       	rjmp	.-32     	; 0x434 <main+0x8>

00000454 <TERMOMETRO_init>:
#include "termometro.h"
#include <avr/io.h>


void TERMOMETRO_init(void){
	ADC_init(64,0);
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	80 e4       	ldi	r24, 0x40	; 64
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 c1 00 	call	0x182	; 0x182 <ADC_init>
 460:	08 95       	ret

00000462 <TERMOMETRO_get_temperatura>:
}

uint8_t TERMOMETRO_get_temperatura(void){
	
	ADC_Start();
 462:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ADC_Start>
	while(ADC_conversion_completed()); //wait for conversion to finish
 466:	0e 94 df 00 	call	0x1be	; 0x1be <ADC_conversion_completed>
 46a:	89 2b       	or	r24, r25
 46c:	e1 f7       	brne	.-8      	; 0x466 <TERMOMETRO_get_temperatura+0x4>
	ADC_flag_reset();	
 46e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <ADC_flag_reset>
	return ADC_get_resultado_bajo()/2;
 472:	0e 94 ee 00 	call	0x1dc	; 0x1dc <ADC_get_resultado_bajo>
 476:	99 23       	and	r25, r25
 478:	0c f4       	brge	.+2      	; 0x47c <TERMOMETRO_get_temperatura+0x1a>
 47a:	01 96       	adiw	r24, 0x01	; 1
 47c:	95 95       	asr	r25
 47e:	87 95       	ror	r24
}
 480:	08 95       	ret

00000482 <__itoa_ncheck>:
 482:	bb 27       	eor	r27, r27
 484:	4a 30       	cpi	r20, 0x0A	; 10
 486:	31 f4       	brne	.+12     	; 0x494 <__itoa_ncheck+0x12>
 488:	99 23       	and	r25, r25
 48a:	22 f4       	brpl	.+8      	; 0x494 <__itoa_ncheck+0x12>
 48c:	bd e2       	ldi	r27, 0x2D	; 45
 48e:	90 95       	com	r25
 490:	81 95       	neg	r24
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__utoa_common>

00000498 <__utoa_ncheck>:
 498:	bb 27       	eor	r27, r27

0000049a <__utoa_common>:
 49a:	fb 01       	movw	r30, r22
 49c:	55 27       	eor	r21, r21
 49e:	aa 27       	eor	r26, r26
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	aa 1f       	adc	r26, r26
 4a6:	a4 17       	cp	r26, r20
 4a8:	10 f0       	brcs	.+4      	; 0x4ae <__utoa_common+0x14>
 4aa:	a4 1b       	sub	r26, r20
 4ac:	83 95       	inc	r24
 4ae:	50 51       	subi	r21, 0x10	; 16
 4b0:	b9 f7       	brne	.-18     	; 0x4a0 <__utoa_common+0x6>
 4b2:	a0 5d       	subi	r26, 0xD0	; 208
 4b4:	aa 33       	cpi	r26, 0x3A	; 58
 4b6:	08 f0       	brcs	.+2      	; 0x4ba <__utoa_common+0x20>
 4b8:	a9 5d       	subi	r26, 0xD9	; 217
 4ba:	a1 93       	st	Z+, r26
 4bc:	00 97       	sbiw	r24, 0x00	; 0
 4be:	79 f7       	brne	.-34     	; 0x49e <__utoa_common+0x4>
 4c0:	b1 11       	cpse	r27, r1
 4c2:	b1 93       	st	Z+, r27
 4c4:	11 92       	st	Z+, r1
 4c6:	cb 01       	movw	r24, r22
 4c8:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <strrev>

000004cc <strrev>:
 4cc:	dc 01       	movw	r26, r24
 4ce:	fc 01       	movw	r30, r24
 4d0:	67 2f       	mov	r22, r23
 4d2:	71 91       	ld	r23, Z+
 4d4:	77 23       	and	r23, r23
 4d6:	e1 f7       	brne	.-8      	; 0x4d0 <strrev+0x4>
 4d8:	32 97       	sbiw	r30, 0x02	; 2
 4da:	04 c0       	rjmp	.+8      	; 0x4e4 <strrev+0x18>
 4dc:	7c 91       	ld	r23, X
 4de:	6d 93       	st	X+, r22
 4e0:	70 83       	st	Z, r23
 4e2:	62 91       	ld	r22, -Z
 4e4:	ae 17       	cp	r26, r30
 4e6:	bf 07       	cpc	r27, r31
 4e8:	c8 f3       	brcs	.-14     	; 0x4dc <strrev+0x10>
 4ea:	08 95       	ret

000004ec <_exit>:
 4ec:	f8 94       	cli

000004ee <__stop_program>:
 4ee:	ff cf       	rjmp	.-2      	; 0x4ee <__stop_program>
