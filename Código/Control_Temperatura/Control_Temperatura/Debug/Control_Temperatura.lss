
Control_Temperatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000a58  00000acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a58  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000ad2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000162c  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000801  00000000  00000000  00002338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cdc  00000000  00000000  00002b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004a4  00000000  00000000  00003818  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000546  00000000  00000000  00003cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000134b  00000000  00000000  00004202  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000190  00000000  00000000  0000554d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e8 e5       	ldi	r30, 0x58	; 88
  bc:	fa e0       	ldi	r31, 0x0A	; 10
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a6 30       	cpi	r26, 0x06	; 6
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>
  ca:	0e 94 a0 02 	call	0x540	; 0x540 <main>
  ce:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <ADC_preInit>:
	/**
	voltaje=voltaje*5;
	voltaje=voltaje/1024;
	**/
	return voltaje;
}
  d6:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  da:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  de:	08 95       	ret

000000e0 <ADC_enabled>:
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret

000000ec <ADC_preescaler>:
  ec:	80 31       	cpi	r24, 0x10	; 16
  ee:	91 05       	cpc	r25, r1
  f0:	29 f1       	breq	.+74     	; 0x13c <ADC_preescaler+0x50>
  f2:	4c f4       	brge	.+18     	; 0x106 <ADC_preescaler+0x1a>
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	91 05       	cpc	r25, r1
  f8:	a9 f0       	breq	.+42     	; 0x124 <ADC_preescaler+0x38>
  fa:	88 30       	cpi	r24, 0x08	; 8
  fc:	91 05       	cpc	r25, r1
  fe:	c1 f0       	breq	.+48     	; 0x130 <ADC_preescaler+0x44>
 100:	02 97       	sbiw	r24, 0x02	; 2
 102:	a1 f5       	brne	.+104    	; 0x16c <ADC_preescaler+0x80>
 104:	09 c0       	rjmp	.+18     	; 0x118 <ADC_preescaler+0x2c>
 106:	80 34       	cpi	r24, 0x40	; 64
 108:	91 05       	cpc	r25, r1
 10a:	21 f1       	breq	.+72     	; 0x154 <ADC_preescaler+0x68>
 10c:	80 38       	cpi	r24, 0x80	; 128
 10e:	91 05       	cpc	r25, r1
 110:	39 f1       	breq	.+78     	; 0x160 <ADC_preescaler+0x74>
 112:	80 97       	sbiw	r24, 0x20	; 32
 114:	59 f5       	brne	.+86     	; 0x16c <ADC_preescaler+0x80>
 116:	18 c0       	rjmp	.+48     	; 0x148 <ADC_preescaler+0x5c>
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	80 83       	st	Z, r24
 122:	08 95       	ret
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	83 60       	ori	r24, 0x03	; 3
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 83       	st	Z, r24
 146:	08 95       	ret
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	85 60       	ori	r24, 0x05	; 5
 150:	80 83       	st	Z, r24
 152:	08 95       	ret
 154:	ea e7       	ldi	r30, 0x7A	; 122
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	86 60       	ori	r24, 0x06	; 6
 15c:	80 83       	st	Z, r24
 15e:	08 95       	ret
 160:	ea e7       	ldi	r30, 0x7A	; 122
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	87 60       	ori	r24, 0x07	; 7
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret
 16c:	ea e7       	ldi	r30, 0x7A	; 122
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <ADC_select_pin>:
 176:	ec e7       	ldi	r30, 0x7C	; 124
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	90 81       	ld	r25, Z
 17c:	89 2b       	or	r24, r25
 17e:	80 83       	st	Z, r24
 180:	08 95       	ret

00000182 <ADC_init>:
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	8c 01       	movw	r16, r24
 18c:	eb 01       	movw	r28, r22
 18e:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_preInit>
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 198:	0e 94 70 00 	call	0xe0	; 0xe0 <ADC_enabled>
 19c:	c8 01       	movw	r24, r16
 19e:	0e 94 76 00 	call	0xec	; 0xec <ADC_preescaler>
 1a2:	ce 01       	movw	r24, r28
 1a4:	0e 94 bb 00 	call	0x176	; 0x176 <ADC_select_pin>
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <ADC_Start>:
 1b2:	ea e7       	ldi	r30, 0x7A	; 122
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <ADC_conversion_completed>:
 1be:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1c2:	82 95       	swap	r24
 1c4:	8f 70       	andi	r24, 0x0F	; 15
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	89 27       	eor	r24, r25
 1ca:	81 70       	andi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	08 95       	ret

000001d0 <ADC_flag_reset>:
 1d0:	ea e7       	ldi	r30, 0x7A	; 122
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	80 83       	st	Z, r24
 1da:	08 95       	ret

000001dc <ADC_get_voltaje_real>:
	/**
	float resultado=ADCL; //give the high byte
	float basura=ADCH;    // esta linea no sirve para nada pero si lo quito se rompe todo el programa, ya que se tiene que leer la parte alta si o si, sino no funciona
	return  resultado;
	**/
	float voltaje =ADC;
 1dc:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1e0:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 30 03 	call	0x660	; 0x660 <__floatunsisf>
	voltaje=voltaje*5;
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	40 ea       	ldi	r20, 0xA0	; 160
 1f2:	50 e4       	ldi	r21, 0x40	; 64
 1f4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__mulsf3>
	voltaje=voltaje/1024;
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	40 e8       	ldi	r20, 0x80	; 128
 1fe:	5a e3       	ldi	r21, 0x3A	; 58
 200:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__mulsf3>
	return voltaje;
	
	
}
 204:	08 95       	ret

00000206 <mostrarString>:
#include <avr/io.h>
#include "lcd.h"
uint8_t x = 16;

void mostrarString(const char *dato, uint8_t x, uint8_t y, uint8_t size )
{ //recibe el string, la posición a ser mostrado y la longitud del string
 206:	ef 92       	push	r14
 208:	ff 92       	push	r15
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	7c 01       	movw	r14, r24
 214:	86 2f       	mov	r24, r22
 216:	12 2f       	mov	r17, r18
	uint8_t i;
	LCDGotoXY(x,y);
 218:	64 2f       	mov	r22, r20
 21a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCDGotoXY>
	for(i=0;i<size;i++){ //no se porque -2 pero así si
 21e:	11 23       	and	r17, r17
 220:	71 f0       	breq	.+28     	; 0x23e <mostrarString+0x38>
 222:	e7 01       	movw	r28, r14
 224:	11 50       	subi	r17, 0x01	; 1
 226:	01 2f       	mov	r16, r17
 228:	10 e0       	ldi	r17, 0x00	; 0
 22a:	0f 5f       	subi	r16, 0xFF	; 255
 22c:	1f 4f       	sbci	r17, 0xFF	; 255
 22e:	0e 0d       	add	r16, r14
 230:	1f 1d       	adc	r17, r15
		LCDsendChar(dato[i]);
 232:	89 91       	ld	r24, Y+
 234:	0e 94 26 01 	call	0x24c	; 0x24c <LCDsendChar>

void mostrarString(const char *dato, uint8_t x, uint8_t y, uint8_t size )
{ //recibe el string, la posición a ser mostrado y la longitud del string
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;i<size;i++){ //no se porque -2 pero así si
 238:	c0 17       	cp	r28, r16
 23a:	d1 07       	cpc	r29, r17
 23c:	d1 f7       	brne	.-12     	; 0x232 <mostrarString+0x2c>
		LCDsendChar(dato[i]);
	}
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	08 95       	ret

0000024c <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;i<(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 24c:	98 2f       	mov	r25, r24
 24e:	90 7f       	andi	r25, 0xF0	; 240
 250:	95 b9       	out	0x05, r25	; 5
 252:	28 9a       	sbi	0x05, 0	; 5
 254:	2a 9a       	sbi	0x05, 2	; 5
 256:	2a e6       	ldi	r18, 0x6A	; 106
 258:	2a 95       	dec	r18
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCDsendChar+0xc>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCDsendChar+0x12>
 25e:	2a 98       	cbi	0x05, 2	; 5
 260:	28 98       	cbi	0x05, 0	; 5
 262:	9a e6       	ldi	r25, 0x6A	; 106
 264:	9a 95       	dec	r25
 266:	f1 f7       	brne	.-4      	; 0x264 <LCDsendChar+0x18>
 268:	00 c0       	rjmp	.+0      	; 0x26a <LCDsendChar+0x1e>
 26a:	20 e1       	ldi	r18, 0x10	; 16
 26c:	82 9f       	mul	r24, r18
 26e:	c0 01       	movw	r24, r0
 270:	11 24       	eor	r1, r1
 272:	85 b9       	out	0x05, r24	; 5
 274:	28 9a       	sbi	0x05, 0	; 5
 276:	2a 9a       	sbi	0x05, 2	; 5
 278:	8a e6       	ldi	r24, 0x6A	; 106
 27a:	8a 95       	dec	r24
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCDsendChar+0x2e>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <LCDsendChar+0x34>
 280:	2a 98       	cbi	0x05, 2	; 5
 282:	28 98       	cbi	0x05, 0	; 5
 284:	9a e6       	ldi	r25, 0x6A	; 106
 286:	9a 95       	dec	r25
 288:	f1 f7       	brne	.-4      	; 0x286 <LCDsendChar+0x3a>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <LCDsendChar+0x40>
 28c:	08 95       	ret

0000028e <LCDsendCommand>:
 28e:	98 2f       	mov	r25, r24
 290:	90 7f       	andi	r25, 0xF0	; 240
 292:	95 b9       	out	0x05, r25	; 5
 294:	2a 9a       	sbi	0x05, 2	; 5
 296:	ef ec       	ldi	r30, 0xCF	; 207
 298:	f7 e0       	ldi	r31, 0x07	; 7
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCDsendCommand+0xc>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCDsendCommand+0x12>
 2a0:	00 00       	nop
 2a2:	2a 98       	cbi	0x05, 2	; 5
 2a4:	ef ec       	ldi	r30, 0xCF	; 207
 2a6:	f7 e0       	ldi	r31, 0x07	; 7
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCDsendCommand+0x1a>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCDsendCommand+0x20>
 2ae:	00 00       	nop
 2b0:	f0 e1       	ldi	r31, 0x10	; 16
 2b2:	8f 9f       	mul	r24, r31
 2b4:	c0 01       	movw	r24, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	85 b9       	out	0x05, r24	; 5
 2ba:	2a 9a       	sbi	0x05, 2	; 5
 2bc:	8f ec       	ldi	r24, 0xCF	; 207
 2be:	97 e0       	ldi	r25, 0x07	; 7
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCDsendCommand+0x32>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCDsendCommand+0x38>
 2c6:	00 00       	nop
 2c8:	2a 98       	cbi	0x05, 2	; 5
 2ca:	ef ec       	ldi	r30, 0xCF	; 207
 2cc:	f7 e0       	ldi	r31, 0x07	; 7
 2ce:	31 97       	sbiw	r30, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCDsendCommand+0x40>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LCDsendCommand+0x46>
 2d4:	00 00       	nop
 2d6:	08 95       	ret

000002d8 <LCDclr>:
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 47 01 	call	0x28e	; 0x28e <LCDsendCommand>
 2de:	08 95       	ret

000002e0 <LCDGotoXY>:
 2e0:	62 30       	cpi	r22, 0x02	; 2
 2e2:	31 f0       	breq	.+12     	; 0x2f0 <LCDGotoXY+0x10>
 2e4:	63 30       	cpi	r22, 0x03	; 3
 2e6:	31 f0       	breq	.+12     	; 0x2f4 <LCDGotoXY+0x14>
 2e8:	61 30       	cpi	r22, 0x01	; 1
 2ea:	29 f4       	brne	.+10     	; 0x2f6 <LCDGotoXY+0x16>
 2ec:	80 5c       	subi	r24, 0xC0	; 192
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <LCDGotoXY+0x16>
 2f0:	8c 5e       	subi	r24, 0xEC	; 236
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <LCDGotoXY+0x16>
 2f4:	8c 5a       	subi	r24, 0xAC	; 172
 2f6:	80 68       	ori	r24, 0x80	; 128
 2f8:	0e 94 47 01 	call	0x28e	; 0x28e <LCDsendCommand>
 2fc:	08 95       	ret

000002fe <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 2fe:	ff 92       	push	r15
 300:	0f 93       	push	r16
 302:	1f 93       	push	r17
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 308:	66 0f       	add	r22, r22
 30a:	66 0f       	add	r22, r22
 30c:	66 0f       	add	r22, r22
 30e:	60 64       	ori	r22, 0x40	; 64
 310:	ec 01       	movw	r28, r24
 312:	68 94       	set
 314:	ff 24       	eor	r15, r15
 316:	f3 f8       	bld	r15, 3
 318:	f6 0e       	add	r15, r22
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 31a:	fe 01       	movw	r30, r28
 31c:	04 91       	lpm	r16, Z
		LCDsendCommand(a++);
 31e:	11 e0       	ldi	r17, 0x01	; 1
 320:	16 0f       	add	r17, r22
 322:	86 2f       	mov	r24, r22
 324:	0e 94 47 01 	call	0x28e	; 0x28e <LCDsendCommand>
		LCDsendChar(pcc);
 328:	80 2f       	mov	r24, r16
 32a:	0e 94 26 01 	call	0x24c	; 0x24c <LCDsendChar>
 32e:	21 96       	adiw	r28, 0x01	; 1
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 330:	61 2f       	mov	r22, r17
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 332:	1f 11       	cpse	r17, r15
 334:	f2 cf       	rjmp	.-28     	; 0x31a <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	08 95       	ret

00000342 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 348:	8f e2       	ldi	r24, 0x2F	; 47
 34a:	95 e7       	ldi	r25, 0x75	; 117
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <LCDinit+0xa>
 350:	00 c0       	rjmp	.+0      	; 0x352 <LCDinit+0x10>
 352:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 354:	15 b8       	out	0x05, r1	; 5
	LCP=0x00;
 356:	15 b8       	out	0x05, r1	; 5
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 358:	84 b1       	in	r24, 0x04	; 4
 35a:	80 6f       	ori	r24, 0xF0	; 240
 35c:	84 b9       	out	0x04, r24	; 4
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 35e:	84 b1       	in	r24, 0x04	; 4
 360:	87 60       	ori	r24, 0x07	; 7
 362:	84 b9       	out	0x04, r24	; 4
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 364:	80 e3       	ldi	r24, 0x30	; 48
 366:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 368:	2a 9a       	sbi	0x05, 2	; 5
 36a:	ef ec       	ldi	r30, 0xCF	; 207
 36c:	f7 e0       	ldi	r31, 0x07	; 7
 36e:	31 97       	sbiw	r30, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCDinit+0x2c>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LCDinit+0x32>
 374:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 376:	2a 98       	cbi	0x05, 2	; 5
 378:	ef ec       	ldi	r30, 0xCF	; 207
 37a:	f7 e0       	ldi	r31, 0x07	; 7
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <LCDinit+0x3a>
 380:	00 c0       	rjmp	.+0      	; 0x382 <LCDinit+0x40>
 382:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 384:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 386:	2a 9a       	sbi	0x05, 2	; 5
 388:	8f ec       	ldi	r24, 0xCF	; 207
 38a:	97 e0       	ldi	r25, 0x07	; 7
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCDinit+0x4a>
 390:	00 c0       	rjmp	.+0      	; 0x392 <LCDinit+0x50>
 392:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 394:	2a 98       	cbi	0x05, 2	; 5
 396:	ef ec       	ldi	r30, 0xCF	; 207
 398:	f7 e0       	ldi	r31, 0x07	; 7
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <LCDinit+0x58>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <LCDinit+0x5e>
 3a0:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 3a2:	80 e2       	ldi	r24, 0x20	; 32
 3a4:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 3a6:	2a 9a       	sbi	0x05, 2	; 5
 3a8:	8f ec       	ldi	r24, 0xCF	; 207
 3aa:	97 e0       	ldi	r25, 0x07	; 7
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <LCDinit+0x6a>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <LCDinit+0x70>
 3b2:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 3b4:	2a 98       	cbi	0x05, 2	; 5
 3b6:	ef ec       	ldi	r30, 0xCF	; 207
 3b8:	f7 e0       	ldi	r31, 0x07	; 7
 3ba:	31 97       	sbiw	r30, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCDinit+0x78>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCDinit+0x7e>
 3c0:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 3c2:	88 e2       	ldi	r24, 0x28	; 40
 3c4:	0e 94 47 01 	call	0x28e	; 0x28e <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 3c8:	8c e0       	ldi	r24, 0x0C	; 12
 3ca:	0e 94 47 01 	call	0x28e	; 0x28e <LCDsendCommand>
 3ce:	c8 e6       	ldi	r28, 0x68	; 104
 3d0:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 3d2:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 3d4:	11 e0       	ldi	r17, 0x01	; 1
 3d6:	16 0f       	add	r17, r22
 3d8:	ce 01       	movw	r24, r28
 3da:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LCDdefinechar>
 3de:	28 96       	adiw	r28, 0x08	; 8
 3e0:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 3e2:	18 30       	cpi	r17, 0x08	; 8
 3e4:	b9 f7       	brne	.-18     	; 0x3d4 <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	1f 91       	pop	r17
 3ec:	08 95       	ret

000003ee <intTostring>:
void imprimir( uint8_t temperatura ){
	char string[3]="00";
	intTostring(temperatura,string);
	mostrarString(string,0,0,2);
	
}
 3ee:	0f 93       	push	r16
 3f0:	1f 93       	push	r17
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	8c 01       	movw	r16, r24
 3f8:	eb 01       	movw	r28, r22
 3fa:	4a e0       	ldi	r20, 0x0A	; 10
 3fc:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__itoa_ncheck>
 400:	0a 30       	cpi	r16, 0x0A	; 10
 402:	11 05       	cpc	r17, r1
 404:	24 f4       	brge	.+8      	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
 406:	88 81       	ld	r24, Y
 408:	89 83       	std	Y+1, r24	; 0x01
 40a:	80 e3       	ldi	r24, 0x30	; 48
 40c:	88 83       	st	Y, r24
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	08 95       	ret

00000418 <floatToString>:


void floatToString(float temperatura, char* stringFinal){
 418:	cf 92       	push	r12
 41a:	df 92       	push	r13
 41c:	ef 92       	push	r14
 41e:	ff 92       	push	r15
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	00 d0       	rcall	.+0      	; 0x42a <floatToString+0x12>
 42a:	00 d0       	rcall	.+0      	; 0x42c <floatToString+0x14>
 42c:	00 d0       	rcall	.+0      	; 0x42e <floatToString+0x16>
 42e:	cd b7       	in	r28, 0x3d	; 61
 430:	de b7       	in	r29, 0x3e	; 62
 432:	8a 01       	movw	r16, r20
	char string[2]="00";
 434:	20 e3       	ldi	r18, 0x30	; 48
 436:	30 e3       	ldi	r19, 0x30	; 48
 438:	3a 83       	std	Y+2, r19	; 0x02
 43a:	29 83       	std	Y+1, r18	; 0x01
	//descompongo el numero
	double ParteEntera;
	double parteFraccional = modf(temperatura, &ParteEntera);
 43c:	ae 01       	movw	r20, r28
 43e:	4d 5f       	subi	r20, 0xFD	; 253
 440:	5f 4f       	sbci	r21, 0xFF	; 255
 442:	0e 94 bf 03 	call	0x77e	; 0x77e <modf>
 446:	6b 01       	movw	r12, r22
 448:	7c 01       	movw	r14, r24
	
	//parte entera
	intTostring(ParteEntera,string);
 44a:	6b 81       	ldd	r22, Y+3	; 0x03
 44c:	7c 81       	ldd	r23, Y+4	; 0x04
 44e:	8d 81       	ldd	r24, Y+5	; 0x05
 450:	9e 81       	ldd	r25, Y+6	; 0x06
 452:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fixsfsi>
 456:	dc 01       	movw	r26, r24
 458:	cb 01       	movw	r24, r22
 45a:	be 01       	movw	r22, r28
 45c:	6f 5f       	subi	r22, 0xFF	; 255
 45e:	7f 4f       	sbci	r23, 0xFF	; 255
 460:	0e 94 f7 01 	call	0x3ee	; 0x3ee <intTostring>
	stringFinal[0]=string[0];
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	f8 01       	movw	r30, r16
 468:	80 83       	st	Z, r24
	stringFinal[1]=string[1];
 46a:	8a 81       	ldd	r24, Y+2	; 0x02
 46c:	81 83       	std	Z+1, r24	; 0x01

	//parte fraccional
	if (parteFraccional*100<10){
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	48 ec       	ldi	r20, 0xC8	; 200
 474:	52 e4       	ldi	r21, 0x42	; 66
 476:	c7 01       	movw	r24, r14
 478:	b6 01       	movw	r22, r12
 47a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__mulsf3>
 47e:	6b 01       	movw	r12, r22
 480:	7c 01       	movw	r14, r24
 482:	20 e0       	ldi	r18, 0x00	; 0
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	40 e2       	ldi	r20, 0x20	; 32
 488:	51 e4       	ldi	r21, 0x41	; 65
 48a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__cmpsf2>
 48e:	88 23       	and	r24, r24
 490:	9c f4       	brge	.+38     	; 0x4b8 <floatToString+0xa0>
		// primera parte fraccional
		stringFinal[3]='0';
 492:	80 e3       	ldi	r24, 0x30	; 48
 494:	f8 01       	movw	r30, r16
 496:	83 83       	std	Z+3, r24	; 0x03
		// segunda parte fraccional
		itoa(parteFraccional*100, string, 10);
 498:	c7 01       	movw	r24, r14
 49a:	b6 01       	movw	r22, r12
 49c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fixsfsi>
 4a0:	dc 01       	movw	r26, r24
 4a2:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4a4:	4a e0       	ldi	r20, 0x0A	; 10
 4a6:	be 01       	movw	r22, r28
 4a8:	6f 5f       	subi	r22, 0xFF	; 255
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__itoa_ncheck>
		stringFinal[4]=string[0];
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	f8 01       	movw	r30, r16
 4b4:	84 83       	std	Z+4, r24	; 0x04
 4b6:	11 c0       	rjmp	.+34     	; 0x4da <floatToString+0xc2>
		}else{
		// parte fraccional
		itoa(parteFraccional*100, string, 10);
 4b8:	c7 01       	movw	r24, r14
 4ba:	b6 01       	movw	r22, r12
 4bc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fixsfsi>
 4c0:	dc 01       	movw	r26, r24
 4c2:	cb 01       	movw	r24, r22
 4c4:	4a e0       	ldi	r20, 0x0A	; 10
 4c6:	be 01       	movw	r22, r28
 4c8:	6f 5f       	subi	r22, 0xFF	; 255
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__itoa_ncheck>
			stringFinal[3]=string[0];
 4d0:	89 81       	ldd	r24, Y+1	; 0x01
 4d2:	f8 01       	movw	r30, r16
 4d4:	83 83       	std	Z+3, r24	; 0x03
			stringFinal[4]=string[1];
 4d6:	8a 81       	ldd	r24, Y+2	; 0x02
 4d8:	84 83       	std	Z+4, r24	; 0x04
	}
}
 4da:	26 96       	adiw	r28, 0x06	; 6
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	f8 94       	cli
 4e0:	de bf       	out	0x3e, r29	; 62
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	cd bf       	out	0x3d, r28	; 61
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	ff 90       	pop	r15
 4f0:	ef 90       	pop	r14
 4f2:	df 90       	pop	r13
 4f4:	cf 90       	pop	r12
 4f6:	08 95       	ret

000004f8 <imprimir_float>:
void imprimir_float( float temperatura ){
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	00 d0       	rcall	.+0      	; 0x4fe <imprimir_float+0x6>
 4fe:	00 d0       	rcall	.+0      	; 0x500 <imprimir_float+0x8>
 500:	1f 92       	push	r1
 502:	cd b7       	in	r28, 0x3d	; 61
 504:	de b7       	in	r29, 0x3e	; 62
	char string[5]="00.00";
 506:	25 e0       	ldi	r18, 0x05	; 5
 508:	e0 e0       	ldi	r30, 0x00	; 0
 50a:	f1 e0       	ldi	r31, 0x01	; 1
 50c:	de 01       	movw	r26, r28
 50e:	11 96       	adiw	r26, 0x01	; 1
 510:	01 90       	ld	r0, Z+
 512:	0d 92       	st	X+, r0
 514:	2a 95       	dec	r18
 516:	e1 f7       	brne	.-8      	; 0x510 <imprimir_float+0x18>
	floatToString(temperatura,string);
 518:	ae 01       	movw	r20, r28
 51a:	4f 5f       	subi	r20, 0xFF	; 255
 51c:	5f 4f       	sbci	r21, 0xFF	; 255
 51e:	0e 94 0c 02 	call	0x418	; 0x418 <floatToString>
	mostrarString(string,0,0,5);
 522:	25 e0       	ldi	r18, 0x05	; 5
 524:	40 e0       	ldi	r20, 0x00	; 0
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	ce 01       	movw	r24, r28
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	0e 94 03 01 	call	0x206	; 0x206 <mostrarString>
}
 530:	0f 90       	pop	r0
 532:	0f 90       	pop	r0
 534:	0f 90       	pop	r0
 536:	0f 90       	pop	r0
 538:	0f 90       	pop	r0
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <main>:
int main (void)
{
	LCDinit();
 540:	0e 94 a1 01 	call	0x342	; 0x342 <LCDinit>
	TERMOMETRO_init();
 544:	0e 94 b4 02 	call	0x568	; 0x568 <TERMOMETRO_init>
	while(1)
	{
		imprimir_float( TERMOMETRO_get_temperatura_real() );
 548:	0e 94 bb 02 	call	0x576	; 0x576 <TERMOMETRO_get_temperatura_real>
 54c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <imprimir_float>
 550:	2f ef       	ldi	r18, 0xFF	; 255
 552:	80 e7       	ldi	r24, 0x70	; 112
 554:	92 e0       	ldi	r25, 0x02	; 2
 556:	21 50       	subi	r18, 0x01	; 1
 558:	80 40       	sbci	r24, 0x00	; 0
 55a:	90 40       	sbci	r25, 0x00	; 0
 55c:	e1 f7       	brne	.-8      	; 0x556 <main+0x16>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <main+0x20>
 560:	00 00       	nop
		//imprimir_float( 11.11 );
		//imprimir( TERMOMETRO_get_temperatura_entero() );
		_delay_ms(100);
		LCDclr();			
 562:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCDclr>
	}
 566:	f0 cf       	rjmp	.-32     	; 0x548 <main+0x8>

00000568 <TERMOMETRO_init>:
	ADC_flag_reset();	
	uint8_t temperatura=ADC_get_temperatura_entero();
	if (temperatura>50){temperatura=50;}
	if (temperatura<0){temperatura=0;}	
	return temperatura;
}
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	80 e4       	ldi	r24, 0x40	; 64
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 c1 00 	call	0x182	; 0x182 <ADC_init>
 574:	08 95       	ret

00000576 <TERMOMETRO_get_temperatura_real>:


float TERMOMETRO_get_temperatura_real(void){
 576:	cf 92       	push	r12
 578:	df 92       	push	r13
 57a:	ef 92       	push	r14
 57c:	ff 92       	push	r15
	ADC_Start();
 57e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ADC_Start>
	while(ADC_conversion_completed()); //wait for conversion to finish
 582:	0e 94 df 00 	call	0x1be	; 0x1be <ADC_conversion_completed>
 586:	89 2b       	or	r24, r25
 588:	e1 f7       	brne	.-8      	; 0x582 <TERMOMETRO_get_temperatura_real+0xc>
	ADC_flag_reset();
 58a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <ADC_flag_reset>
	
	float temperatura=ADC_get_voltaje_real()*100;
 58e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <ADC_get_voltaje_real>
 592:	20 e0       	ldi	r18, 0x00	; 0
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	48 ec       	ldi	r20, 0xC8	; 200
 598:	52 e4       	ldi	r21, 0x42	; 66
 59a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__mulsf3>
 59e:	6b 01       	movw	r12, r22
 5a0:	7c 01       	movw	r14, r24
	
	if (temperatura>50){temperatura=50;}
 5a2:	20 e0       	ldi	r18, 0x00	; 0
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	48 e4       	ldi	r20, 0x48	; 72
 5a8:	52 e4       	ldi	r21, 0x42	; 66
 5aa:	0e 94 ba 03 	call	0x774	; 0x774 <__gesf2>
 5ae:	18 16       	cp	r1, r24
 5b0:	6c f0       	brlt	.+26     	; 0x5cc <TERMOMETRO_get_temperatura_real+0x56>
	if (temperatura<0){temperatura=0;}
 5b2:	20 e0       	ldi	r18, 0x00	; 0
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	a9 01       	movw	r20, r18
 5b8:	c7 01       	movw	r24, r14
 5ba:	b6 01       	movw	r22, r12
 5bc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__cmpsf2>
 5c0:	88 23       	and	r24, r24
 5c2:	64 f4       	brge	.+24     	; 0x5dc <TERMOMETRO_get_temperatura_real+0x66>
 5c4:	c1 2c       	mov	r12, r1
 5c6:	d1 2c       	mov	r13, r1
 5c8:	76 01       	movw	r14, r12
 5ca:	08 c0       	rjmp	.+16     	; 0x5dc <TERMOMETRO_get_temperatura_real+0x66>
	while(ADC_conversion_completed()); //wait for conversion to finish
	ADC_flag_reset();
	
	float temperatura=ADC_get_voltaje_real()*100;
	
	if (temperatura>50){temperatura=50;}
 5cc:	0f 2e       	mov	r0, r31
 5ce:	c1 2c       	mov	r12, r1
 5d0:	d1 2c       	mov	r13, r1
 5d2:	f8 e4       	ldi	r31, 0x48	; 72
 5d4:	ef 2e       	mov	r14, r31
 5d6:	f2 e4       	ldi	r31, 0x42	; 66
 5d8:	ff 2e       	mov	r15, r31
 5da:	f0 2d       	mov	r31, r0
	if (temperatura<0){temperatura=0;}
	
	return temperatura;  //el 100 viene de 1/(10*10^-3)
 5dc:	c7 01       	movw	r24, r14
 5de:	b6 01       	movw	r22, r12
 5e0:	ff 90       	pop	r15
 5e2:	ef 90       	pop	r14
 5e4:	df 90       	pop	r13
 5e6:	cf 90       	pop	r12
 5e8:	08 95       	ret

000005ea <__cmpsf2>:
 5ea:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_cmp>
 5ee:	08 f4       	brcc	.+2      	; 0x5f2 <__cmpsf2+0x8>
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	08 95       	ret

000005f4 <__fixsfsi>:
 5f4:	0e 94 01 03 	call	0x602	; 0x602 <__fixunssfsi>
 5f8:	68 94       	set
 5fa:	b1 11       	cpse	r27, r1
 5fc:	0c 94 b4 03 	jmp	0x768	; 0x768 <__fp_szero>
 600:	08 95       	ret

00000602 <__fixunssfsi>:
 602:	0e 94 99 03 	call	0x732	; 0x732 <__fp_splitA>
 606:	88 f0       	brcs	.+34     	; 0x62a <__fixunssfsi+0x28>
 608:	9f 57       	subi	r25, 0x7F	; 127
 60a:	98 f0       	brcs	.+38     	; 0x632 <__fixunssfsi+0x30>
 60c:	b9 2f       	mov	r27, r25
 60e:	99 27       	eor	r25, r25
 610:	b7 51       	subi	r27, 0x17	; 23
 612:	b0 f0       	brcs	.+44     	; 0x640 <__fixunssfsi+0x3e>
 614:	e1 f0       	breq	.+56     	; 0x64e <__fixunssfsi+0x4c>
 616:	66 0f       	add	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	88 1f       	adc	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	1a f0       	brmi	.+6      	; 0x626 <__fixunssfsi+0x24>
 620:	ba 95       	dec	r27
 622:	c9 f7       	brne	.-14     	; 0x616 <__fixunssfsi+0x14>
 624:	14 c0       	rjmp	.+40     	; 0x64e <__fixunssfsi+0x4c>
 626:	b1 30       	cpi	r27, 0x01	; 1
 628:	91 f0       	breq	.+36     	; 0x64e <__fixunssfsi+0x4c>
 62a:	0e 94 b3 03 	call	0x766	; 0x766 <__fp_zero>
 62e:	b1 e0       	ldi	r27, 0x01	; 1
 630:	08 95       	ret
 632:	0c 94 b3 03 	jmp	0x766	; 0x766 <__fp_zero>
 636:	67 2f       	mov	r22, r23
 638:	78 2f       	mov	r23, r24
 63a:	88 27       	eor	r24, r24
 63c:	b8 5f       	subi	r27, 0xF8	; 248
 63e:	39 f0       	breq	.+14     	; 0x64e <__fixunssfsi+0x4c>
 640:	b9 3f       	cpi	r27, 0xF9	; 249
 642:	cc f3       	brlt	.-14     	; 0x636 <__fixunssfsi+0x34>
 644:	86 95       	lsr	r24
 646:	77 95       	ror	r23
 648:	67 95       	ror	r22
 64a:	b3 95       	inc	r27
 64c:	d9 f7       	brne	.-10     	; 0x644 <__fixunssfsi+0x42>
 64e:	3e f4       	brtc	.+14     	; 0x65e <__fixunssfsi+0x5c>
 650:	90 95       	com	r25
 652:	80 95       	com	r24
 654:	70 95       	com	r23
 656:	61 95       	neg	r22
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	8f 4f       	sbci	r24, 0xFF	; 255
 65c:	9f 4f       	sbci	r25, 0xFF	; 255
 65e:	08 95       	ret

00000660 <__floatunsisf>:
 660:	e8 94       	clt
 662:	09 c0       	rjmp	.+18     	; 0x676 <__floatsisf+0x12>

00000664 <__floatsisf>:
 664:	97 fb       	bst	r25, 7
 666:	3e f4       	brtc	.+14     	; 0x676 <__floatsisf+0x12>
 668:	90 95       	com	r25
 66a:	80 95       	com	r24
 66c:	70 95       	com	r23
 66e:	61 95       	neg	r22
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	8f 4f       	sbci	r24, 0xFF	; 255
 674:	9f 4f       	sbci	r25, 0xFF	; 255
 676:	99 23       	and	r25, r25
 678:	a9 f0       	breq	.+42     	; 0x6a4 <__floatsisf+0x40>
 67a:	f9 2f       	mov	r31, r25
 67c:	96 e9       	ldi	r25, 0x96	; 150
 67e:	bb 27       	eor	r27, r27
 680:	93 95       	inc	r25
 682:	f6 95       	lsr	r31
 684:	87 95       	ror	r24
 686:	77 95       	ror	r23
 688:	67 95       	ror	r22
 68a:	b7 95       	ror	r27
 68c:	f1 11       	cpse	r31, r1
 68e:	f8 cf       	rjmp	.-16     	; 0x680 <__floatsisf+0x1c>
 690:	fa f4       	brpl	.+62     	; 0x6d0 <__floatsisf+0x6c>
 692:	bb 0f       	add	r27, r27
 694:	11 f4       	brne	.+4      	; 0x69a <__floatsisf+0x36>
 696:	60 ff       	sbrs	r22, 0
 698:	1b c0       	rjmp	.+54     	; 0x6d0 <__floatsisf+0x6c>
 69a:	6f 5f       	subi	r22, 0xFF	; 255
 69c:	7f 4f       	sbci	r23, 0xFF	; 255
 69e:	8f 4f       	sbci	r24, 0xFF	; 255
 6a0:	9f 4f       	sbci	r25, 0xFF	; 255
 6a2:	16 c0       	rjmp	.+44     	; 0x6d0 <__floatsisf+0x6c>
 6a4:	88 23       	and	r24, r24
 6a6:	11 f0       	breq	.+4      	; 0x6ac <__floatsisf+0x48>
 6a8:	96 e9       	ldi	r25, 0x96	; 150
 6aa:	11 c0       	rjmp	.+34     	; 0x6ce <__floatsisf+0x6a>
 6ac:	77 23       	and	r23, r23
 6ae:	21 f0       	breq	.+8      	; 0x6b8 <__floatsisf+0x54>
 6b0:	9e e8       	ldi	r25, 0x8E	; 142
 6b2:	87 2f       	mov	r24, r23
 6b4:	76 2f       	mov	r23, r22
 6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <__floatsisf+0x5e>
 6b8:	66 23       	and	r22, r22
 6ba:	71 f0       	breq	.+28     	; 0x6d8 <__floatsisf+0x74>
 6bc:	96 e8       	ldi	r25, 0x86	; 134
 6be:	86 2f       	mov	r24, r22
 6c0:	70 e0       	ldi	r23, 0x00	; 0
 6c2:	60 e0       	ldi	r22, 0x00	; 0
 6c4:	2a f0       	brmi	.+10     	; 0x6d0 <__floatsisf+0x6c>
 6c6:	9a 95       	dec	r25
 6c8:	66 0f       	add	r22, r22
 6ca:	77 1f       	adc	r23, r23
 6cc:	88 1f       	adc	r24, r24
 6ce:	da f7       	brpl	.-10     	; 0x6c6 <__floatsisf+0x62>
 6d0:	88 0f       	add	r24, r24
 6d2:	96 95       	lsr	r25
 6d4:	87 95       	ror	r24
 6d6:	97 f9       	bld	r25, 7
 6d8:	08 95       	ret

000006da <__fp_cmp>:
 6da:	99 0f       	add	r25, r25
 6dc:	00 08       	sbc	r0, r0
 6de:	55 0f       	add	r21, r21
 6e0:	aa 0b       	sbc	r26, r26
 6e2:	e0 e8       	ldi	r30, 0x80	; 128
 6e4:	fe ef       	ldi	r31, 0xFE	; 254
 6e6:	16 16       	cp	r1, r22
 6e8:	17 06       	cpc	r1, r23
 6ea:	e8 07       	cpc	r30, r24
 6ec:	f9 07       	cpc	r31, r25
 6ee:	c0 f0       	brcs	.+48     	; 0x720 <__fp_cmp+0x46>
 6f0:	12 16       	cp	r1, r18
 6f2:	13 06       	cpc	r1, r19
 6f4:	e4 07       	cpc	r30, r20
 6f6:	f5 07       	cpc	r31, r21
 6f8:	98 f0       	brcs	.+38     	; 0x720 <__fp_cmp+0x46>
 6fa:	62 1b       	sub	r22, r18
 6fc:	73 0b       	sbc	r23, r19
 6fe:	84 0b       	sbc	r24, r20
 700:	95 0b       	sbc	r25, r21
 702:	39 f4       	brne	.+14     	; 0x712 <__fp_cmp+0x38>
 704:	0a 26       	eor	r0, r26
 706:	61 f0       	breq	.+24     	; 0x720 <__fp_cmp+0x46>
 708:	23 2b       	or	r18, r19
 70a:	24 2b       	or	r18, r20
 70c:	25 2b       	or	r18, r21
 70e:	21 f4       	brne	.+8      	; 0x718 <__fp_cmp+0x3e>
 710:	08 95       	ret
 712:	0a 26       	eor	r0, r26
 714:	09 f4       	brne	.+2      	; 0x718 <__fp_cmp+0x3e>
 716:	a1 40       	sbci	r26, 0x01	; 1
 718:	a6 95       	lsr	r26
 71a:	8f ef       	ldi	r24, 0xFF	; 255
 71c:	81 1d       	adc	r24, r1
 71e:	81 1d       	adc	r24, r1
 720:	08 95       	ret

00000722 <__fp_split3>:
 722:	57 fd       	sbrc	r21, 7
 724:	90 58       	subi	r25, 0x80	; 128
 726:	44 0f       	add	r20, r20
 728:	55 1f       	adc	r21, r21
 72a:	59 f0       	breq	.+22     	; 0x742 <__fp_splitA+0x10>
 72c:	5f 3f       	cpi	r21, 0xFF	; 255
 72e:	71 f0       	breq	.+28     	; 0x74c <__fp_splitA+0x1a>
 730:	47 95       	ror	r20

00000732 <__fp_splitA>:
 732:	88 0f       	add	r24, r24
 734:	97 fb       	bst	r25, 7
 736:	99 1f       	adc	r25, r25
 738:	61 f0       	breq	.+24     	; 0x752 <__fp_splitA+0x20>
 73a:	9f 3f       	cpi	r25, 0xFF	; 255
 73c:	79 f0       	breq	.+30     	; 0x75c <__fp_splitA+0x2a>
 73e:	87 95       	ror	r24
 740:	08 95       	ret
 742:	12 16       	cp	r1, r18
 744:	13 06       	cpc	r1, r19
 746:	14 06       	cpc	r1, r20
 748:	55 1f       	adc	r21, r21
 74a:	f2 cf       	rjmp	.-28     	; 0x730 <__fp_split3+0xe>
 74c:	46 95       	lsr	r20
 74e:	f1 df       	rcall	.-30     	; 0x732 <__fp_splitA>
 750:	08 c0       	rjmp	.+16     	; 0x762 <__fp_splitA+0x30>
 752:	16 16       	cp	r1, r22
 754:	17 06       	cpc	r1, r23
 756:	18 06       	cpc	r1, r24
 758:	99 1f       	adc	r25, r25
 75a:	f1 cf       	rjmp	.-30     	; 0x73e <__fp_splitA+0xc>
 75c:	86 95       	lsr	r24
 75e:	71 05       	cpc	r23, r1
 760:	61 05       	cpc	r22, r1
 762:	08 94       	sec
 764:	08 95       	ret

00000766 <__fp_zero>:
 766:	e8 94       	clt

00000768 <__fp_szero>:
 768:	bb 27       	eor	r27, r27
 76a:	66 27       	eor	r22, r22
 76c:	77 27       	eor	r23, r23
 76e:	cb 01       	movw	r24, r22
 770:	97 f9       	bld	r25, 7
 772:	08 95       	ret

00000774 <__gesf2>:
 774:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_cmp>
 778:	08 f4       	brcc	.+2      	; 0x77c <__gesf2+0x8>
 77a:	8f ef       	ldi	r24, 0xFF	; 255
 77c:	08 95       	ret

0000077e <modf>:
 77e:	fa 01       	movw	r30, r20
 780:	dc 01       	movw	r26, r24
 782:	aa 0f       	add	r26, r26
 784:	bb 1f       	adc	r27, r27
 786:	9b 01       	movw	r18, r22
 788:	ac 01       	movw	r20, r24
 78a:	bf 57       	subi	r27, 0x7F	; 127
 78c:	28 f4       	brcc	.+10     	; 0x798 <modf+0x1a>
 78e:	22 27       	eor	r18, r18
 790:	33 27       	eor	r19, r19
 792:	44 27       	eor	r20, r20
 794:	50 78       	andi	r21, 0x80	; 128
 796:	20 c0       	rjmp	.+64     	; 0x7d8 <modf+0x5a>
 798:	b7 51       	subi	r27, 0x17	; 23
 79a:	90 f4       	brcc	.+36     	; 0x7c0 <modf+0x42>
 79c:	ab 2f       	mov	r26, r27
 79e:	00 24       	eor	r0, r0
 7a0:	46 95       	lsr	r20
 7a2:	37 95       	ror	r19
 7a4:	27 95       	ror	r18
 7a6:	01 1c       	adc	r0, r1
 7a8:	a3 95       	inc	r26
 7aa:	d2 f3       	brmi	.-12     	; 0x7a0 <modf+0x22>
 7ac:	00 20       	and	r0, r0
 7ae:	71 f0       	breq	.+28     	; 0x7cc <modf+0x4e>
 7b0:	22 0f       	add	r18, r18
 7b2:	33 1f       	adc	r19, r19
 7b4:	44 1f       	adc	r20, r20
 7b6:	b3 95       	inc	r27
 7b8:	da f3       	brmi	.-10     	; 0x7b0 <modf+0x32>
 7ba:	0e d0       	rcall	.+28     	; 0x7d8 <modf+0x5a>
 7bc:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__subsf3>
 7c0:	61 30       	cpi	r22, 0x01	; 1
 7c2:	71 05       	cpc	r23, r1
 7c4:	a0 e8       	ldi	r26, 0x80	; 128
 7c6:	8a 07       	cpc	r24, r26
 7c8:	b9 46       	sbci	r27, 0x69	; 105
 7ca:	30 f4       	brcc	.+12     	; 0x7d8 <modf+0x5a>
 7cc:	9b 01       	movw	r18, r22
 7ce:	ac 01       	movw	r20, r24
 7d0:	66 27       	eor	r22, r22
 7d2:	77 27       	eor	r23, r23
 7d4:	88 27       	eor	r24, r24
 7d6:	90 78       	andi	r25, 0x80	; 128
 7d8:	30 96       	adiw	r30, 0x00	; 0
 7da:	21 f0       	breq	.+8      	; 0x7e4 <modf+0x66>
 7dc:	20 83       	st	Z, r18
 7de:	31 83       	std	Z+1, r19	; 0x01
 7e0:	42 83       	std	Z+2, r20	; 0x02
 7e2:	53 83       	std	Z+3, r21	; 0x03
 7e4:	08 95       	ret

000007e6 <__mulsf3>:
 7e6:	0e 94 06 04 	call	0x80c	; 0x80c <__mulsf3x>
 7ea:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__fp_round>
 7ee:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fp_pscA>
 7f2:	38 f0       	brcs	.+14     	; 0x802 <__mulsf3+0x1c>
 7f4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__fp_pscB>
 7f8:	20 f0       	brcs	.+8      	; 0x802 <__mulsf3+0x1c>
 7fa:	95 23       	and	r25, r21
 7fc:	11 f0       	breq	.+4      	; 0x802 <__mulsf3+0x1c>
 7fe:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__fp_inf>
 802:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_nan>
 806:	11 24       	eor	r1, r1
 808:	0c 94 b4 03 	jmp	0x768	; 0x768 <__fp_szero>

0000080c <__mulsf3x>:
 80c:	0e 94 91 03 	call	0x722	; 0x722 <__fp_split3>
 810:	70 f3       	brcs	.-36     	; 0x7ee <__mulsf3+0x8>

00000812 <__mulsf3_pse>:
 812:	95 9f       	mul	r25, r21
 814:	c1 f3       	breq	.-16     	; 0x806 <__mulsf3+0x20>
 816:	95 0f       	add	r25, r21
 818:	50 e0       	ldi	r21, 0x00	; 0
 81a:	55 1f       	adc	r21, r21
 81c:	62 9f       	mul	r22, r18
 81e:	f0 01       	movw	r30, r0
 820:	72 9f       	mul	r23, r18
 822:	bb 27       	eor	r27, r27
 824:	f0 0d       	add	r31, r0
 826:	b1 1d       	adc	r27, r1
 828:	63 9f       	mul	r22, r19
 82a:	aa 27       	eor	r26, r26
 82c:	f0 0d       	add	r31, r0
 82e:	b1 1d       	adc	r27, r1
 830:	aa 1f       	adc	r26, r26
 832:	64 9f       	mul	r22, r20
 834:	66 27       	eor	r22, r22
 836:	b0 0d       	add	r27, r0
 838:	a1 1d       	adc	r26, r1
 83a:	66 1f       	adc	r22, r22
 83c:	82 9f       	mul	r24, r18
 83e:	22 27       	eor	r18, r18
 840:	b0 0d       	add	r27, r0
 842:	a1 1d       	adc	r26, r1
 844:	62 1f       	adc	r22, r18
 846:	73 9f       	mul	r23, r19
 848:	b0 0d       	add	r27, r0
 84a:	a1 1d       	adc	r26, r1
 84c:	62 1f       	adc	r22, r18
 84e:	83 9f       	mul	r24, r19
 850:	a0 0d       	add	r26, r0
 852:	61 1d       	adc	r22, r1
 854:	22 1f       	adc	r18, r18
 856:	74 9f       	mul	r23, r20
 858:	33 27       	eor	r19, r19
 85a:	a0 0d       	add	r26, r0
 85c:	61 1d       	adc	r22, r1
 85e:	23 1f       	adc	r18, r19
 860:	84 9f       	mul	r24, r20
 862:	60 0d       	add	r22, r0
 864:	21 1d       	adc	r18, r1
 866:	82 2f       	mov	r24, r18
 868:	76 2f       	mov	r23, r22
 86a:	6a 2f       	mov	r22, r26
 86c:	11 24       	eor	r1, r1
 86e:	9f 57       	subi	r25, 0x7F	; 127
 870:	50 40       	sbci	r21, 0x00	; 0
 872:	9a f0       	brmi	.+38     	; 0x89a <__mulsf3_pse+0x88>
 874:	f1 f0       	breq	.+60     	; 0x8b2 <__mulsf3_pse+0xa0>
 876:	88 23       	and	r24, r24
 878:	4a f0       	brmi	.+18     	; 0x88c <__mulsf3_pse+0x7a>
 87a:	ee 0f       	add	r30, r30
 87c:	ff 1f       	adc	r31, r31
 87e:	bb 1f       	adc	r27, r27
 880:	66 1f       	adc	r22, r22
 882:	77 1f       	adc	r23, r23
 884:	88 1f       	adc	r24, r24
 886:	91 50       	subi	r25, 0x01	; 1
 888:	50 40       	sbci	r21, 0x00	; 0
 88a:	a9 f7       	brne	.-22     	; 0x876 <__mulsf3_pse+0x64>
 88c:	9e 3f       	cpi	r25, 0xFE	; 254
 88e:	51 05       	cpc	r21, r1
 890:	80 f0       	brcs	.+32     	; 0x8b2 <__mulsf3_pse+0xa0>
 892:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__fp_inf>
 896:	0c 94 b4 03 	jmp	0x768	; 0x768 <__fp_szero>
 89a:	5f 3f       	cpi	r21, 0xFF	; 255
 89c:	e4 f3       	brlt	.-8      	; 0x896 <__mulsf3_pse+0x84>
 89e:	98 3e       	cpi	r25, 0xE8	; 232
 8a0:	d4 f3       	brlt	.-12     	; 0x896 <__mulsf3_pse+0x84>
 8a2:	86 95       	lsr	r24
 8a4:	77 95       	ror	r23
 8a6:	67 95       	ror	r22
 8a8:	b7 95       	ror	r27
 8aa:	f7 95       	ror	r31
 8ac:	e7 95       	ror	r30
 8ae:	9f 5f       	subi	r25, 0xFF	; 255
 8b0:	c1 f7       	brne	.-16     	; 0x8a2 <__mulsf3_pse+0x90>
 8b2:	fe 2b       	or	r31, r30
 8b4:	88 0f       	add	r24, r24
 8b6:	91 1d       	adc	r25, r1
 8b8:	96 95       	lsr	r25
 8ba:	87 95       	ror	r24
 8bc:	97 f9       	bld	r25, 7
 8be:	08 95       	ret

000008c0 <__subsf3>:
 8c0:	50 58       	subi	r21, 0x80	; 128

000008c2 <__addsf3>:
 8c2:	bb 27       	eor	r27, r27
 8c4:	aa 27       	eor	r26, r26
 8c6:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__addsf3x>
 8ca:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__fp_round>
 8ce:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fp_pscA>
 8d2:	38 f0       	brcs	.+14     	; 0x8e2 <__addsf3+0x20>
 8d4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__fp_pscB>
 8d8:	20 f0       	brcs	.+8      	; 0x8e2 <__addsf3+0x20>
 8da:	39 f4       	brne	.+14     	; 0x8ea <__addsf3+0x28>
 8dc:	9f 3f       	cpi	r25, 0xFF	; 255
 8de:	19 f4       	brne	.+6      	; 0x8e6 <__addsf3+0x24>
 8e0:	26 f4       	brtc	.+8      	; 0x8ea <__addsf3+0x28>
 8e2:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_nan>
 8e6:	0e f4       	brtc	.+2      	; 0x8ea <__addsf3+0x28>
 8e8:	e0 95       	com	r30
 8ea:	e7 fb       	bst	r30, 7
 8ec:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__fp_inf>

000008f0 <__addsf3x>:
 8f0:	e9 2f       	mov	r30, r25
 8f2:	0e 94 91 03 	call	0x722	; 0x722 <__fp_split3>
 8f6:	58 f3       	brcs	.-42     	; 0x8ce <__addsf3+0xc>
 8f8:	ba 17       	cp	r27, r26
 8fa:	62 07       	cpc	r22, r18
 8fc:	73 07       	cpc	r23, r19
 8fe:	84 07       	cpc	r24, r20
 900:	95 07       	cpc	r25, r21
 902:	20 f0       	brcs	.+8      	; 0x90c <__stack+0xd>
 904:	79 f4       	brne	.+30     	; 0x924 <__stack+0x25>
 906:	a6 f5       	brtc	.+104    	; 0x970 <__stack+0x71>
 908:	0c 94 b3 03 	jmp	0x766	; 0x766 <__fp_zero>
 90c:	0e f4       	brtc	.+2      	; 0x910 <__stack+0x11>
 90e:	e0 95       	com	r30
 910:	0b 2e       	mov	r0, r27
 912:	ba 2f       	mov	r27, r26
 914:	a0 2d       	mov	r26, r0
 916:	0b 01       	movw	r0, r22
 918:	b9 01       	movw	r22, r18
 91a:	90 01       	movw	r18, r0
 91c:	0c 01       	movw	r0, r24
 91e:	ca 01       	movw	r24, r20
 920:	a0 01       	movw	r20, r0
 922:	11 24       	eor	r1, r1
 924:	ff 27       	eor	r31, r31
 926:	59 1b       	sub	r21, r25
 928:	99 f0       	breq	.+38     	; 0x950 <__stack+0x51>
 92a:	59 3f       	cpi	r21, 0xF9	; 249
 92c:	50 f4       	brcc	.+20     	; 0x942 <__stack+0x43>
 92e:	50 3e       	cpi	r21, 0xE0	; 224
 930:	68 f1       	brcs	.+90     	; 0x98c <__stack+0x8d>
 932:	1a 16       	cp	r1, r26
 934:	f0 40       	sbci	r31, 0x00	; 0
 936:	a2 2f       	mov	r26, r18
 938:	23 2f       	mov	r18, r19
 93a:	34 2f       	mov	r19, r20
 93c:	44 27       	eor	r20, r20
 93e:	58 5f       	subi	r21, 0xF8	; 248
 940:	f3 cf       	rjmp	.-26     	; 0x928 <__stack+0x29>
 942:	46 95       	lsr	r20
 944:	37 95       	ror	r19
 946:	27 95       	ror	r18
 948:	a7 95       	ror	r26
 94a:	f0 40       	sbci	r31, 0x00	; 0
 94c:	53 95       	inc	r21
 94e:	c9 f7       	brne	.-14     	; 0x942 <__stack+0x43>
 950:	7e f4       	brtc	.+30     	; 0x970 <__stack+0x71>
 952:	1f 16       	cp	r1, r31
 954:	ba 0b       	sbc	r27, r26
 956:	62 0b       	sbc	r22, r18
 958:	73 0b       	sbc	r23, r19
 95a:	84 0b       	sbc	r24, r20
 95c:	ba f0       	brmi	.+46     	; 0x98c <__stack+0x8d>
 95e:	91 50       	subi	r25, 0x01	; 1
 960:	a1 f0       	breq	.+40     	; 0x98a <__stack+0x8b>
 962:	ff 0f       	add	r31, r31
 964:	bb 1f       	adc	r27, r27
 966:	66 1f       	adc	r22, r22
 968:	77 1f       	adc	r23, r23
 96a:	88 1f       	adc	r24, r24
 96c:	c2 f7       	brpl	.-16     	; 0x95e <__stack+0x5f>
 96e:	0e c0       	rjmp	.+28     	; 0x98c <__stack+0x8d>
 970:	ba 0f       	add	r27, r26
 972:	62 1f       	adc	r22, r18
 974:	73 1f       	adc	r23, r19
 976:	84 1f       	adc	r24, r20
 978:	48 f4       	brcc	.+18     	; 0x98c <__stack+0x8d>
 97a:	87 95       	ror	r24
 97c:	77 95       	ror	r23
 97e:	67 95       	ror	r22
 980:	b7 95       	ror	r27
 982:	f7 95       	ror	r31
 984:	9e 3f       	cpi	r25, 0xFE	; 254
 986:	08 f0       	brcs	.+2      	; 0x98a <__stack+0x8b>
 988:	b0 cf       	rjmp	.-160    	; 0x8ea <__addsf3+0x28>
 98a:	93 95       	inc	r25
 98c:	88 0f       	add	r24, r24
 98e:	08 f0       	brcs	.+2      	; 0x992 <__stack+0x93>
 990:	99 27       	eor	r25, r25
 992:	ee 0f       	add	r30, r30
 994:	97 95       	ror	r25
 996:	87 95       	ror	r24
 998:	08 95       	ret

0000099a <__fp_inf>:
 99a:	97 f9       	bld	r25, 7
 99c:	9f 67       	ori	r25, 0x7F	; 127
 99e:	80 e8       	ldi	r24, 0x80	; 128
 9a0:	70 e0       	ldi	r23, 0x00	; 0
 9a2:	60 e0       	ldi	r22, 0x00	; 0
 9a4:	08 95       	ret

000009a6 <__fp_nan>:
 9a6:	9f ef       	ldi	r25, 0xFF	; 255
 9a8:	80 ec       	ldi	r24, 0xC0	; 192
 9aa:	08 95       	ret

000009ac <__fp_pscA>:
 9ac:	00 24       	eor	r0, r0
 9ae:	0a 94       	dec	r0
 9b0:	16 16       	cp	r1, r22
 9b2:	17 06       	cpc	r1, r23
 9b4:	18 06       	cpc	r1, r24
 9b6:	09 06       	cpc	r0, r25
 9b8:	08 95       	ret

000009ba <__fp_pscB>:
 9ba:	00 24       	eor	r0, r0
 9bc:	0a 94       	dec	r0
 9be:	12 16       	cp	r1, r18
 9c0:	13 06       	cpc	r1, r19
 9c2:	14 06       	cpc	r1, r20
 9c4:	05 06       	cpc	r0, r21
 9c6:	08 95       	ret

000009c8 <__fp_round>:
 9c8:	09 2e       	mov	r0, r25
 9ca:	03 94       	inc	r0
 9cc:	00 0c       	add	r0, r0
 9ce:	11 f4       	brne	.+4      	; 0x9d4 <__fp_round+0xc>
 9d0:	88 23       	and	r24, r24
 9d2:	52 f0       	brmi	.+20     	; 0x9e8 <__fp_round+0x20>
 9d4:	bb 0f       	add	r27, r27
 9d6:	40 f4       	brcc	.+16     	; 0x9e8 <__fp_round+0x20>
 9d8:	bf 2b       	or	r27, r31
 9da:	11 f4       	brne	.+4      	; 0x9e0 <__fp_round+0x18>
 9dc:	60 ff       	sbrs	r22, 0
 9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__fp_round+0x20>
 9e0:	6f 5f       	subi	r22, 0xFF	; 255
 9e2:	7f 4f       	sbci	r23, 0xFF	; 255
 9e4:	8f 4f       	sbci	r24, 0xFF	; 255
 9e6:	9f 4f       	sbci	r25, 0xFF	; 255
 9e8:	08 95       	ret

000009ea <__itoa_ncheck>:
 9ea:	bb 27       	eor	r27, r27
 9ec:	4a 30       	cpi	r20, 0x0A	; 10
 9ee:	31 f4       	brne	.+12     	; 0x9fc <__itoa_ncheck+0x12>
 9f0:	99 23       	and	r25, r25
 9f2:	22 f4       	brpl	.+8      	; 0x9fc <__itoa_ncheck+0x12>
 9f4:	bd e2       	ldi	r27, 0x2D	; 45
 9f6:	90 95       	com	r25
 9f8:	81 95       	neg	r24
 9fa:	9f 4f       	sbci	r25, 0xFF	; 255
 9fc:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__utoa_common>

00000a00 <__utoa_ncheck>:
 a00:	bb 27       	eor	r27, r27

00000a02 <__utoa_common>:
 a02:	fb 01       	movw	r30, r22
 a04:	55 27       	eor	r21, r21
 a06:	aa 27       	eor	r26, r26
 a08:	88 0f       	add	r24, r24
 a0a:	99 1f       	adc	r25, r25
 a0c:	aa 1f       	adc	r26, r26
 a0e:	a4 17       	cp	r26, r20
 a10:	10 f0       	brcs	.+4      	; 0xa16 <__utoa_common+0x14>
 a12:	a4 1b       	sub	r26, r20
 a14:	83 95       	inc	r24
 a16:	50 51       	subi	r21, 0x10	; 16
 a18:	b9 f7       	brne	.-18     	; 0xa08 <__utoa_common+0x6>
 a1a:	a0 5d       	subi	r26, 0xD0	; 208
 a1c:	aa 33       	cpi	r26, 0x3A	; 58
 a1e:	08 f0       	brcs	.+2      	; 0xa22 <__utoa_common+0x20>
 a20:	a9 5d       	subi	r26, 0xD9	; 217
 a22:	a1 93       	st	Z+, r26
 a24:	00 97       	sbiw	r24, 0x00	; 0
 a26:	79 f7       	brne	.-34     	; 0xa06 <__utoa_common+0x4>
 a28:	b1 11       	cpse	r27, r1
 a2a:	b1 93       	st	Z+, r27
 a2c:	11 92       	st	Z+, r1
 a2e:	cb 01       	movw	r24, r22
 a30:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <strrev>

00000a34 <strrev>:
 a34:	dc 01       	movw	r26, r24
 a36:	fc 01       	movw	r30, r24
 a38:	67 2f       	mov	r22, r23
 a3a:	71 91       	ld	r23, Z+
 a3c:	77 23       	and	r23, r23
 a3e:	e1 f7       	brne	.-8      	; 0xa38 <strrev+0x4>
 a40:	32 97       	sbiw	r30, 0x02	; 2
 a42:	04 c0       	rjmp	.+8      	; 0xa4c <strrev+0x18>
 a44:	7c 91       	ld	r23, X
 a46:	6d 93       	st	X+, r22
 a48:	70 83       	st	Z, r23
 a4a:	62 91       	ld	r22, -Z
 a4c:	ae 17       	cp	r26, r30
 a4e:	bf 07       	cpc	r27, r31
 a50:	c8 f3       	brcs	.-14     	; 0xa44 <strrev+0x10>
 a52:	08 95       	ret

00000a54 <_exit>:
 a54:	f8 94       	cli

00000a56 <__stop_program>:
 a56:	ff cf       	rjmp	.-2      	; 0xa56 <__stop_program>
