
Control_Temperatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000119b  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000637  00000000  00000000  0000174f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000af4  00000000  00000000  00001d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d8  00000000  00000000  0000287c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000487  00000000  00000000  00002c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e9d  00000000  00000000  000030db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00003f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 42 01 	call	0x284	; 0x284 <main>
  8e:	0c 94 a5 01 	jmp	0x34a	; 0x34a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ADC_preInit>:
	ADCSRA |= (1<<ADIF); //borrar flag
}

int ADC_get_resultado_alto(void){
	return  ADCH;//give the low byte
}
  96:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  9a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  9e:	08 95       	ret

000000a0 <ADC_enabled>:
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	80 83       	st	Z, r24
  aa:	08 95       	ret

000000ac <ADC_preescaler>:
  ac:	80 31       	cpi	r24, 0x10	; 16
  ae:	91 05       	cpc	r25, r1
  b0:	29 f1       	breq	.+74     	; 0xfc <ADC_preescaler+0x50>
  b2:	4c f4       	brge	.+18     	; 0xc6 <ADC_preescaler+0x1a>
  b4:	84 30       	cpi	r24, 0x04	; 4
  b6:	91 05       	cpc	r25, r1
  b8:	a9 f0       	breq	.+42     	; 0xe4 <ADC_preescaler+0x38>
  ba:	88 30       	cpi	r24, 0x08	; 8
  bc:	91 05       	cpc	r25, r1
  be:	c1 f0       	breq	.+48     	; 0xf0 <ADC_preescaler+0x44>
  c0:	02 97       	sbiw	r24, 0x02	; 2
  c2:	a1 f5       	brne	.+104    	; 0x12c <ADC_preescaler+0x80>
  c4:	09 c0       	rjmp	.+18     	; 0xd8 <ADC_preescaler+0x2c>
  c6:	80 34       	cpi	r24, 0x40	; 64
  c8:	91 05       	cpc	r25, r1
  ca:	21 f1       	breq	.+72     	; 0x114 <ADC_preescaler+0x68>
  cc:	80 38       	cpi	r24, 0x80	; 128
  ce:	91 05       	cpc	r25, r1
  d0:	39 f1       	breq	.+78     	; 0x120 <ADC_preescaler+0x74>
  d2:	80 97       	sbiw	r24, 0x20	; 32
  d4:	59 f5       	brne	.+86     	; 0x12c <ADC_preescaler+0x80>
  d6:	18 c0       	rjmp	.+48     	; 0x108 <ADC_preescaler+0x5c>
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	83 60       	ori	r24, 0x03	; 3
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	84 60       	ori	r24, 0x04	; 4
 104:	80 83       	st	Z, r24
 106:	08 95       	ret
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	85 60       	ori	r24, 0x05	; 5
 110:	80 83       	st	Z, r24
 112:	08 95       	ret
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	86 60       	ori	r24, 0x06	; 6
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret
 120:	ea e7       	ldi	r30, 0x7A	; 122
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	87 60       	ori	r24, 0x07	; 7
 128:	80 83       	st	Z, r24
 12a:	08 95       	ret
 12c:	ea e7       	ldi	r30, 0x7A	; 122
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <ADC_select_pin>:
 136:	ec e7       	ldi	r30, 0x7C	; 124
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	90 81       	ld	r25, Z
 13c:	89 2b       	or	r24, r25
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <ADC_init>:
 142:	0e 94 4b 00 	call	0x96	; 0x96 <ADC_preInit>
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 14c:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_enabled>
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 56 00 	call	0xac	; 0xac <ADC_preescaler>
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 9b 00 	call	0x136	; 0x136 <ADC_select_pin>
 160:	08 95       	ret

00000162 <ADC_Start>:
 162:	ea e7       	ldi	r30, 0x7A	; 122
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <ADC_conversion_completed>:
 16e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 172:	82 95       	swap	r24
 174:	8f 70       	andi	r24, 0x0F	; 15
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	89 27       	eor	r24, r25
 17a:	81 70       	andi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	08 95       	ret

00000180 <ADC_flag_reset>:
 180:	ea e7       	ldi	r30, 0x7A	; 122
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 61       	ori	r24, 0x10	; 16
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <ADC_get_resultado_bajo>:
int ADC_get_resultado_bajo(void){
	return  ADCL;//give the high byte
 18c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
}
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	08 95       	ret

00000194 <mostrarString>:
#include <avr/io.h>
#include "lcd.h"
uint8_t x = 16;

void mostrarString(const uint8_t *dato, uint8_t x, uint8_t y, uint8_t size )
{ //recibe el string, la posición a ser mostrado y la longitud del string
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	7c 01       	movw	r14, r24
 1a2:	86 2f       	mov	r24, r22
 1a4:	12 2f       	mov	r17, r18
	uint8_t i;
	LCDGotoXY(x,y);
 1a6:	64 2f       	mov	r22, r20
 1a8:	0e 94 33 01 	call	0x266	; 0x266 <LCDGotoXY>
	for(i=0;i<size;i++){ //no se porque -2 pero así si
 1ac:	11 23       	and	r17, r17
 1ae:	71 f0       	breq	.+28     	; 0x1cc <mostrarString+0x38>
 1b0:	e7 01       	movw	r28, r14
 1b2:	11 50       	subi	r17, 0x01	; 1
 1b4:	01 2f       	mov	r16, r17
 1b6:	10 e0       	ldi	r17, 0x00	; 0
 1b8:	0f 5f       	subi	r16, 0xFF	; 255
 1ba:	1f 4f       	sbci	r17, 0xFF	; 255
 1bc:	0e 0d       	add	r16, r14
 1be:	1f 1d       	adc	r17, r15
		LCDsendChar(dato[i]);
 1c0:	89 91       	ld	r24, Y+
 1c2:	0e 94 ed 00 	call	0x1da	; 0x1da <LCDsendChar>

void mostrarString(const uint8_t *dato, uint8_t x, uint8_t y, uint8_t size )
{ //recibe el string, la posición a ser mostrado y la longitud del string
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;i<size;i++){ //no se porque -2 pero así si
 1c6:	c0 17       	cp	r28, r16
 1c8:	d1 07       	cpc	r29, r17
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <mostrarString+0x2c>
		LCDsendChar(dato[i]);
	}
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	ff 90       	pop	r15
 1d6:	ef 90       	pop	r14
 1d8:	08 95       	ret

000001da <LCDsendChar>:
	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
	}
}
 1da:	98 2f       	mov	r25, r24
 1dc:	90 7f       	andi	r25, 0xF0	; 240
 1de:	95 b9       	out	0x05, r25	; 5
 1e0:	28 9a       	sbi	0x05, 0	; 5
 1e2:	2a 9a       	sbi	0x05, 2	; 5
 1e4:	2a e6       	ldi	r18, 0x6A	; 106
 1e6:	2a 95       	dec	r18
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCDsendChar+0xc>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCDsendChar+0x12>
 1ec:	2a 98       	cbi	0x05, 2	; 5
 1ee:	28 98       	cbi	0x05, 0	; 5
 1f0:	9a e6       	ldi	r25, 0x6A	; 106
 1f2:	9a 95       	dec	r25
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCDsendChar+0x18>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <LCDsendChar+0x1e>
 1f8:	20 e1       	ldi	r18, 0x10	; 16
 1fa:	82 9f       	mul	r24, r18
 1fc:	c0 01       	movw	r24, r0
 1fe:	11 24       	eor	r1, r1
 200:	85 b9       	out	0x05, r24	; 5
 202:	28 9a       	sbi	0x05, 0	; 5
 204:	2a 9a       	sbi	0x05, 2	; 5
 206:	8a e6       	ldi	r24, 0x6A	; 106
 208:	8a 95       	dec	r24
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCDsendChar+0x2e>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCDsendChar+0x34>
 20e:	2a 98       	cbi	0x05, 2	; 5
 210:	28 98       	cbi	0x05, 0	; 5
 212:	9a e6       	ldi	r25, 0x6A	; 106
 214:	9a 95       	dec	r25
 216:	f1 f7       	brne	.-4      	; 0x214 <LCDsendChar+0x3a>
 218:	00 c0       	rjmp	.+0      	; 0x21a <LCDsendChar+0x40>
 21a:	08 95       	ret

0000021c <LCDsendCommand>:
 21c:	98 2f       	mov	r25, r24
 21e:	90 7f       	andi	r25, 0xF0	; 240
 220:	95 b9       	out	0x05, r25	; 5
 222:	2a 9a       	sbi	0x05, 2	; 5
 224:	ef ec       	ldi	r30, 0xCF	; 207
 226:	f7 e0       	ldi	r31, 0x07	; 7
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCDsendCommand+0xc>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCDsendCommand+0x12>
 22e:	00 00       	nop
 230:	2a 98       	cbi	0x05, 2	; 5
 232:	ef ec       	ldi	r30, 0xCF	; 207
 234:	f7 e0       	ldi	r31, 0x07	; 7
 236:	31 97       	sbiw	r30, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCDsendCommand+0x1a>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCDsendCommand+0x20>
 23c:	00 00       	nop
 23e:	f0 e1       	ldi	r31, 0x10	; 16
 240:	8f 9f       	mul	r24, r31
 242:	c0 01       	movw	r24, r0
 244:	11 24       	eor	r1, r1
 246:	85 b9       	out	0x05, r24	; 5
 248:	2a 9a       	sbi	0x05, 2	; 5
 24a:	8f ec       	ldi	r24, 0xCF	; 207
 24c:	97 e0       	ldi	r25, 0x07	; 7
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCDsendCommand+0x32>
 252:	00 c0       	rjmp	.+0      	; 0x254 <LCDsendCommand+0x38>
 254:	00 00       	nop
 256:	2a 98       	cbi	0x05, 2	; 5
 258:	ef ec       	ldi	r30, 0xCF	; 207
 25a:	f7 e0       	ldi	r31, 0x07	; 7
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <LCDsendCommand+0x40>
 260:	00 c0       	rjmp	.+0      	; 0x262 <LCDsendCommand+0x46>
 262:	00 00       	nop
 264:	08 95       	ret

00000266 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 266:	62 30       	cpi	r22, 0x02	; 2
 268:	31 f0       	breq	.+12     	; 0x276 <LCDGotoXY+0x10>
 26a:	63 30       	cpi	r22, 0x03	; 3
 26c:	31 f0       	breq	.+12     	; 0x27a <LCDGotoXY+0x14>
 26e:	61 30       	cpi	r22, 0x01	; 1
 270:	29 f4       	brne	.+10     	; 0x27c <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 272:	80 5c       	subi	r24, 0xC0	; 192
 274:	03 c0       	rjmp	.+6      	; 0x27c <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 276:	8c 5e       	subi	r24, 0xEC	; 236
 278:	01 c0       	rjmp	.+2      	; 0x27c <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 27a:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 27c:	80 68       	ori	r24, 0x80	; 128
 27e:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDsendCommand>
 282:	08 95       	ret

00000284 <main>:
#define F_CPU 16000000UL
#include <util/delay.h>
#include "ADC.h"
#include "termometro.h"
int main (void)
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	00 d0       	rcall	.+0      	; 0x28a <main+0x6>
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
	DDRD=0xff;
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	8a b9       	out	0x0a, r24	; 10
	PORTD=0x0;
 292:	1b b8       	out	0x0b, r1	; 11
	TERMOMETRO_init();
 294:	0e 94 66 01 	call	0x2cc	; 0x2cc <TERMOMETRO_init>
	int dato=0;
 298:	1a 82       	std	Y+2, r1	; 0x02
 29a:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		dato=TERMOMETRO_get_temperatura();
 29c:	0e 94 6d 01 	call	0x2da	; 0x2da <TERMOMETRO_get_temperatura>
 2a0:	9a 83       	std	Y+2, r25	; 0x02
 2a2:	89 83       	std	Y+1, r24	; 0x01
		mostrarString(&dato, 1, 1, 8 );
 2a4:	28 e0       	ldi	r18, 0x08	; 8
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	41 e0       	ldi	r20, 0x01	; 1
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	ce 01       	movw	r24, r28
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	0e 94 ca 00 	call	0x194	; 0x194 <mostrarString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
 2ba:	81 ee       	ldi	r24, 0xE1	; 225
 2bc:	94 e0       	ldi	r25, 0x04	; 4
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <main+0x3a>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x44>
 2c8:	00 00       	nop
 2ca:	e8 cf       	rjmp	.-48     	; 0x29c <main+0x18>

000002cc <TERMOMETRO_init>:
#include "ADC.h"
#include "termometro.h"


void TERMOMETRO_init(void){
	ADC_init(128,0);
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	80 e8       	ldi	r24, 0x80	; 128
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 a1 00 	call	0x142	; 0x142 <ADC_init>
 2d8:	08 95       	ret

000002da <TERMOMETRO_get_temperatura>:
}

int TERMOMETRO_get_temperatura(void){
	ADC_Start();
 2da:	0e 94 b1 00 	call	0x162	; 0x162 <ADC_Start>
	while(ADC_conversion_completed()); //wait for conversion to finish
 2de:	0e 94 b7 00 	call	0x16e	; 0x16e <ADC_conversion_completed>
 2e2:	89 2b       	or	r24, r25
 2e4:	e1 f7       	brne	.-8      	; 0x2de <TERMOMETRO_get_temperatura+0x4>
	ADC_flag_reset();
 2e6:	0e 94 c0 00 	call	0x180	; 0x180 <ADC_flag_reset>
	return ADC_get_resultado_bajo()/10;
 2ea:	0e 94 c6 00 	call	0x18c	; 0x18c <ADC_get_resultado_bajo>
 2ee:	6a e0       	ldi	r22, 0x0A	; 10
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__divmodhi4>
 2f6:	cb 01       	movw	r24, r22
}
 2f8:	08 95       	ret

000002fa <__divmodhi4>:
 2fa:	97 fb       	bst	r25, 7
 2fc:	07 2e       	mov	r0, r23
 2fe:	16 f4       	brtc	.+4      	; 0x304 <__divmodhi4+0xa>
 300:	00 94       	com	r0
 302:	07 d0       	rcall	.+14     	; 0x312 <__divmodhi4_neg1>
 304:	77 fd       	sbrc	r23, 7
 306:	09 d0       	rcall	.+18     	; 0x31a <__divmodhi4_neg2>
 308:	0e 94 91 01 	call	0x322	; 0x322 <__udivmodhi4>
 30c:	07 fc       	sbrc	r0, 7
 30e:	05 d0       	rcall	.+10     	; 0x31a <__divmodhi4_neg2>
 310:	3e f4       	brtc	.+14     	; 0x320 <__divmodhi4_exit>

00000312 <__divmodhi4_neg1>:
 312:	90 95       	com	r25
 314:	81 95       	neg	r24
 316:	9f 4f       	sbci	r25, 0xFF	; 255
 318:	08 95       	ret

0000031a <__divmodhi4_neg2>:
 31a:	70 95       	com	r23
 31c:	61 95       	neg	r22
 31e:	7f 4f       	sbci	r23, 0xFF	; 255

00000320 <__divmodhi4_exit>:
 320:	08 95       	ret

00000322 <__udivmodhi4>:
 322:	aa 1b       	sub	r26, r26
 324:	bb 1b       	sub	r27, r27
 326:	51 e1       	ldi	r21, 0x11	; 17
 328:	07 c0       	rjmp	.+14     	; 0x338 <__udivmodhi4_ep>

0000032a <__udivmodhi4_loop>:
 32a:	aa 1f       	adc	r26, r26
 32c:	bb 1f       	adc	r27, r27
 32e:	a6 17       	cp	r26, r22
 330:	b7 07       	cpc	r27, r23
 332:	10 f0       	brcs	.+4      	; 0x338 <__udivmodhi4_ep>
 334:	a6 1b       	sub	r26, r22
 336:	b7 0b       	sbc	r27, r23

00000338 <__udivmodhi4_ep>:
 338:	88 1f       	adc	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	5a 95       	dec	r21
 33e:	a9 f7       	brne	.-22     	; 0x32a <__udivmodhi4_loop>
 340:	80 95       	com	r24
 342:	90 95       	com	r25
 344:	bc 01       	movw	r22, r24
 346:	cd 01       	movw	r24, r26
 348:	08 95       	ret

0000034a <_exit>:
 34a:	f8 94       	cli

0000034c <__stop_program>:
 34c:	ff cf       	rjmp	.-2      	; 0x34c <__stop_program>
