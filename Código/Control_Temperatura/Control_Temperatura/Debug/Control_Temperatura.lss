
Control_Temperatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000914  00000988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000914  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000098a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001b8  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001506  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c1  00000000  00000000  000020ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c55  00000000  00000000  0000287b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000045c  00000000  00000000  000034d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052a  00000000  00000000  0000392c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001133  00000000  00000000  00003e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00004f89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e4 e1       	ldi	r30, 0x14	; 20
  bc:	f9 e0       	ldi	r31, 0x09	; 9
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 30       	cpi	r26, 0x02	; 2
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>
  ca:	0e 94 71 02 	call	0x4e2	; 0x4e2 <main>
  ce:	0c 94 88 04 	jmp	0x910	; 0x910 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <ADC_preInit>:
	int resultado=ADCL;
	int basura=ADCH;  // esta linea no sirve para nada pero si lo quito se rompe todo el programa, ya que se tiene que leer la parte alta si o si, sino no funciona
	return  resultado;//give the high byte
	**/
	return ADC*500/1024;
}
  d6:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  da:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  de:	08 95       	ret

000000e0 <ADC_enabled>:
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret

000000ec <ADC_preescaler>:
  ec:	80 31       	cpi	r24, 0x10	; 16
  ee:	91 05       	cpc	r25, r1
  f0:	29 f1       	breq	.+74     	; 0x13c <ADC_preescaler+0x50>
  f2:	4c f4       	brge	.+18     	; 0x106 <ADC_preescaler+0x1a>
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	91 05       	cpc	r25, r1
  f8:	a9 f0       	breq	.+42     	; 0x124 <ADC_preescaler+0x38>
  fa:	88 30       	cpi	r24, 0x08	; 8
  fc:	91 05       	cpc	r25, r1
  fe:	c1 f0       	breq	.+48     	; 0x130 <ADC_preescaler+0x44>
 100:	02 97       	sbiw	r24, 0x02	; 2
 102:	a1 f5       	brne	.+104    	; 0x16c <ADC_preescaler+0x80>
 104:	09 c0       	rjmp	.+18     	; 0x118 <ADC_preescaler+0x2c>
 106:	80 34       	cpi	r24, 0x40	; 64
 108:	91 05       	cpc	r25, r1
 10a:	21 f1       	breq	.+72     	; 0x154 <ADC_preescaler+0x68>
 10c:	80 38       	cpi	r24, 0x80	; 128
 10e:	91 05       	cpc	r25, r1
 110:	39 f1       	breq	.+78     	; 0x160 <ADC_preescaler+0x74>
 112:	80 97       	sbiw	r24, 0x20	; 32
 114:	59 f5       	brne	.+86     	; 0x16c <ADC_preescaler+0x80>
 116:	18 c0       	rjmp	.+48     	; 0x148 <ADC_preescaler+0x5c>
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	80 83       	st	Z, r24
 122:	08 95       	ret
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	83 60       	ori	r24, 0x03	; 3
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 83       	st	Z, r24
 146:	08 95       	ret
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	85 60       	ori	r24, 0x05	; 5
 150:	80 83       	st	Z, r24
 152:	08 95       	ret
 154:	ea e7       	ldi	r30, 0x7A	; 122
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	86 60       	ori	r24, 0x06	; 6
 15c:	80 83       	st	Z, r24
 15e:	08 95       	ret
 160:	ea e7       	ldi	r30, 0x7A	; 122
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	87 60       	ori	r24, 0x07	; 7
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret
 16c:	ea e7       	ldi	r30, 0x7A	; 122
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <ADC_select_pin>:
 176:	ec e7       	ldi	r30, 0x7C	; 124
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	90 81       	ld	r25, Z
 17c:	89 2b       	or	r24, r25
 17e:	80 83       	st	Z, r24
 180:	08 95       	ret

00000182 <ADC_init>:
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	8c 01       	movw	r16, r24
 18c:	eb 01       	movw	r28, r22
 18e:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_preInit>
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 198:	0e 94 70 00 	call	0xe0	; 0xe0 <ADC_enabled>
 19c:	c8 01       	movw	r24, r16
 19e:	0e 94 76 00 	call	0xec	; 0xec <ADC_preescaler>
 1a2:	ce 01       	movw	r24, r28
 1a4:	0e 94 bb 00 	call	0x176	; 0x176 <ADC_select_pin>
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <ADC_Start>:
 1b2:	ea e7       	ldi	r30, 0x7A	; 122
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <ADC_conversion_completed>:
 1be:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1c2:	82 95       	swap	r24
 1c4:	8f 70       	andi	r24, 0x0F	; 15
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	89 27       	eor	r24, r25
 1ca:	81 70       	andi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	08 95       	ret

000001d0 <ADC_flag_reset>:
 1d0:	ea e7       	ldi	r30, 0x7A	; 122
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	80 83       	st	Z, r24
 1da:	08 95       	ret

000001dc <ADC_get_voltaje_real>:
	/**
	float resultado=ADCL; //give the high byte
	float basura=ADCH;    // esta linea no sirve para nada pero si lo quito se rompe todo el programa, ya que se tiene que leer la parte alta si o si, sino no funciona
	return  resultado;
	**/
	return ADC*500/1024;
 1dc:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1e0:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1e4:	84 ef       	ldi	r24, 0xF4	; 244
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	28 9f       	mul	r18, r24
 1ea:	b0 01       	movw	r22, r0
 1ec:	29 9f       	mul	r18, r25
 1ee:	70 0d       	add	r23, r0
 1f0:	38 9f       	mul	r19, r24
 1f2:	70 0d       	add	r23, r0
 1f4:	11 24       	eor	r1, r1
 1f6:	67 2f       	mov	r22, r23
 1f8:	77 27       	eor	r23, r23
 1fa:	66 95       	lsr	r22
 1fc:	66 95       	lsr	r22
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__floatunsisf>
}
 206:	08 95       	ret

00000208 <mostrarString>:
#include <avr/io.h>
#include "lcd.h"
uint8_t x = 16;

void mostrarString(const char *dato, uint8_t x, uint8_t y, uint8_t size )
{ //recibe el string, la posición a ser mostrado y la longitud del string
 208:	ef 92       	push	r14
 20a:	ff 92       	push	r15
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	7c 01       	movw	r14, r24
 216:	86 2f       	mov	r24, r22
 218:	12 2f       	mov	r17, r18
	uint8_t i;
	LCDGotoXY(x,y);
 21a:	64 2f       	mov	r22, r20
 21c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCDGotoXY>
	for(i=0;i<size;i++){ //no se porque -2 pero así si
 220:	11 23       	and	r17, r17
 222:	71 f0       	breq	.+28     	; 0x240 <mostrarString+0x38>
 224:	e7 01       	movw	r28, r14
 226:	11 50       	subi	r17, 0x01	; 1
 228:	01 2f       	mov	r16, r17
 22a:	10 e0       	ldi	r17, 0x00	; 0
 22c:	0f 5f       	subi	r16, 0xFF	; 255
 22e:	1f 4f       	sbci	r17, 0xFF	; 255
 230:	0e 0d       	add	r16, r14
 232:	1f 1d       	adc	r17, r15
		LCDsendChar(dato[i]);
 234:	89 91       	ld	r24, Y+
 236:	0e 94 27 01 	call	0x24e	; 0x24e <LCDsendChar>

void mostrarString(const char *dato, uint8_t x, uint8_t y, uint8_t size )
{ //recibe el string, la posición a ser mostrado y la longitud del string
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;i<size;i++){ //no se porque -2 pero así si
 23a:	c0 17       	cp	r28, r16
 23c:	d1 07       	cpc	r29, r17
 23e:	d1 f7       	brne	.-12     	; 0x234 <mostrarString+0x2c>
		LCDsendChar(dato[i]);
	}
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	08 95       	ret

0000024e <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;i<(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 24e:	98 2f       	mov	r25, r24
 250:	90 7f       	andi	r25, 0xF0	; 240
 252:	95 b9       	out	0x05, r25	; 5
 254:	28 9a       	sbi	0x05, 0	; 5
 256:	2a 9a       	sbi	0x05, 2	; 5
 258:	2a e6       	ldi	r18, 0x6A	; 106
 25a:	2a 95       	dec	r18
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCDsendChar+0xc>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <LCDsendChar+0x12>
 260:	2a 98       	cbi	0x05, 2	; 5
 262:	28 98       	cbi	0x05, 0	; 5
 264:	9a e6       	ldi	r25, 0x6A	; 106
 266:	9a 95       	dec	r25
 268:	f1 f7       	brne	.-4      	; 0x266 <LCDsendChar+0x18>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <LCDsendChar+0x1e>
 26c:	20 e1       	ldi	r18, 0x10	; 16
 26e:	82 9f       	mul	r24, r18
 270:	c0 01       	movw	r24, r0
 272:	11 24       	eor	r1, r1
 274:	85 b9       	out	0x05, r24	; 5
 276:	28 9a       	sbi	0x05, 0	; 5
 278:	2a 9a       	sbi	0x05, 2	; 5
 27a:	8a e6       	ldi	r24, 0x6A	; 106
 27c:	8a 95       	dec	r24
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCDsendChar+0x2e>
 280:	00 c0       	rjmp	.+0      	; 0x282 <LCDsendChar+0x34>
 282:	2a 98       	cbi	0x05, 2	; 5
 284:	28 98       	cbi	0x05, 0	; 5
 286:	9a e6       	ldi	r25, 0x6A	; 106
 288:	9a 95       	dec	r25
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCDsendChar+0x3a>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <LCDsendChar+0x40>
 28e:	08 95       	ret

00000290 <LCDsendCommand>:
 290:	98 2f       	mov	r25, r24
 292:	90 7f       	andi	r25, 0xF0	; 240
 294:	95 b9       	out	0x05, r25	; 5
 296:	2a 9a       	sbi	0x05, 2	; 5
 298:	ef ec       	ldi	r30, 0xCF	; 207
 29a:	f7 e0       	ldi	r31, 0x07	; 7
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <LCDsendCommand+0xc>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCDsendCommand+0x12>
 2a2:	00 00       	nop
 2a4:	2a 98       	cbi	0x05, 2	; 5
 2a6:	ef ec       	ldi	r30, 0xCF	; 207
 2a8:	f7 e0       	ldi	r31, 0x07	; 7
 2aa:	31 97       	sbiw	r30, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCDsendCommand+0x1a>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCDsendCommand+0x20>
 2b0:	00 00       	nop
 2b2:	f0 e1       	ldi	r31, 0x10	; 16
 2b4:	8f 9f       	mul	r24, r31
 2b6:	c0 01       	movw	r24, r0
 2b8:	11 24       	eor	r1, r1
 2ba:	85 b9       	out	0x05, r24	; 5
 2bc:	2a 9a       	sbi	0x05, 2	; 5
 2be:	8f ec       	ldi	r24, 0xCF	; 207
 2c0:	97 e0       	ldi	r25, 0x07	; 7
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCDsendCommand+0x32>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCDsendCommand+0x38>
 2c8:	00 00       	nop
 2ca:	2a 98       	cbi	0x05, 2	; 5
 2cc:	ef ec       	ldi	r30, 0xCF	; 207
 2ce:	f7 e0       	ldi	r31, 0x07	; 7
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <LCDsendCommand+0x40>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <LCDsendCommand+0x46>
 2d6:	00 00       	nop
 2d8:	08 95       	ret

000002da <LCDclr>:
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 48 01 	call	0x290	; 0x290 <LCDsendCommand>
 2e0:	08 95       	ret

000002e2 <LCDGotoXY>:
 2e2:	62 30       	cpi	r22, 0x02	; 2
 2e4:	31 f0       	breq	.+12     	; 0x2f2 <LCDGotoXY+0x10>
 2e6:	63 30       	cpi	r22, 0x03	; 3
 2e8:	31 f0       	breq	.+12     	; 0x2f6 <LCDGotoXY+0x14>
 2ea:	61 30       	cpi	r22, 0x01	; 1
 2ec:	29 f4       	brne	.+10     	; 0x2f8 <LCDGotoXY+0x16>
 2ee:	80 5c       	subi	r24, 0xC0	; 192
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <LCDGotoXY+0x16>
 2f2:	8c 5e       	subi	r24, 0xEC	; 236
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <LCDGotoXY+0x16>
 2f6:	8c 5a       	subi	r24, 0xAC	; 172
 2f8:	80 68       	ori	r24, 0x80	; 128
 2fa:	0e 94 48 01 	call	0x290	; 0x290 <LCDsendCommand>
 2fe:	08 95       	ret

00000300 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 300:	ff 92       	push	r15
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 30a:	66 0f       	add	r22, r22
 30c:	66 0f       	add	r22, r22
 30e:	66 0f       	add	r22, r22
 310:	60 64       	ori	r22, 0x40	; 64
 312:	ec 01       	movw	r28, r24
 314:	68 94       	set
 316:	ff 24       	eor	r15, r15
 318:	f3 f8       	bld	r15, 3
 31a:	f6 0e       	add	r15, r22
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 31c:	fe 01       	movw	r30, r28
 31e:	04 91       	lpm	r16, Z
		LCDsendCommand(a++);
 320:	11 e0       	ldi	r17, 0x01	; 1
 322:	16 0f       	add	r17, r22
 324:	86 2f       	mov	r24, r22
 326:	0e 94 48 01 	call	0x290	; 0x290 <LCDsendCommand>
		LCDsendChar(pcc);
 32a:	80 2f       	mov	r24, r16
 32c:	0e 94 27 01 	call	0x24e	; 0x24e <LCDsendChar>
 330:	21 96       	adiw	r28, 0x01	; 1
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 332:	61 2f       	mov	r22, r17
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 334:	1f 11       	cpse	r17, r15
 336:	f2 cf       	rjmp	.-28     	; 0x31c <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	ff 90       	pop	r15
 342:	08 95       	ret

00000344 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34a:	8f e2       	ldi	r24, 0x2F	; 47
 34c:	95 e7       	ldi	r25, 0x75	; 117
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <LCDinit+0xa>
 352:	00 c0       	rjmp	.+0      	; 0x354 <LCDinit+0x10>
 354:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 356:	15 b8       	out	0x05, r1	; 5
	LCP=0x00;
 358:	15 b8       	out	0x05, r1	; 5
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 35a:	84 b1       	in	r24, 0x04	; 4
 35c:	80 6f       	ori	r24, 0xF0	; 240
 35e:	84 b9       	out	0x04, r24	; 4
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 360:	84 b1       	in	r24, 0x04	; 4
 362:	87 60       	ori	r24, 0x07	; 7
 364:	84 b9       	out	0x04, r24	; 4
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 366:	80 e3       	ldi	r24, 0x30	; 48
 368:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 36a:	2a 9a       	sbi	0x05, 2	; 5
 36c:	ef ec       	ldi	r30, 0xCF	; 207
 36e:	f7 e0       	ldi	r31, 0x07	; 7
 370:	31 97       	sbiw	r30, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCDinit+0x2c>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCDinit+0x32>
 376:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 378:	2a 98       	cbi	0x05, 2	; 5
 37a:	ef ec       	ldi	r30, 0xCF	; 207
 37c:	f7 e0       	ldi	r31, 0x07	; 7
 37e:	31 97       	sbiw	r30, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <LCDinit+0x3a>
 382:	00 c0       	rjmp	.+0      	; 0x384 <LCDinit+0x40>
 384:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 386:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 388:	2a 9a       	sbi	0x05, 2	; 5
 38a:	8f ec       	ldi	r24, 0xCF	; 207
 38c:	97 e0       	ldi	r25, 0x07	; 7
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <LCDinit+0x4a>
 392:	00 c0       	rjmp	.+0      	; 0x394 <LCDinit+0x50>
 394:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 396:	2a 98       	cbi	0x05, 2	; 5
 398:	ef ec       	ldi	r30, 0xCF	; 207
 39a:	f7 e0       	ldi	r31, 0x07	; 7
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <LCDinit+0x58>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <LCDinit+0x5e>
 3a2:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 3a4:	80 e2       	ldi	r24, 0x20	; 32
 3a6:	85 b9       	out	0x05, r24	; 5
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 3a8:	2a 9a       	sbi	0x05, 2	; 5
 3aa:	8f ec       	ldi	r24, 0xCF	; 207
 3ac:	97 e0       	ldi	r25, 0x07	; 7
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <LCDinit+0x6a>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <LCDinit+0x70>
 3b4:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 3b6:	2a 98       	cbi	0x05, 2	; 5
 3b8:	ef ec       	ldi	r30, 0xCF	; 207
 3ba:	f7 e0       	ldi	r31, 0x07	; 7
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <LCDinit+0x78>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <LCDinit+0x7e>
 3c2:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 3c4:	88 e2       	ldi	r24, 0x28	; 40
 3c6:	0e 94 48 01 	call	0x290	; 0x290 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 3ca:	8c e0       	ldi	r24, 0x0C	; 12
 3cc:	0e 94 48 01 	call	0x290	; 0x290 <LCDsendCommand>
 3d0:	c8 e6       	ldi	r28, 0x68	; 104
 3d2:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 3d4:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 3d6:	11 e0       	ldi	r17, 0x01	; 1
 3d8:	16 0f       	add	r17, r22
 3da:	ce 01       	movw	r24, r28
 3dc:	0e 94 80 01 	call	0x300	; 0x300 <LCDdefinechar>
 3e0:	28 96       	adiw	r28, 0x08	; 8
 3e2:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 3e4:	18 30       	cpi	r17, 0x08	; 8
 3e6:	b9 f7       	brne	.-18     	; 0x3d6 <LCDinit+0x92>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	08 95       	ret

000003f0 <imprimir>:
#include "controlador_lcd.h"
#include "lcd.h"
#include <math.h>
#include <stdlib.h>
#include <string.h>
void imprimir( uint8_t temperatura ){
 3f0:	1f 93       	push	r17
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	00 d0       	rcall	.+0      	; 0x3f8 <imprimir+0x8>
 3f8:	1f 92       	push	r1
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
 3fe:	18 2f       	mov	r17, r24
		char temperatura_en_string[3]="00";
 400:	80 e3       	ldi	r24, 0x30	; 48
 402:	90 e3       	ldi	r25, 0x30	; 48
 404:	a0 e0       	ldi	r26, 0x00	; 0
 406:	89 83       	std	Y+1, r24	; 0x01
 408:	9a 83       	std	Y+2, r25	; 0x02
 40a:	ab 83       	std	Y+3, r26	; 0x03
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 40c:	4a e0       	ldi	r20, 0x0A	; 10
 40e:	be 01       	movw	r22, r28
 410:	6f 5f       	subi	r22, 0xFF	; 255
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	81 2f       	mov	r24, r17
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__itoa_ncheck>
		itoa(temperatura,temperatura_en_string,10);
		if (temperatura<10){
 41c:	1a 30       	cpi	r17, 0x0A	; 10
 41e:	40 f4       	brcc	.+16     	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
			mostrarString(temperatura_en_string,0,0,1);	
 420:	21 e0       	ldi	r18, 0x01	; 1
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	ce 01       	movw	r24, r28
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	0e 94 04 01 	call	0x208	; 0x208 <mostrarString>
 42e:	07 c0       	rjmp	.+14     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
		}else{
			mostrarString(temperatura_en_string,0,0,2);
 430:	22 e0       	ldi	r18, 0x02	; 2
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	ce 01       	movw	r24, r28
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	0e 94 04 01 	call	0x208	; 0x208 <mostrarString>
		}			
}
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	08 95       	ret

0000044c <imprimir_float>:
void imprimir_float( float temperatura ){
 44c:	cf 92       	push	r12
 44e:	df 92       	push	r13
 450:	ef 92       	push	r14
 452:	ff 92       	push	r15
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	cd b7       	in	r28, 0x3d	; 61
 45a:	de b7       	in	r29, 0x3e	; 62
 45c:	27 97       	sbiw	r28, 0x07	; 7
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	de bf       	out	0x3e, r29	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	cd bf       	out	0x3d, r28	; 61
	char string[3]="000";
 468:	20 e3       	ldi	r18, 0x30	; 48
 46a:	30 e3       	ldi	r19, 0x30	; 48
 46c:	40 e3       	ldi	r20, 0x30	; 48
 46e:	29 83       	std	Y+1, r18	; 0x01
 470:	3a 83       	std	Y+2, r19	; 0x02
 472:	4b 83       	std	Y+3, r20	; 0x03
	
	//descompongo el numero
	double ParteEntera;
	double parteFraccional = modf(temperatura, &ParteEntera);
 474:	ae 01       	movw	r20, r28
 476:	4c 5f       	subi	r20, 0xFC	; 252
 478:	5f 4f       	sbci	r21, 0xFF	; 255
 47a:	0e 94 8a 03 	call	0x714	; 0x714 <modf>
 47e:	6b 01       	movw	r12, r22
 480:	7c 01       	movw	r14, r24
	
	//imprimo la parte entera
	imprimir(ParteEntera);
 482:	6c 81       	ldd	r22, Y+4	; 0x04
 484:	7d 81       	ldd	r23, Y+5	; 0x05
 486:	8e 81       	ldd	r24, Y+6	; 0x06
 488:	9f 81       	ldd	r25, Y+7	; 0x07
 48a:	0e 94 cc 02 	call	0x598	; 0x598 <__fixunssfsi>
 48e:	86 2f       	mov	r24, r22
 490:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <imprimir>
	//imprimo la coma
	mostrarString(".",2,0,1);	
 494:	21 e0       	ldi	r18, 0x01	; 1
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	62 e0       	ldi	r22, 0x02	; 2
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	0e 94 04 01 	call	0x208	; 0x208 <mostrarString>
	//imprimo la parte fraccional
	itoa(parteFraccional, string, 10);
 4a2:	c7 01       	movw	r24, r14
 4a4:	b6 01       	movw	r22, r12
 4a6:	0e 94 c5 02 	call	0x58a	; 0x58a <__fixsfsi>
 4aa:	dc 01       	movw	r26, r24
 4ac:	cb 01       	movw	r24, r22
 4ae:	4a e0       	ldi	r20, 0x0A	; 10
 4b0:	be 01       	movw	r22, r28
 4b2:	6f 5f       	subi	r22, 0xFF	; 255
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255
 4b6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__itoa_ncheck>
	mostrarString(string,3,0,1);
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	40 e0       	ldi	r20, 0x00	; 0
 4be:	63 e0       	ldi	r22, 0x03	; 3
 4c0:	ce 01       	movw	r24, r28
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	0e 94 04 01 	call	0x208	; 0x208 <mostrarString>
}
 4c8:	27 96       	adiw	r28, 0x07	; 7
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	cd bf       	out	0x3d, r28	; 61
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	ff 90       	pop	r15
 4da:	ef 90       	pop	r14
 4dc:	df 90       	pop	r13
 4de:	cf 90       	pop	r12
 4e0:	08 95       	ret

000004e2 <main>:

int main (void)
{
	LCDinit();
 4e2:	0e 94 a2 01 	call	0x344	; 0x344 <LCDinit>
	TERMOMETRO_init();
 4e6:	0e 94 85 02 	call	0x50a	; 0x50a <TERMOMETRO_init>
	while(1)
	{
		imprimir_float( TERMOMETRO_get_temperatura_real() );
 4ea:	0e 94 8c 02 	call	0x518	; 0x518 <TERMOMETRO_get_temperatura_real>
 4ee:	0e 94 26 02 	call	0x44c	; 0x44c <imprimir_float>
 4f2:	2f ef       	ldi	r18, 0xFF	; 255
 4f4:	80 e7       	ldi	r24, 0x70	; 112
 4f6:	92 e0       	ldi	r25, 0x02	; 2
 4f8:	21 50       	subi	r18, 0x01	; 1
 4fa:	80 40       	sbci	r24, 0x00	; 0
 4fc:	90 40       	sbci	r25, 0x00	; 0
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <main+0x16>
 500:	00 c0       	rjmp	.+0      	; 0x502 <main+0x20>
 502:	00 00       	nop
		_delay_ms(100);
		LCDclr();			
 504:	0e 94 6d 01 	call	0x2da	; 0x2da <LCDclr>
	}
 508:	f0 cf       	rjmp	.-32     	; 0x4ea <main+0x8>

0000050a <TERMOMETRO_init>:
	ADC_flag_reset();	
	uint8_t temperatura=ADC_get_voltaje_entero();
	if (temperatura>50){temperatura=50;}
	if (temperatura<0){temperatura=0;}	
	return temperatura;
}
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	80 e4       	ldi	r24, 0x40	; 64
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 c1 00 	call	0x182	; 0x182 <ADC_init>
 516:	08 95       	ret

00000518 <TERMOMETRO_get_temperatura_real>:


float TERMOMETRO_get_temperatura_real(void){
 518:	cf 92       	push	r12
 51a:	df 92       	push	r13
 51c:	ef 92       	push	r14
 51e:	ff 92       	push	r15
	ADC_Start();
 520:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ADC_Start>
	while(ADC_conversion_completed()); //wait for conversion to finish
 524:	0e 94 df 00 	call	0x1be	; 0x1be <ADC_conversion_completed>
 528:	89 2b       	or	r24, r25
 52a:	e1 f7       	brne	.-8      	; 0x524 <TERMOMETRO_get_temperatura_real+0xc>
	ADC_flag_reset();
 52c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <ADC_flag_reset>
	
	float temperatura=ADC_get_voltaje_real();
 530:	0e 94 ee 00 	call	0x1dc	; 0x1dc <ADC_get_voltaje_real>
 534:	6b 01       	movw	r12, r22
 536:	7c 01       	movw	r14, r24
	if (temperatura>50){temperatura=50;}
 538:	20 e0       	ldi	r18, 0x00	; 0
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	48 e4       	ldi	r20, 0x48	; 72
 53e:	52 e4       	ldi	r21, 0x42	; 66
 540:	0e 94 85 03 	call	0x70a	; 0x70a <__gesf2>
 544:	18 16       	cp	r1, r24
 546:	6c f0       	brlt	.+26     	; 0x562 <TERMOMETRO_get_temperatura_real+0x4a>
	if (temperatura<0){temperatura=0;}
 548:	20 e0       	ldi	r18, 0x00	; 0
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	a9 01       	movw	r20, r18
 54e:	c7 01       	movw	r24, r14
 550:	b6 01       	movw	r22, r12
 552:	0e 94 c0 02 	call	0x580	; 0x580 <__cmpsf2>
 556:	88 23       	and	r24, r24
 558:	64 f4       	brge	.+24     	; 0x572 <TERMOMETRO_get_temperatura_real+0x5a>
 55a:	c1 2c       	mov	r12, r1
 55c:	d1 2c       	mov	r13, r1
 55e:	76 01       	movw	r14, r12
 560:	08 c0       	rjmp	.+16     	; 0x572 <TERMOMETRO_get_temperatura_real+0x5a>
	ADC_Start();
	while(ADC_conversion_completed()); //wait for conversion to finish
	ADC_flag_reset();
	
	float temperatura=ADC_get_voltaje_real();
	if (temperatura>50){temperatura=50;}
 562:	0f 2e       	mov	r0, r31
 564:	c1 2c       	mov	r12, r1
 566:	d1 2c       	mov	r13, r1
 568:	f8 e4       	ldi	r31, 0x48	; 72
 56a:	ef 2e       	mov	r14, r31
 56c:	f2 e4       	ldi	r31, 0x42	; 66
 56e:	ff 2e       	mov	r15, r31
 570:	f0 2d       	mov	r31, r0
	if (temperatura<0){temperatura=0;}
	return temperatura;
 572:	c7 01       	movw	r24, r14
 574:	b6 01       	movw	r22, r12
 576:	ff 90       	pop	r15
 578:	ef 90       	pop	r14
 57a:	df 90       	pop	r13
 57c:	cf 90       	pop	r12
 57e:	08 95       	ret

00000580 <__cmpsf2>:
 580:	0e 94 38 03 	call	0x670	; 0x670 <__fp_cmp>
 584:	08 f4       	brcc	.+2      	; 0x588 <__cmpsf2+0x8>
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	08 95       	ret

0000058a <__fixsfsi>:
 58a:	0e 94 cc 02 	call	0x598	; 0x598 <__fixunssfsi>
 58e:	68 94       	set
 590:	b1 11       	cpse	r27, r1
 592:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__fp_szero>
 596:	08 95       	ret

00000598 <__fixunssfsi>:
 598:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__fp_splitA>
 59c:	88 f0       	brcs	.+34     	; 0x5c0 <__fixunssfsi+0x28>
 59e:	9f 57       	subi	r25, 0x7F	; 127
 5a0:	98 f0       	brcs	.+38     	; 0x5c8 <__fixunssfsi+0x30>
 5a2:	b9 2f       	mov	r27, r25
 5a4:	99 27       	eor	r25, r25
 5a6:	b7 51       	subi	r27, 0x17	; 23
 5a8:	b0 f0       	brcs	.+44     	; 0x5d6 <__fixunssfsi+0x3e>
 5aa:	e1 f0       	breq	.+56     	; 0x5e4 <__fixunssfsi+0x4c>
 5ac:	66 0f       	add	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	88 1f       	adc	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	1a f0       	brmi	.+6      	; 0x5bc <__fixunssfsi+0x24>
 5b6:	ba 95       	dec	r27
 5b8:	c9 f7       	brne	.-14     	; 0x5ac <__fixunssfsi+0x14>
 5ba:	14 c0       	rjmp	.+40     	; 0x5e4 <__fixunssfsi+0x4c>
 5bc:	b1 30       	cpi	r27, 0x01	; 1
 5be:	91 f0       	breq	.+36     	; 0x5e4 <__fixunssfsi+0x4c>
 5c0:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__fp_zero>
 5c4:	b1 e0       	ldi	r27, 0x01	; 1
 5c6:	08 95       	ret
 5c8:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_zero>
 5cc:	67 2f       	mov	r22, r23
 5ce:	78 2f       	mov	r23, r24
 5d0:	88 27       	eor	r24, r24
 5d2:	b8 5f       	subi	r27, 0xF8	; 248
 5d4:	39 f0       	breq	.+14     	; 0x5e4 <__fixunssfsi+0x4c>
 5d6:	b9 3f       	cpi	r27, 0xF9	; 249
 5d8:	cc f3       	brlt	.-14     	; 0x5cc <__fixunssfsi+0x34>
 5da:	86 95       	lsr	r24
 5dc:	77 95       	ror	r23
 5de:	67 95       	ror	r22
 5e0:	b3 95       	inc	r27
 5e2:	d9 f7       	brne	.-10     	; 0x5da <__fixunssfsi+0x42>
 5e4:	3e f4       	brtc	.+14     	; 0x5f4 <__fixunssfsi+0x5c>
 5e6:	90 95       	com	r25
 5e8:	80 95       	com	r24
 5ea:	70 95       	com	r23
 5ec:	61 95       	neg	r22
 5ee:	7f 4f       	sbci	r23, 0xFF	; 255
 5f0:	8f 4f       	sbci	r24, 0xFF	; 255
 5f2:	9f 4f       	sbci	r25, 0xFF	; 255
 5f4:	08 95       	ret

000005f6 <__floatunsisf>:
 5f6:	e8 94       	clt
 5f8:	09 c0       	rjmp	.+18     	; 0x60c <__floatsisf+0x12>

000005fa <__floatsisf>:
 5fa:	97 fb       	bst	r25, 7
 5fc:	3e f4       	brtc	.+14     	; 0x60c <__floatsisf+0x12>
 5fe:	90 95       	com	r25
 600:	80 95       	com	r24
 602:	70 95       	com	r23
 604:	61 95       	neg	r22
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	8f 4f       	sbci	r24, 0xFF	; 255
 60a:	9f 4f       	sbci	r25, 0xFF	; 255
 60c:	99 23       	and	r25, r25
 60e:	a9 f0       	breq	.+42     	; 0x63a <__floatsisf+0x40>
 610:	f9 2f       	mov	r31, r25
 612:	96 e9       	ldi	r25, 0x96	; 150
 614:	bb 27       	eor	r27, r27
 616:	93 95       	inc	r25
 618:	f6 95       	lsr	r31
 61a:	87 95       	ror	r24
 61c:	77 95       	ror	r23
 61e:	67 95       	ror	r22
 620:	b7 95       	ror	r27
 622:	f1 11       	cpse	r31, r1
 624:	f8 cf       	rjmp	.-16     	; 0x616 <__floatsisf+0x1c>
 626:	fa f4       	brpl	.+62     	; 0x666 <__floatsisf+0x6c>
 628:	bb 0f       	add	r27, r27
 62a:	11 f4       	brne	.+4      	; 0x630 <__floatsisf+0x36>
 62c:	60 ff       	sbrs	r22, 0
 62e:	1b c0       	rjmp	.+54     	; 0x666 <__floatsisf+0x6c>
 630:	6f 5f       	subi	r22, 0xFF	; 255
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	8f 4f       	sbci	r24, 0xFF	; 255
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	16 c0       	rjmp	.+44     	; 0x666 <__floatsisf+0x6c>
 63a:	88 23       	and	r24, r24
 63c:	11 f0       	breq	.+4      	; 0x642 <__floatsisf+0x48>
 63e:	96 e9       	ldi	r25, 0x96	; 150
 640:	11 c0       	rjmp	.+34     	; 0x664 <__floatsisf+0x6a>
 642:	77 23       	and	r23, r23
 644:	21 f0       	breq	.+8      	; 0x64e <__floatsisf+0x54>
 646:	9e e8       	ldi	r25, 0x8E	; 142
 648:	87 2f       	mov	r24, r23
 64a:	76 2f       	mov	r23, r22
 64c:	05 c0       	rjmp	.+10     	; 0x658 <__floatsisf+0x5e>
 64e:	66 23       	and	r22, r22
 650:	71 f0       	breq	.+28     	; 0x66e <__floatsisf+0x74>
 652:	96 e8       	ldi	r25, 0x86	; 134
 654:	86 2f       	mov	r24, r22
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	60 e0       	ldi	r22, 0x00	; 0
 65a:	2a f0       	brmi	.+10     	; 0x666 <__floatsisf+0x6c>
 65c:	9a 95       	dec	r25
 65e:	66 0f       	add	r22, r22
 660:	77 1f       	adc	r23, r23
 662:	88 1f       	adc	r24, r24
 664:	da f7       	brpl	.-10     	; 0x65c <__floatsisf+0x62>
 666:	88 0f       	add	r24, r24
 668:	96 95       	lsr	r25
 66a:	87 95       	ror	r24
 66c:	97 f9       	bld	r25, 7
 66e:	08 95       	ret

00000670 <__fp_cmp>:
 670:	99 0f       	add	r25, r25
 672:	00 08       	sbc	r0, r0
 674:	55 0f       	add	r21, r21
 676:	aa 0b       	sbc	r26, r26
 678:	e0 e8       	ldi	r30, 0x80	; 128
 67a:	fe ef       	ldi	r31, 0xFE	; 254
 67c:	16 16       	cp	r1, r22
 67e:	17 06       	cpc	r1, r23
 680:	e8 07       	cpc	r30, r24
 682:	f9 07       	cpc	r31, r25
 684:	c0 f0       	brcs	.+48     	; 0x6b6 <__fp_cmp+0x46>
 686:	12 16       	cp	r1, r18
 688:	13 06       	cpc	r1, r19
 68a:	e4 07       	cpc	r30, r20
 68c:	f5 07       	cpc	r31, r21
 68e:	98 f0       	brcs	.+38     	; 0x6b6 <__fp_cmp+0x46>
 690:	62 1b       	sub	r22, r18
 692:	73 0b       	sbc	r23, r19
 694:	84 0b       	sbc	r24, r20
 696:	95 0b       	sbc	r25, r21
 698:	39 f4       	brne	.+14     	; 0x6a8 <__fp_cmp+0x38>
 69a:	0a 26       	eor	r0, r26
 69c:	61 f0       	breq	.+24     	; 0x6b6 <__fp_cmp+0x46>
 69e:	23 2b       	or	r18, r19
 6a0:	24 2b       	or	r18, r20
 6a2:	25 2b       	or	r18, r21
 6a4:	21 f4       	brne	.+8      	; 0x6ae <__fp_cmp+0x3e>
 6a6:	08 95       	ret
 6a8:	0a 26       	eor	r0, r26
 6aa:	09 f4       	brne	.+2      	; 0x6ae <__fp_cmp+0x3e>
 6ac:	a1 40       	sbci	r26, 0x01	; 1
 6ae:	a6 95       	lsr	r26
 6b0:	8f ef       	ldi	r24, 0xFF	; 255
 6b2:	81 1d       	adc	r24, r1
 6b4:	81 1d       	adc	r24, r1
 6b6:	08 95       	ret

000006b8 <__fp_split3>:
 6b8:	57 fd       	sbrc	r21, 7
 6ba:	90 58       	subi	r25, 0x80	; 128
 6bc:	44 0f       	add	r20, r20
 6be:	55 1f       	adc	r21, r21
 6c0:	59 f0       	breq	.+22     	; 0x6d8 <__fp_splitA+0x10>
 6c2:	5f 3f       	cpi	r21, 0xFF	; 255
 6c4:	71 f0       	breq	.+28     	; 0x6e2 <__fp_splitA+0x1a>
 6c6:	47 95       	ror	r20

000006c8 <__fp_splitA>:
 6c8:	88 0f       	add	r24, r24
 6ca:	97 fb       	bst	r25, 7
 6cc:	99 1f       	adc	r25, r25
 6ce:	61 f0       	breq	.+24     	; 0x6e8 <__fp_splitA+0x20>
 6d0:	9f 3f       	cpi	r25, 0xFF	; 255
 6d2:	79 f0       	breq	.+30     	; 0x6f2 <__fp_splitA+0x2a>
 6d4:	87 95       	ror	r24
 6d6:	08 95       	ret
 6d8:	12 16       	cp	r1, r18
 6da:	13 06       	cpc	r1, r19
 6dc:	14 06       	cpc	r1, r20
 6de:	55 1f       	adc	r21, r21
 6e0:	f2 cf       	rjmp	.-28     	; 0x6c6 <__fp_split3+0xe>
 6e2:	46 95       	lsr	r20
 6e4:	f1 df       	rcall	.-30     	; 0x6c8 <__fp_splitA>
 6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <__fp_splitA+0x30>
 6e8:	16 16       	cp	r1, r22
 6ea:	17 06       	cpc	r1, r23
 6ec:	18 06       	cpc	r1, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	f1 cf       	rjmp	.-30     	; 0x6d4 <__fp_splitA+0xc>
 6f2:	86 95       	lsr	r24
 6f4:	71 05       	cpc	r23, r1
 6f6:	61 05       	cpc	r22, r1
 6f8:	08 94       	sec
 6fa:	08 95       	ret

000006fc <__fp_zero>:
 6fc:	e8 94       	clt

000006fe <__fp_szero>:
 6fe:	bb 27       	eor	r27, r27
 700:	66 27       	eor	r22, r22
 702:	77 27       	eor	r23, r23
 704:	cb 01       	movw	r24, r22
 706:	97 f9       	bld	r25, 7
 708:	08 95       	ret

0000070a <__gesf2>:
 70a:	0e 94 38 03 	call	0x670	; 0x670 <__fp_cmp>
 70e:	08 f4       	brcc	.+2      	; 0x712 <__gesf2+0x8>
 710:	8f ef       	ldi	r24, 0xFF	; 255
 712:	08 95       	ret

00000714 <modf>:
 714:	fa 01       	movw	r30, r20
 716:	dc 01       	movw	r26, r24
 718:	aa 0f       	add	r26, r26
 71a:	bb 1f       	adc	r27, r27
 71c:	9b 01       	movw	r18, r22
 71e:	ac 01       	movw	r20, r24
 720:	bf 57       	subi	r27, 0x7F	; 127
 722:	28 f4       	brcc	.+10     	; 0x72e <modf+0x1a>
 724:	22 27       	eor	r18, r18
 726:	33 27       	eor	r19, r19
 728:	44 27       	eor	r20, r20
 72a:	50 78       	andi	r21, 0x80	; 128
 72c:	20 c0       	rjmp	.+64     	; 0x76e <modf+0x5a>
 72e:	b7 51       	subi	r27, 0x17	; 23
 730:	90 f4       	brcc	.+36     	; 0x756 <modf+0x42>
 732:	ab 2f       	mov	r26, r27
 734:	00 24       	eor	r0, r0
 736:	46 95       	lsr	r20
 738:	37 95       	ror	r19
 73a:	27 95       	ror	r18
 73c:	01 1c       	adc	r0, r1
 73e:	a3 95       	inc	r26
 740:	d2 f3       	brmi	.-12     	; 0x736 <modf+0x22>
 742:	00 20       	and	r0, r0
 744:	71 f0       	breq	.+28     	; 0x762 <modf+0x4e>
 746:	22 0f       	add	r18, r18
 748:	33 1f       	adc	r19, r19
 74a:	44 1f       	adc	r20, r20
 74c:	b3 95       	inc	r27
 74e:	da f3       	brmi	.-10     	; 0x746 <modf+0x32>
 750:	0e d0       	rcall	.+28     	; 0x76e <modf+0x5a>
 752:	0c 94 be 03 	jmp	0x77c	; 0x77c <__subsf3>
 756:	61 30       	cpi	r22, 0x01	; 1
 758:	71 05       	cpc	r23, r1
 75a:	a0 e8       	ldi	r26, 0x80	; 128
 75c:	8a 07       	cpc	r24, r26
 75e:	b9 46       	sbci	r27, 0x69	; 105
 760:	30 f4       	brcc	.+12     	; 0x76e <modf+0x5a>
 762:	9b 01       	movw	r18, r22
 764:	ac 01       	movw	r20, r24
 766:	66 27       	eor	r22, r22
 768:	77 27       	eor	r23, r23
 76a:	88 27       	eor	r24, r24
 76c:	90 78       	andi	r25, 0x80	; 128
 76e:	30 96       	adiw	r30, 0x00	; 0
 770:	21 f0       	breq	.+8      	; 0x77a <modf+0x66>
 772:	20 83       	st	Z, r18
 774:	31 83       	std	Z+1, r19	; 0x01
 776:	42 83       	std	Z+2, r20	; 0x02
 778:	53 83       	std	Z+3, r21	; 0x03
 77a:	08 95       	ret

0000077c <__subsf3>:
 77c:	50 58       	subi	r21, 0x80	; 128

0000077e <__addsf3>:
 77e:	bb 27       	eor	r27, r27
 780:	aa 27       	eor	r26, r26
 782:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__addsf3x>
 786:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_round>
 78a:	0e 94 34 04 	call	0x868	; 0x868 <__fp_pscA>
 78e:	38 f0       	brcs	.+14     	; 0x79e <__addsf3+0x20>
 790:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_pscB>
 794:	20 f0       	brcs	.+8      	; 0x79e <__addsf3+0x20>
 796:	39 f4       	brne	.+14     	; 0x7a6 <__addsf3+0x28>
 798:	9f 3f       	cpi	r25, 0xFF	; 255
 79a:	19 f4       	brne	.+6      	; 0x7a2 <__addsf3+0x24>
 79c:	26 f4       	brtc	.+8      	; 0x7a6 <__addsf3+0x28>
 79e:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_nan>
 7a2:	0e f4       	brtc	.+2      	; 0x7a6 <__addsf3+0x28>
 7a4:	e0 95       	com	r30
 7a6:	e7 fb       	bst	r30, 7
 7a8:	0c 94 2b 04 	jmp	0x856	; 0x856 <__fp_inf>

000007ac <__addsf3x>:
 7ac:	e9 2f       	mov	r30, r25
 7ae:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__fp_split3>
 7b2:	58 f3       	brcs	.-42     	; 0x78a <__addsf3+0xc>
 7b4:	ba 17       	cp	r27, r26
 7b6:	62 07       	cpc	r22, r18
 7b8:	73 07       	cpc	r23, r19
 7ba:	84 07       	cpc	r24, r20
 7bc:	95 07       	cpc	r25, r21
 7be:	20 f0       	brcs	.+8      	; 0x7c8 <__addsf3x+0x1c>
 7c0:	79 f4       	brne	.+30     	; 0x7e0 <__addsf3x+0x34>
 7c2:	a6 f5       	brtc	.+104    	; 0x82c <__addsf3x+0x80>
 7c4:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_zero>
 7c8:	0e f4       	brtc	.+2      	; 0x7cc <__addsf3x+0x20>
 7ca:	e0 95       	com	r30
 7cc:	0b 2e       	mov	r0, r27
 7ce:	ba 2f       	mov	r27, r26
 7d0:	a0 2d       	mov	r26, r0
 7d2:	0b 01       	movw	r0, r22
 7d4:	b9 01       	movw	r22, r18
 7d6:	90 01       	movw	r18, r0
 7d8:	0c 01       	movw	r0, r24
 7da:	ca 01       	movw	r24, r20
 7dc:	a0 01       	movw	r20, r0
 7de:	11 24       	eor	r1, r1
 7e0:	ff 27       	eor	r31, r31
 7e2:	59 1b       	sub	r21, r25
 7e4:	99 f0       	breq	.+38     	; 0x80c <__addsf3x+0x60>
 7e6:	59 3f       	cpi	r21, 0xF9	; 249
 7e8:	50 f4       	brcc	.+20     	; 0x7fe <__addsf3x+0x52>
 7ea:	50 3e       	cpi	r21, 0xE0	; 224
 7ec:	68 f1       	brcs	.+90     	; 0x848 <__addsf3x+0x9c>
 7ee:	1a 16       	cp	r1, r26
 7f0:	f0 40       	sbci	r31, 0x00	; 0
 7f2:	a2 2f       	mov	r26, r18
 7f4:	23 2f       	mov	r18, r19
 7f6:	34 2f       	mov	r19, r20
 7f8:	44 27       	eor	r20, r20
 7fa:	58 5f       	subi	r21, 0xF8	; 248
 7fc:	f3 cf       	rjmp	.-26     	; 0x7e4 <__addsf3x+0x38>
 7fe:	46 95       	lsr	r20
 800:	37 95       	ror	r19
 802:	27 95       	ror	r18
 804:	a7 95       	ror	r26
 806:	f0 40       	sbci	r31, 0x00	; 0
 808:	53 95       	inc	r21
 80a:	c9 f7       	brne	.-14     	; 0x7fe <__addsf3x+0x52>
 80c:	7e f4       	brtc	.+30     	; 0x82c <__addsf3x+0x80>
 80e:	1f 16       	cp	r1, r31
 810:	ba 0b       	sbc	r27, r26
 812:	62 0b       	sbc	r22, r18
 814:	73 0b       	sbc	r23, r19
 816:	84 0b       	sbc	r24, r20
 818:	ba f0       	brmi	.+46     	; 0x848 <__addsf3x+0x9c>
 81a:	91 50       	subi	r25, 0x01	; 1
 81c:	a1 f0       	breq	.+40     	; 0x846 <__addsf3x+0x9a>
 81e:	ff 0f       	add	r31, r31
 820:	bb 1f       	adc	r27, r27
 822:	66 1f       	adc	r22, r22
 824:	77 1f       	adc	r23, r23
 826:	88 1f       	adc	r24, r24
 828:	c2 f7       	brpl	.-16     	; 0x81a <__addsf3x+0x6e>
 82a:	0e c0       	rjmp	.+28     	; 0x848 <__addsf3x+0x9c>
 82c:	ba 0f       	add	r27, r26
 82e:	62 1f       	adc	r22, r18
 830:	73 1f       	adc	r23, r19
 832:	84 1f       	adc	r24, r20
 834:	48 f4       	brcc	.+18     	; 0x848 <__addsf3x+0x9c>
 836:	87 95       	ror	r24
 838:	77 95       	ror	r23
 83a:	67 95       	ror	r22
 83c:	b7 95       	ror	r27
 83e:	f7 95       	ror	r31
 840:	9e 3f       	cpi	r25, 0xFE	; 254
 842:	08 f0       	brcs	.+2      	; 0x846 <__addsf3x+0x9a>
 844:	b0 cf       	rjmp	.-160    	; 0x7a6 <__addsf3+0x28>
 846:	93 95       	inc	r25
 848:	88 0f       	add	r24, r24
 84a:	08 f0       	brcs	.+2      	; 0x84e <__addsf3x+0xa2>
 84c:	99 27       	eor	r25, r25
 84e:	ee 0f       	add	r30, r30
 850:	97 95       	ror	r25
 852:	87 95       	ror	r24
 854:	08 95       	ret

00000856 <__fp_inf>:
 856:	97 f9       	bld	r25, 7
 858:	9f 67       	ori	r25, 0x7F	; 127
 85a:	80 e8       	ldi	r24, 0x80	; 128
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	60 e0       	ldi	r22, 0x00	; 0
 860:	08 95       	ret

00000862 <__fp_nan>:
 862:	9f ef       	ldi	r25, 0xFF	; 255
 864:	80 ec       	ldi	r24, 0xC0	; 192
 866:	08 95       	ret

00000868 <__fp_pscA>:
 868:	00 24       	eor	r0, r0
 86a:	0a 94       	dec	r0
 86c:	16 16       	cp	r1, r22
 86e:	17 06       	cpc	r1, r23
 870:	18 06       	cpc	r1, r24
 872:	09 06       	cpc	r0, r25
 874:	08 95       	ret

00000876 <__fp_pscB>:
 876:	00 24       	eor	r0, r0
 878:	0a 94       	dec	r0
 87a:	12 16       	cp	r1, r18
 87c:	13 06       	cpc	r1, r19
 87e:	14 06       	cpc	r1, r20
 880:	05 06       	cpc	r0, r21
 882:	08 95       	ret

00000884 <__fp_round>:
 884:	09 2e       	mov	r0, r25
 886:	03 94       	inc	r0
 888:	00 0c       	add	r0, r0
 88a:	11 f4       	brne	.+4      	; 0x890 <__fp_round+0xc>
 88c:	88 23       	and	r24, r24
 88e:	52 f0       	brmi	.+20     	; 0x8a4 <__fp_round+0x20>
 890:	bb 0f       	add	r27, r27
 892:	40 f4       	brcc	.+16     	; 0x8a4 <__fp_round+0x20>
 894:	bf 2b       	or	r27, r31
 896:	11 f4       	brne	.+4      	; 0x89c <__fp_round+0x18>
 898:	60 ff       	sbrs	r22, 0
 89a:	04 c0       	rjmp	.+8      	; 0x8a4 <__fp_round+0x20>
 89c:	6f 5f       	subi	r22, 0xFF	; 255
 89e:	7f 4f       	sbci	r23, 0xFF	; 255
 8a0:	8f 4f       	sbci	r24, 0xFF	; 255
 8a2:	9f 4f       	sbci	r25, 0xFF	; 255
 8a4:	08 95       	ret

000008a6 <__itoa_ncheck>:
 8a6:	bb 27       	eor	r27, r27
 8a8:	4a 30       	cpi	r20, 0x0A	; 10
 8aa:	31 f4       	brne	.+12     	; 0x8b8 <__itoa_ncheck+0x12>
 8ac:	99 23       	and	r25, r25
 8ae:	22 f4       	brpl	.+8      	; 0x8b8 <__itoa_ncheck+0x12>
 8b0:	bd e2       	ldi	r27, 0x2D	; 45
 8b2:	90 95       	com	r25
 8b4:	81 95       	neg	r24
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__utoa_common>

000008bc <__utoa_ncheck>:
 8bc:	bb 27       	eor	r27, r27

000008be <__utoa_common>:
 8be:	fb 01       	movw	r30, r22
 8c0:	55 27       	eor	r21, r21
 8c2:	aa 27       	eor	r26, r26
 8c4:	88 0f       	add	r24, r24
 8c6:	99 1f       	adc	r25, r25
 8c8:	aa 1f       	adc	r26, r26
 8ca:	a4 17       	cp	r26, r20
 8cc:	10 f0       	brcs	.+4      	; 0x8d2 <__utoa_common+0x14>
 8ce:	a4 1b       	sub	r26, r20
 8d0:	83 95       	inc	r24
 8d2:	50 51       	subi	r21, 0x10	; 16
 8d4:	b9 f7       	brne	.-18     	; 0x8c4 <__utoa_common+0x6>
 8d6:	a0 5d       	subi	r26, 0xD0	; 208
 8d8:	aa 33       	cpi	r26, 0x3A	; 58
 8da:	08 f0       	brcs	.+2      	; 0x8de <__utoa_common+0x20>
 8dc:	a9 5d       	subi	r26, 0xD9	; 217
 8de:	a1 93       	st	Z+, r26
 8e0:	00 97       	sbiw	r24, 0x00	; 0
 8e2:	79 f7       	brne	.-34     	; 0x8c2 <__utoa_common+0x4>
 8e4:	b1 11       	cpse	r27, r1
 8e6:	b1 93       	st	Z+, r27
 8e8:	11 92       	st	Z+, r1
 8ea:	cb 01       	movw	r24, r22
 8ec:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <strrev>

000008f0 <strrev>:
 8f0:	dc 01       	movw	r26, r24
 8f2:	fc 01       	movw	r30, r24
 8f4:	67 2f       	mov	r22, r23
 8f6:	71 91       	ld	r23, Z+
 8f8:	77 23       	and	r23, r23
 8fa:	e1 f7       	brne	.-8      	; 0x8f4 <strrev+0x4>
 8fc:	32 97       	sbiw	r30, 0x02	; 2
 8fe:	04 c0       	rjmp	.+8      	; 0x908 <__stack+0x9>
 900:	7c 91       	ld	r23, X
 902:	6d 93       	st	X+, r22
 904:	70 83       	st	Z, r23
 906:	62 91       	ld	r22, -Z
 908:	ae 17       	cp	r26, r30
 90a:	bf 07       	cpc	r27, r31
 90c:	c8 f3       	brcs	.-14     	; 0x900 <__stack+0x1>
 90e:	08 95       	ret

00000910 <_exit>:
 910:	f8 94       	cli

00000912 <__stop_program>:
 912:	ff cf       	rjmp	.-2      	; 0x912 <__stop_program>
